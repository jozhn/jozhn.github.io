<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UnrealBuildTool生成ProjectFiles</title>
    <url>/2022/11/02/UnrealBuildTool-ProjectFiles/</url>
    <content><![CDATA[<h2 id="GenerateProjectFiles"><a href="#GenerateProjectFiles" class="headerlink" title="GenerateProjectFiles"></a>GenerateProjectFiles</h2><p>UE中构建项目之前，都需要先执行GenerateProjectFiles，这样UE会通过mono执行UnrealBuildTool（UBT）收集所有模块的<code>Build.cs</code>，然后生成各种编译所需要的文件。比如<code>*.generated.h</code>等等。</p>
<p>在不同平台、不同IDE下还需要生成不同结构的配置，因为Xcode、VS、Rider的工程配置文件是各不相同的，UBT源码中需要分类去处理。</p>
<p>以VS为例，UBT会为VS生成<code>.sln</code>以及各种模块的<code>.vcxproj</code>文件，里面包含了各个模块的宏定义以及include path，都是由<code>Build.cs</code>生成出来的。这样IDE在打开工程时才知道模块的宏是什么，引用的路径有哪些，也就是常说的IntelliSense功能。<strong>当然，更重要的是能让编译器在编译时找到</strong>。</p>
<span id="more"></span>

<h2 id="支持的IDE"><a href="#支持的IDE" class="headerlink" title="支持的IDE"></a>支持的IDE</h2><p>除了VS，UBT还支持为其他的一些IDE或者编译工具生成对应的配置文件。IDE主要是Xcode和Rider&#x2F;CLion，还有一些小众一点的比如CodeLite、Eddie、KDevelop。编译工具支持CMake、Make、QMake等。</p>
<p><img src="https://img.jozhn.com/blog/202211011016185.png"></p>
<p>大部分情况我们都是用VS&#x2F;Xcode&#x2F;Rider。我在Windows和Mac上都用Rider，因为基于UE定制了一些功能，可以自动生成Generate，而且IntelliSense和查找功能也比较强大。</p>
<h2 id="UBT参数"><a href="#UBT参数" class="headerlink" title="UBT参数"></a>UBT参数</h2><p><a href="https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/BuildTools/UnrealBuildTool/ProjectFilesForIDEs/">Project Files for IDEs | Unreal Engine 4.27 Documentation</a></p>
<p>UE官方给的UBT参数文档很粗糙，只是把一部分参数列出来了，没有说清楚什么时候使用哪些参数，各有什么作用。这里简单介绍一些有用的参数。</p>
<ol>
<li>指定IDE配置<ol>
<li>可选参数”-ProjectFiles” “-Rider” “-XCodeProjectFiles”等</li>
<li>一般默认是”-ProjectFiles”，会生成VS的配置文件和平台必须的文件</li>
<li>可以自己调用换成”-Rider”或”-XCodeProjectFiles”生成Rider和Xcode的配置</li>
<li>可以多个组合，但需要运行的平台支持（Win没法生成Xcode的），所以没什么卵用</li>
</ol>
</li>
<li>-Platforms<ol>
<li>生成平台，生成ProjectFiles时仅可选Editor支持的平台，包括Win64&#x2F;Win32&#x2F;Mac&#x2F;Linux</li>
<li>决定了PLATFORM_XXX等宏的生成</li>
</ol>
</li>
<li>-TargetTypes<ol>
<li>运行模式，Editor或者Game</li>
<li>决定了WITH_EDITOR等相关宏的生成</li>
</ol>
</li>
<li>-TargetConfigurations<ol>
<li>UE编译选项，UnrealTargetConfiguration</li>
<li>可选Debug&#x2F;DebugGame&#x2F;Development&#x2F;Shipping&#x2F;Test</li>
<li>决定了UE_BUILD_XXX宏的生成</li>
</ol>
</li>
<li>-project<ol>
<li>.uproject绝对路径</li>
<li>控制为哪个项目生成配置</li>
</ol>
</li>
</ol>
<p>参数示例(便于展示参数换行了)：</p>
<p>Windows</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./UnrealBuildTool.exe</span><br><span class="line">-Rider</span><br><span class="line">-Platforms=Win64</span><br><span class="line">-TargetTypes=Game</span><br><span class="line">-TargetConfigurations=Shipping</span><br><span class="line">-project=<span class="string">&quot;C:\xxx\Game.uproject&quot;</span></span><br></pre></td></tr></table></figure>

<p>Mac或Linux下需要使用mono调用UBT</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mono <span class="string">&quot;xxx/UnrealBuildTool.exe&quot;</span></span><br><span class="line">-Rider</span><br><span class="line">-Platforms=Mac</span><br><span class="line">-TargetTypes=Game</span><br><span class="line">-TargetConfigurations=Shipping</span><br><span class="line">-project=<span class="string">&quot;C:\xxx\Game.uproject&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样就可以为Rider生成Game项目的Game模式的Shipping编译配置。</p>
<p>一般可以修改TargetTypes更换成Editor模式，或者修改TargetConfigurations来切换编译选项。<br><strong>Platforms只能选当前所使用的的桌面平台，不支持生成移动平台的</strong>，因为生成中的一些操作依赖操作系统的环境，并且UBT代码中做了限制。</p>
<p>不过我们可以修改UBT代码来跳过这个限制，注释以下代码然后重新编译UBT即可在Windows生成Android的配置，在Mac生成Android和IOS的配置。Windows不能生成IOS和Mac的配置，因为生成过程依赖Xcode环境。</p>
<p><img src="https://img.jozhn.com/blog/202211011455309.png"></p>
<p>Rider生成之后会产生json配置文件，文件路径：<br><code>&#123;GameRoot&#125;/Intermediate/ProjectFiles/.Rider/&#123;Platform&#125;/&#123;Configuration&#125;/&#123;TargetType&#125;/&#123;ProjectName&#125;.json</code> </p>
<p>同目录下除了<code>&#123;ProjectName&#125;.json</code>还有一个<code>UE4.json</code> ，里面包含了所需要的全部编译参数和include path。</p>
<h2 id="IDE配置文件"><a href="#IDE配置文件" class="headerlink" title="IDE配置文件"></a>IDE配置文件</h2><p>各个IDE的配置各不相同，Xcode是<code>.xcodeproj</code>文件，VS是<code>.vcxproj</code>文件，而Rider是<code>.json</code>文件。</p>
<p>很显然，Rider的文件最方便我们读取使用，而且Win和Mac都支持生成。</p>
<p>这个配置文件对我们有什么作用？</p>
<p>这些配置文件是给IDE或编译工具使用的，正常开发游戏确实用不到这个。但是如果你需要导出指定平台的特点条件下的宏的时候，就需要使用UBT去导出，而如果想不修改UBT就做到这一点，只能像我说的这样调用UBT生成Rider配置文件，然后读取。</p>
<p>其中有用的信息之一是EnvironmentDefinitions，包含了引擎和Game全局的宏定义，其他的宏定义也都来自这些宏。</p>
<p><img src="https://img.jozhn.com/blog/202211011028156.png"></p>
<p>其次是各个模块的参数，PublicIncludePaths和PrivateIncludePaths包含了这个模块的全部include path。最重要的是ThirdParty下的各个模块，因为这些第三方库的文件路径并不遵循UE的Public&#x2F;Private文件夹的模式，想收集这些include path会很困难，所以UE通过Build.cs来为这些模块添加include path，并且通过UBT收集然后导出给IDE和编译工具。</p>
<h2 id="调试UBT"><a href="#调试UBT" class="headerlink" title="调试UBT"></a>调试UBT</h2><p>UBT是个命令行程序，执行速度很快，想要调试的话是不方便通过attach的方式调试的，最好的办法是通过debug模式启动。</p>
<p>首先在IDE中切换项目为UBT：</p>
<p><img src="https://img.jozhn.com/blog/202211011013293.png"></p>
<p>然后修改UBT的启动参数，添加自己需要的参数</p>
<p><img src="https://img.jozhn.com/blog/202211011015617.png"></p>
<p>最后在需要的地方断点，然后debug启动即可。</p>
]]></content>
  </entry>
  <entry>
    <title>Anti-entropy and Gossiping</title>
    <url>/2017/12/17/Old-Anti-entropy-and-Gossiping/</url>
    <content><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote>
<p>N个节点，使用P2P方法，分别写出使用anti-entropy和gossiping传播模型的求分布式平均数算法。</p>
</blockquote>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><strong>anti-entropy</strong>是基于gossip的一种流行的传播模型，在模型中，节点P随机选择另一节点Q，然后交换更新信息，交换更新信息的方法有三种：push、pull和push-pull，书上说push-pull最好，因此就使用push-pull的方法。<br><strong>gossiping</strong>也叫rumor spreading(流言传播)，是anti-entropy的一个特殊变体。区别就是P与Q通信时如果发现Q已经被另外的节点更新了，那么P可能不再传播该信息的概率为1&#x2F;k，比如k&#x3D;4时遇到这种情况，下一次仍然传播的概率就变为3&#x2F;4。</p>
<span id="more"></span>

<p>这是分布式系统的作业，要求用java实现，每个算法写一个java，目的就是模拟一下使用上述两种算法分布式节点求平均数，所以简单写一写就可以了，要求不高。<br>Anti-entropy的算法是先写的，所以还有些问题，循环用的比较粗糙~</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//antientropy.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//anti-entropy push&amp;pull </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">antientropy</span> &#123;</span><br><span class="line">	<span class="comment">//定义N个节点,Node类在gossiping中已经定义了</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//记录节点之和</span></span><br><span class="line">		<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//记录感染个数</span></span><br><span class="line">		<span class="type">int</span> infected=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//声明节点数组</span></span><br><span class="line">		ArrayList&lt;Node&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Node&gt;(); </span><br><span class="line">		<span class="comment">//记录信息交换的二维数组,0表示i、j两个节点未交换信息</span></span><br><span class="line">		<span class="type">int</span>[][] state = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//初始化:给节点数组增加N个元素</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i &lt;N;i++ ) &#123;</span><br><span class="line">			<span class="comment">//节点的值大小为0到10</span></span><br><span class="line">			list.add(i,<span class="keyword">new</span> <span class="title class_">Node</span>((<span class="type">float</span>)(Math.random()*<span class="number">10</span>),<span class="literal">false</span>,<span class="number">100</span>));</span><br><span class="line">			<span class="comment">//System.out.println(&quot;节点&quot;+i+&quot;=&quot;+list.get(i).getValue());</span></span><br><span class="line">			sum+=list.get(i).getValue();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">				<span class="comment">//设置i、j未交换信息</span></span><br><span class="line">				state[i][j]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//选取传播节点P</span></span><br><span class="line">		<span class="type">int</span> p=(<span class="type">int</span>)(Math.random()*N);</span><br><span class="line">		list.get(p).setInfected(<span class="literal">true</span>);</span><br><span class="line">		infected++;</span><br><span class="line">		System.out.println(<span class="string">&quot;由&quot;</span>+p+<span class="string">&quot;开始传播——anti-entrpy&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(infected&lt;N)&#123;</span><br><span class="line">			<span class="comment">//每轮选取一个交换信息的节点P</span></span><br><span class="line">			p=(<span class="type">int</span>)(Math.random()*N);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">				<span class="type">int</span> q=(<span class="type">int</span>)(Math.random()*N);</span><br><span class="line">				<span class="keyword">if</span>(p==q)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="comment">//若都是感染者或都不是也跳过</span></span><br><span class="line">				<span class="keyword">if</span>((list.get(p).isInfected()&amp;&amp;list.get(q).isInfected()) || (!list.get(p).isInfected()&amp;&amp;!list.get(q).isInfected()))</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="comment">//若P与J未交换且其中一者已感染则交换</span></span><br><span class="line">				<span class="keyword">if</span>(state[p][q]==<span class="number">0</span>&amp;&amp;state[q][p]==<span class="number">0</span>)&#123;</span><br><span class="line">					System.out.print(p+<span class="string">&quot;与&quot;</span>+q+<span class="string">&quot;交换信息|&quot;</span>);</span><br><span class="line">					<span class="comment">//双方分别取平均值</span></span><br><span class="line">					list.get(p).setValue((list.get(p).getValue()+list.get(q).getValue())/<span class="number">2</span>);</span><br><span class="line">					list.get(q).setValue(list.get(p).getValue());</span><br><span class="line">					list.get(p).setInfected(<span class="literal">true</span>);list.get(q).setInfected(<span class="literal">true</span>);<span class="comment">//确保都变为已感染</span></span><br><span class="line">					infected++;</span><br><span class="line">					state[p][q]=<span class="number">1</span>;<span class="comment">//表示i、j交换过</span></span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;感染率：&quot;</span>+(<span class="type">float</span>)infected/N);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;感染结束，平均值为：&quot;</span>+(<span class="type">float</span>)list.get(p).getValue());</span><br><span class="line">		System.out.println(N+<span class="string">&quot;个节点实际平均值为：&quot;</span>+(<span class="type">float</span>)sum/N);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gossiping.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//gossiping push&amp;pull </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">gossiping</span> &#123;</span><br><span class="line">	<span class="comment">//定义N个节点</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//记录节点之和</span></span><br><span class="line">		<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//声明节点数组</span></span><br><span class="line">		ArrayList&lt;Node&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Node&gt;(); </span><br><span class="line">		<span class="comment">//记录信息交换的二维数组,0表示i、j两个节点未交换信息</span></span><br><span class="line">		<span class="type">int</span>[][] state = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">		<span class="comment">//初始化:给节点数组增加N个元素</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i &lt;N;i++ ) &#123;</span><br><span class="line">			<span class="comment">//节点的值大小为0到10的整数</span></span><br><span class="line">			list.add(i,<span class="keyword">new</span> <span class="title class_">Node</span>((<span class="type">float</span>)(Math.random()*<span class="number">10</span>),<span class="literal">false</span>,<span class="number">100</span>));</span><br><span class="line">			<span class="comment">//System.out.println(&quot;节点&quot;+i+&quot;=&quot;+list.get(i).getValue());</span></span><br><span class="line">			sum+=list.get(i).getValue();</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">				<span class="comment">//设置i、j未交换信息</span></span><br><span class="line">				state[i][j]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//选取传播节点P</span></span><br><span class="line">		<span class="type">int</span> p=(<span class="type">int</span>)(Math.random()*list.size());</span><br><span class="line">		list.get(p).setInfected(<span class="literal">true</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;由&quot;</span>+p+<span class="string">&quot;开始传播——gossiping&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(list.get(<span class="number">0</span>).getValue()!=list.get(<span class="number">1</span>).getValue())&#123;</span><br><span class="line">			<span class="comment">//每轮选取一个交换信息的节点P</span></span><br><span class="line">			p=(<span class="type">int</span>)(Math.random()*list.size());</span><br><span class="line">			<span class="comment">//根据传染率确定是否继续传染</span></span><br><span class="line">			<span class="keyword">if</span>(Math.random()*<span class="number">100</span>&gt;list.get(p).getRate())</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">				<span class="type">int</span> q=(<span class="type">int</span>)(Math.random()*list.size());</span><br><span class="line">				<span class="keyword">if</span>(p==q)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="comment">//都是感染者则降低双方传染率然后跳过,k取4</span></span><br><span class="line">				<span class="keyword">if</span>((state[p][q]==<span class="number">1</span>||state[q][p]==<span class="number">1</span>) &amp;&amp; list.get(p).getValue()==list.get(q).getValue())&#123;</span><br><span class="line">					list.get(p).setRate((<span class="type">int</span>)(list.get(p).getRate()*<span class="number">0.75</span>));</span><br><span class="line">					<span class="keyword">if</span>(list.get(p).getRate()&lt;<span class="number">25</span>)</span><br><span class="line">						list.remove(p);</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//若P与J未交换且其中一者已感染则交换</span></span><br><span class="line">				<span class="keyword">if</span>(list.get(p).getValue()!=list.get(q).getValue())&#123;</span><br><span class="line">					System.out.println(p+<span class="string">&quot;与&quot;</span>+q+<span class="string">&quot;交换信息&quot;</span>);</span><br><span class="line">					<span class="comment">//双方分别取平均值</span></span><br><span class="line">					list.get(p).setValue((list.get(p).getValue()+list.get(q).getValue())/<span class="number">2</span>);</span><br><span class="line">					list.get(q).setValue(list.get(p).getValue());</span><br><span class="line">					state[p][q]=<span class="number">1</span>;state[q][p]=<span class="number">1</span>;<span class="comment">//设置两节点交换过信息</span></span><br><span class="line">					list.get(p).setInfected(<span class="literal">true</span>);list.get(q).setInfected(<span class="literal">true</span>);<span class="comment">//确保都变为已感染</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;感染结束，平均值为：&quot;</span>+(<span class="type">float</span>)list.get(<span class="number">0</span>).getValue());</span><br><span class="line">		System.out.println(N+<span class="string">&quot;个节点实际平均值为：&quot;</span>+(<span class="type">float</span>)sum/N);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">float</span> value;<span class="comment">//节点的值</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> infected;<span class="comment">//是否感染，true为是</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> rate;<span class="comment">//传染率降到0时则已隔离，仅对Gossiping有用</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">float</span> value, <span class="type">boolean</span> infected, <span class="type">int</span> rate)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.value=value;</span><br><span class="line">		<span class="built_in">this</span>.infected=infected;</span><br><span class="line">		<span class="built_in">this</span>.rate=rate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">float</span> value)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.value = value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInfected</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> infected;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfected</span><span class="params">(<span class="type">boolean</span> infected)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.infected = infected;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRate</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> rate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRate</span><span class="params">(<span class="type">int</span> rate)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.rate = rate;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Unity C# 编译集成 Google Protobuf</title>
    <url>/2020/11/17/Old-CSharp-Compile-With-Google-Protobuf/</url>
    <content><![CDATA[<p>踩了很多坑，因为网上几年前基本上都是用第三方 <code>protobuf-net</code> 库来作为 C# 的 Protobuf 工具使用的，尤其是 Unity 。所以关于 Google 官方的 C# 集成到 Unity 基本没人使用，C# 非 Unity 的开发（比如 .net ）可以通过VS的 Nuget 快速集成 Protobuf，在 Unity 上这样做只能够在 VS 编辑器下检测到这个库，而 Unity 编辑器是不知道的，所以不能用这种方式。</p>
<p>而直接接入源码也会因为缺少依赖报错无法解决，最终还是采用自己编译出DLL集成的方式来接入。</p>
<p>另外前提是 Unity 切换成 <code>.net4.x</code>，因为 Google Protobuf 需要 4.5+。</p>
<span id="more"></span>

<h2 id="编译DLL"><a href="#编译DLL" class="headerlink" title="编译DLL"></a>编译DLL</h2><p>源码：<a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a></p>
<p>下载 <a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protobuf-csharp-3.14.0.zip">protobuf-csharp-3.14.0.zip</a></p>
<p>使用VS打开目录 <code>protobuf-3.14.0\csharp\src</code> 中的 <code>Google.Protobuf.sln</code></p>
<p>如图选择：</p>
<p><img src="https://p.pstatp.com/origin/138870001b2698400e9a2" alt="image-20201117164601808"></p>
<p>然后生成</p>
<p><img src="https://p.pstatp.com/origin/137350002f761544a993b" alt="image-20201117164624330"></p>
<p>生成结束后 <code>protobuf-3.14.0\csharp\src\Google.Protobuf\bin\Release\net45</code> 目录会生成以下文件：</p>
<p><img src="https://p.pstatp.com/origin/137820001b88638baeb28" alt="image-20201117164722068"></p>
<p>把这些文件复制到 Unity 项目的 <code>Assets/Plugins</code> 目录，这样就算集成好了序列化和反序列化的库。</p>
<h2 id="导出Proto"><a href="#导出Proto" class="headerlink" title="导出Proto"></a>导出Proto</h2><p>集成之后只是有了序列化和反序列化的基础库，但是没有数据结构，所以还需要通过 <code>.proto</code> 文件编译生成C#可以使用的数据结构。</p>
<p>用 protoc.exe：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protoc --csharp_out=. *.proto</span><br></pre></td></tr></table></figure>

<p>把多个proto分别生成 <code>cs</code> 文件，放到项目里合适的目录即可。</p>
<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>在需要使用的地方引入 Protobuf：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Google.Protobuf;</span><br></pre></td></tr></table></figure>



<p>构造Message数据：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    Age = <span class="number">22</span>,</span><br><span class="line">    Address = <span class="string">&quot;111111&quot;</span>,</span><br><span class="line">    Name = <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>序列化：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">byte</span>[] result = person.ToByteArray();</span><br></pre></td></tr></table></figure>



<p>反序列化：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Person p = Person.Parser.ParseFrom(result);</span><br></pre></td></tr></table></figure>



<h2 id="修改网络层接口"><a href="#修改网络层接口" class="headerlink" title="修改网络层接口"></a>修改网络层接口</h2><p>最后是要把所有以前调用 <code>protobuf-net</code> 的地方改掉，另外 Google Protobuf 的接口类是 IMessage。</p>
<h3 id="泛型方法反序列化"><a href="#泛型方法反序列化" class="headerlink" title="泛型方法反序列化"></a>泛型方法反序列化</h3><p>在知道类型的情况下是很容易反序列化 Proto 数据的，尤其是可以把对应的 Type 作为函数泛型约束的情况。</p>
<p>即使是只知道 Type 的时候，在 <code>protobuf-net</code> 中也提供了反射反序列化的接口。不过 Google 官方没有提供反射解析的方式，因此只能使用泛型方法反序列化。</p>
<p>这里我提供两种泛型方法用于反序列化，这两种都是可以用的：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一种泛型反序列化方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Deserialize</span>&lt;<span class="title">T</span>&gt;(<span class="params">Stream s</span>) <span class="keyword">where</span> T : IMessage&lt;T&gt;, <span class="keyword">new</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    T message = <span class="keyword">new</span> T();</span><br><span class="line">    message.MergeFrom(s);</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种泛型反序列化方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Deserialize2</span>&lt;<span class="title">T</span>&gt;(<span class="params">Stream s</span>) <span class="keyword">where</span> T : IMessage&lt;T&gt;, <span class="keyword">new</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MessageParser&lt;T&gt; parser = <span class="keyword">new</span> MessageParser&lt;T&gt;(() =&gt; <span class="keyword">new</span> T());</span><br><span class="line">    <span class="keyword">return</span> parser.ParseFrom(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="工厂模式函数反序列化"><a href="#工厂模式函数反序列化" class="headerlink" title="工厂模式函数反序列化"></a>工厂模式函数反序列化</h3><p>在不知道类型的情况下怎么反序列化 Proto 数据？服务器发给我们的数据只会有消息ID和二进制数据，这种情况怎么反序列化？</p>
<p>一般来说，需要在游戏启动时提前实例化好需要用到的消息的解析器，并保存与消息ID的对应关系，用于之后的序列化和反序列化。</p>
<p>不推荐使用反射的方式创建，而且 Google 官方也没提供反射解析的方式，因此想保存消息Type与消息ID的映射是没用的。所以我们写一个静态类，里面提供一个工厂方法，用于提供指定类型消息的解析器对象：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Proto 消息解析器创建类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Parser</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MessageParser <span class="title">Get</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : IMessage&lt;T&gt;, <span class="keyword">new</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageParser&lt;T&gt; parser = <span class="keyword">new</span> MessageParser&lt;T&gt;(() =&gt; <span class="keyword">new</span> T());</span><br><span class="line">        <span class="keyword">return</span> parser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时，在游戏启动时也要创建对应的字典，来保存消息ID和解析器的对应关系，这里就不写了。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>最后要注意的是 Google 官方的 C# Protobuf 相比 <code>protobuf-net</code> 还有一些区别：</p>
<ol>
<li>所有消息的字段都会强制转为驼峰命名并去掉下划线，并且没有办法避免；</li>
<li>消息字段不能再使用byte数组，必须使用 Google 封装的 ByteString，并且它是只读的；</li>
<li>不提供通过反射进行反序列化的接口，也就是不能通过把消息的 Type 作为参数传递来反序列化。</li>
</ol>
<p>前两点还是挺坑的，命名导致从 <code>protobuf-net</code> 换为官方 Protobuf 成本很高，要修改的太多，然后不能使用 byte 数组导致需要加密的时候必须对 ByteString 进行复制转为 byte 数组然后解密。</p>
<p>不过还是更换为官方的 Protobuf 了，因为最新的解决了 GC 的问题，然后避免了反射的调用（其实是强制的）。</p>
]]></content>
  </entry>
  <entry>
    <title>Effective C# 之 C#的编程习惯</title>
    <url>/2020/08/31/Old-Effective-Csharp-Idioms/</url>
    <content><![CDATA[<p>目前网络上的《Effective C#》笔记都是基于07年出版的原书第二版的翻译版本，如今很多理论已经过时，而最新的第三版的中文版已经在18年出版，因此这里分享一下第一章节C#的编程习惯的读书笔记。</p>
<span id="more"></span>

<p>这本书其实主要讲的是改善C#代码的50个方法，相比《Effective C++》是有差距的，但是同样很有用。第一章节的C#编程习惯讲了一些C#编程规范。</p>
<h2 id="1-优先使用隐式类型的局部变量"><a href="#1-优先使用隐式类型的局部变量" class="headerlink" title="1.优先使用隐式类型的局部变量"></a>1.优先使用隐式类型的局部变量</h2><p><strong>优先使用</strong>隐式类型的局部变量（注意不是总是使用），即使用<code>var</code>声明变量。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//int count = 0;</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>这样不需要考虑变量的类型，因为通过初始化语句往往可以直接看出。而且即使是通过方法初始化，也可以通过使用合适的变量名、方法名来方便判断。</p>
<p>举一个具体的例子，在使用<code>LINQ</code>语句时，某些查询操作所获得结果是<code>IQueryable&lt;T&gt;</code>，而有些则返回<code>IEnumberable&lt;T&gt;</code>。如果都当做后者处理，性能上会差一些，因为<code>IQueryable&lt;T&gt;</code>对数据的查询做了优化。使用<code>var</code>来让编译器推断类型，反而获得了性能优势。</p>
<p>具体代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">FindCustomersStartingWith</span>(<span class="params">stirng start</span>)</span>&#123;</span><br><span class="line">    IEnumerable&lt;<span class="built_in">string</span>&gt; q = <span class="keyword">from</span> c <span class="keyword">in</span> db.Customers <span class="keyword">select</span> c.ContactName;</span><br><span class="line">    <span class="keyword">var</span> q2 = q.Where(s =&gt; s.StartsWith(start));</span><br><span class="line">    <span class="keyword">return</span> q2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码有严重的性能问题。其中的查询语句会把每个人的姓名从数据库中取出，返回值实际上应该是<code>IQueryable&lt;T&gt;</code>，但开发者却保存为<code>IEnumberable&lt;T&gt;</code>，而由于<code>IQueryable&lt;T&gt;</code>继承自<code>IEnumberable&lt;T&gt;</code>，因此不会报错，但这样却导致后续代码无法使用<code>IQueryable&lt;T&gt;</code>的特性。比如下面<code>q2</code>本可以使用<code>Querable.Where</code>去查询，却使用了<code>Enumerable.Where</code>。实际上<code>IQueryable&lt;T&gt;</code>能够把数据查询相关的多个表达式树组合成一项操作，使得一次性在存放数据的远程服务器上执行完毕再返回，而<code>IEnumberable&lt;T&gt;</code>却需要查询到本地之后才能再执行第二条查询语句，一方面浪费了网络流量、另一方面大大降低了查询效率。</p>
<p>修改为下面这样，是更简洁也更好的写法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">FindCustomersStartingWith</span>(<span class="params">stirng start</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q = <span class="keyword">from</span> c <span class="keyword">in</span> db.Customers <span class="keyword">select</span> c.ContactName;</span><br><span class="line">    <span class="keyword">var</span> q2 = q.Where(s =&gt; s.StartsWith(start));</span><br><span class="line">    <span class="keyword">return</span> q2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当然，<code>var</code>也不能滥用，如果过多使用var会导致其他开发者难以理解代码类型。同时在使用数值型类型变量int、float、double等时，如果涉及到数值转换（尤其是窄化转换，如long到int），请不要使用<code>var</code>，它可能会导致精度降低。</p>
<p>例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = GetMagicNumber();</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">100</span> * f / <span class="number">6</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Type:<span class="subst">&#123;total.GetType().Name&#125;</span>, Value:<span class="subst">&#123;total&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>假设<code>GetMagicNumber()</code>返回值是10，那么<code>total</code>的值是多少取决于<code>GetMagicNumber()</code>的返回值类型。</p>
<p>如果你不清楚<code>GetMagicNumber()</code>的返回值类型，就有可能计算出不符合需求的<code>total</code>。比如返回值是Double和Int32，那么最终的<code>total</code>分别是166.666666666667和166。</p>
<p>这个问题其实不是<code>var f</code>和<code>var total</code>引发的，而是阅读代码的人不知道<code>GetMagicNumber()</code>的返回值类型，也不知道运行过程中<code>GetMagicNumber()</code>导致的默认的数值转换。</p>
<p>这个例子下，使用<code>var</code>很显然可能导致代码维护困难，这类场合就不适合使用。</p>
<p>而一般情况下，即使你明确了变量类型，也未必能确保类型安全或者保证代码更易读懂，而选择了错误的类型反而会导致程序效率降低，这样不如使用<code>var</code>让编译器自动选择。</p>
<h2 id="2-考虑用readonly代替const"><a href="#2-考虑用readonly代替const" class="headerlink" title="2.考虑用readonly代替const"></a>2.考虑用<code>readonly</code>代替<code>const</code></h2><p>C#有两种常量，一种是编译期常量，使用<code>const</code>；另一种是运行期常量，使用<code>readonly</code>。</p>
<p>编译期常量虽然会使得程序运行稍快那么一点点，但是远不如运行期常量灵活。只有程序性能极端重要，并且常量取值不会随版本变化时，才考虑使用<code>const</code>。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编译期常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> Millennium = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">//运行期常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">int</span> thisYear = <span class="number">2004</span>;</span><br></pre></td></tr></table></figure>

<p><code>const</code>可以在方法里声明，而<code>readonly</code>不可以。</p>
<p>同时，两种常量支持的值也不一样，<code>const</code>只支持内置的整数、浮点数、枚举、字符串。并且<code>const</code>常量只能用数字、字符串、null来初始化。<code>readonly</code>常量执行完构造函数之后就不能再修改了，但是它是在程序运行时初始化的，因此更加灵活。</p>
<p>其中一个好处在于，<code>readonly</code>常量的类型不受限制。比如<code>DateTime</code>类型常量，不能用<code>const</code>声明，但是可以用<code>readonly</code>声明。</p>
<p>此外，在跨程序集使用常量时，使用<code>readonly</code>可以避免不必要的编译。</p>
<p>例子：</p>
<p>一个名为<code>Infra</code>的程序集中同时使用<code>const</code>和<code>readonly</code>定义常量：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Constants</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">int</span> start = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> end = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一个名为<code>app</code>的程序集里引用了这两个字段：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;start is &#123;0&#125;&quot;</span>, Constants.start);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;end is &#123;0&#125;&quot;</span>, Constants.end);</span><br></pre></td></tr></table></figure>

<p>测试输出结果是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start is 5</span><br><span class="line">end is 10</span><br></pre></td></tr></table></figure>

<p>但如果过段时间修改<code>Infra</code>程序集的代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Constants</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">int</span> start = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> end = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只发布新版<code>Infra</code>程序集，而<code>app</code>程序集不重新构建，那么会出现问题。</p>
<p>你想看到的是;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start is 6</span><br><span class="line">end is 11</span><br></pre></td></tr></table></figure>

<p>然而结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start is 6</span><br><span class="line">end is 10</span><br></pre></td></tr></table></figure>

<p>这是因为<code>const</code>常量在<code>app</code>程序集中调用时，编译器直接写入了10这个字面量，而非引用<code>end</code>常量存放的空间。如果修改值需要重新编译所有用到该常量的代码。</p>
<p>而<code>start</code>是<code>readonly</code>声明的，运行时才加以解析，使得不需要重新编译<code>app</code>程序集就可以看到新的常量值。</p>
<p>不过对于版本号这种跟随程序集的常量，还是使用<code>const</code>比较好，这样修改的话不会导致其他程序集引用该值的地方都变成最新的值。</p>
<p>总结来说，<code>const</code>适合必须在编译期确定的值，如attribute参数、switch case标签、enum定义。除此之外，都应该考虑更加灵活的<code>readonly</code>常量。</p>
<h2 id="3-优先考虑is或as运算符，少用强制类型转换"><a href="#3-优先考虑is或as运算符，少用强制类型转换" class="headerlink" title="3.优先考虑is或as运算符，少用强制类型转换"></a>3.优先考虑is或as运算符，少用强制类型转换</h2><p>如果参数类型写成了<code>object</code>，那么可能需要把改参数转换成需要的类型才能继续编写代码。</p>
<p>这时有两种办法，一种是使用<code>as</code>运算符，另一种是强制类型转换（cast）来绕过编译器检查。在这之前，可以使用<code>is</code>判断该操作是否合理，再使用这两种办法。</p>
<p>其中，应该优先使用<code>as</code>运算符。这样会比强制类型转换更安全、更有效率。<code>as</code>与<code>is</code>运算符不会考虑用户定义的转换，只有当类型与要转换到的类型符合时才会顺利进行。这种类型转换操作很少会为了类型转换构建新的对象（但如果使用as运算符把装箱的值类型转换成未装箱且可为null的值类型，则会创建新对象）。</p>
<p>下面看个具体例子：</p>
<p>方法一：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> o = Factory.GetObject();</span><br><span class="line">MyType t = o <span class="keyword">as</span> MyType;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> o = Factory.GetObject();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    MyType t = (MyType)o;</span><br><span class="line">    <span class="keyword">if</span>(t != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// do sth</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(InvalidCastException)&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法一很显然比第二种更简洁，更好理解，且不需要使用<code>try/catch</code>结构，开销与代码量更低。</p>
<p>使用方法二不仅要捕获异常，而且要判断t是不是null。因为强制类型转换遇到null并不抛出异常。而使用as操作遇到这两种情况都会返回null，这样使用<code>if(t != null)</code>就可以概括地处理了。</p>
<p><code>as</code>运算符和强制类型转换的最大区别在于如何对待用户定义的转换。<code>as</code>与<code>is</code>运算符只会判断操作的对象在运行期是何种类型，除了必要的装箱、拆箱操作，不会执行其他额外操作。反之，强制类型转换则有可能发生用户预期之外的转换，比如数值类型之间的转换。例如可能发生long到short的转换，导致信息丢失。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">t = (MyType)st;</span><br></pre></td></tr></table></figure>

<p>上面这种写法，如果st声明是<code>object</code>那么可以编译，但运行会抛出异常。而换用下面这种写法，运行时不会抛出异常，只会返回null，这样也不需要额外的<code>try/catch</code>判断。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">t = st <span class="keyword">as</span> MyType;</span><br></pre></td></tr></table></figure>



<p>下面看一下什么情况不能用<code>as</code>。下面这种写法就无法通过编译：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> o = Factory.GetValue();</span><br><span class="line"><span class="built_in">int</span> i = o <span class="keyword">as</span> <span class="built_in">int</span>;<span class="comment">//无法编译</span></span><br></pre></td></tr></table></figure>

<p>因为<code>int</code>是值类型，无法保存null。当o不是<code>int</code>时，<code>as</code>执行结果时null，而<code>i</code>是<code>int</code>，无法保存null的结果，所以编译就发生错误了。有人会认为这里必须使用强制类型转换，并编写异常捕获，实际上并不需要。</p>
<p>依然使用<code>as</code>，但是不要转为<code>int</code>，而是可以保存null的<code>int?</code>类型，同时使用<code>var</code>让编译器自己选择类型：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> o = Factory.GetValue();</span><br><span class="line"><span class="keyword">var</span> i = o <span class="keyword">as</span> <span class="built_in">int</span>?;</span><br><span class="line"><span class="keyword">if</span>(i != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，如果<code>as</code>运算符左侧的变量是值类型或者可以为null的值类型，那么可以使用这个技巧来实现类型转换。</p>
<p>现在再来考虑一个问题，<code>foreach</code>循环在转换类型时用的是<code>as</code>还是<code>cast</code>？这里的循环指的是非泛型<code>IEnumerable</code>序列，它会在迭代过程中自动转换类型。当然在可选的情况下，还是要尽量采用类型安全的泛型版本。<br>答案是<code>cast</code>。它会把对象从<code>object</code>类型转换成需要的类型。</p>
<p>最后，要判断对象是不是某个类型，可以使用<code>is</code>运算符，而且该运算符遵循多态原则。</p>
<p>总结一下，在面向对象语言中，应该尽量避免类型转换，而在必要的时刻，应该采用<code>as</code>与<code>is</code>运算符清晰地表达代码的意图。</p>
<h2 id="4-用内插字符串取代string-Format"><a href="#4-用内插字符串取代string-Format" class="headerlink" title="4.用内插字符串取代string.Format()"></a>4.用内插字符串取代<code>string.Format()</code></h2><p>内插字符串用法：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;Pi = <span class="subst">&#123;Math.PI&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>好处在于：</p>
<ol>
<li>相比<code>format</code>更符合人的逻辑</li>
<li>不需要检查变量个数与顺序</li>
</ol>
<p>要注意的是，上述代码字符串内插操作会调用一个参数为<code>params</code>对象数组的格式化方法。而<code>Math.PI</code>是<code>double</code>类型，也是值类型，因此必须自动转换为<code>Object</code>。这样转换会导致装箱，为了避免装箱，下面的写法是更佳的操作：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;Pi = <span class="subst">&#123;Math.PI.ToString()&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果需要格式化数值：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;Pi = <span class="subst">&#123;Math.PI.ToString(<span class="string">&quot;F2&quot;</span>)&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果需要把返回值格式化，使用C#格式说明符如<code>:F2</code>即可：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;Pi = <span class="subst">&#123;Math.PI:F2&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果需要用三目表达式，这样会编译错误，因为会把冒号认为是格式说明符的前导字符：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;Pi = <span class="subst">&#123;round ? Math.PI.ToString() : Math.PI.ToString(<span class="string">&quot;F2&quot;</span>) &#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>改成下面这样即可，加上小括号强制让编译器将其理解为条件表达式：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;Pi = <span class="subst">&#123;(round ? Math.PI.ToString() : Math.PI.ToString(<span class="string">&quot;F2&quot;</span>))&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>





<h2 id="5-避免装箱和拆箱"><a href="#5-避免装箱和拆箱" class="headerlink" title="5.避免装箱和拆箱"></a>5.避免装箱和拆箱</h2><p>C#中值类型和引用类型的最终基类都是Object类型（它本身是一个引用类型）。</p>
<p>也就是说，值类型也可以当做引用类型来处理。而这种机制的底层处理就是通过装箱和拆箱的方式来进行，利用装箱和拆箱功能，可通过允许值类型的任何值与Object 类型的值相互转换，将值类型与引用类型链接起来 。</p>
<p>例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> val = <span class="number">100</span>; </span><br><span class="line"><span class="built_in">object</span> obj = val; </span><br><span class="line">Console.WriteLine (<span class="string">&quot;对象的值 = &#123;0&#125;&quot;</span>, obj); <span class="comment">//对象的值 = 100</span></span><br></pre></td></tr></table></figure>

<p>这是一个装箱的过程，是将 值类型 转换为 引用类型 的过程。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> val = <span class="number">100</span>; </span><br><span class="line"><span class="built_in">object</span> obj = val; </span><br><span class="line"><span class="built_in">int</span> num = (<span class="built_in">int</span>) obj; </span><br><span class="line">Console.WriteLine (<span class="string">&quot;num: &#123;0&#125;&quot;</span>, num); <span class="comment">//num: 100</span></span><br></pre></td></tr></table></figure>

<p>这是一个拆箱的过程，是将值类型转换为引用类型，再由引用类型转换为值类型的过程 。<br>注：被装过箱的对象才能被拆箱。</p>
<p>也就是说，要避免编译器把值类型转换为Object。可行的办法是手工地将值类型转为string，再传给<code>Console.WriteLine</code>。</p>
<p>换句话说，不要在本来应该使用Object的地方使用值类型的值。</p>
]]></content>
  </entry>
  <entry>
    <title>Git 初步</title>
    <url>/2018/05/17/Old-Git-introduction/</url>
    <content><![CDATA[<h3 id="Git-init"><a href="#Git-init" class="headerlink" title="Git init"></a>Git init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="Git-remote-add"><a href="#Git-remote-add" class="headerlink" title="Git remote add"></a>Git remote add</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure>

<p>如果提示已经存在，可以删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure>

<h3 id="Git-pull"><a href="#Git-pull" class="headerlink" title="Git pull"></a>Git pull</h3><p>获取最新版本并<code>merge</code>，相当于<code>git fetch</code> + <code>git merge</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<h3 id="Git-fetch"><a href="#Git-fetch" class="headerlink" title="Git fetch"></a>Git fetch</h3><p>获取最新版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin master</span><br></pre></td></tr></table></figure>

<h3 id="Git-merge"><a href="#Git-merge" class="headerlink" title="Git merge"></a>Git merge</h3><p>合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure>

<h3 id="Git-add"><a href="#Git-add" class="headerlink" title="Git add"></a>Git add</h3><p>添加所有文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure>

<p>添加某个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Git-commit"><a href="#Git-commit" class="headerlink" title="Git commit"></a>Git commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Git-push"><a href="#Git-push" class="headerlink" title="Git push"></a>Git push</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>KMP模式匹配</title>
    <url>/2018/11/09/Old-KMP-algorithm/</url>
    <content><![CDATA[<p>记录一下KMP求next和nextval数组的方法</p>
<h3 id="KMP之求next数组"><a href="#KMP之求next数组" class="headerlink" title="KMP之求next数组"></a>KMP之求next数组</h3><blockquote>
<p>举例：<br>模式串  a  b  a  a  b  c  a  c<br>next值  0  1  1  2  2  3  1  2</p>
</blockquote>
<span id="more"></span>

<p>1.　next前两位必为0，1。<br>2.　计算第三位的时候，看第二位b的next值，为1，则把b和1对应的a进行比较，不同，则第三位a的next的值为1，因为一直比到最前一位，都没有发生比较相同的现象。<br>3.　计算第四位的时候，看第三位a的next值，为1，则把a和1对应的a进行比较，相同，则第四位a的next的值为第三位a的next值加上1，为2。因为是在第三位实现了其next值对应的值与第三位的值相同。<br>4.　计算第五位的时候，看第四位a的next值，为2，则把a和2对应的b进行比较，不同，则再将b对应的next值1对应的a与第四位的a进行比较，相同，则第五位的next值为第二位b的next值加上1，为2。因为是在第二位实现了其next值对应的值与第四位的值相同。<br>5.　计算第六位的时候，看第五位b的next值，为2，则把b和2对应的b进行比较，相同，则第六位c的next值为第五位b的next值加上1，为3，因为是在第五位实现了其next值对应的值与第五位相<br>6.　计算第七位的时候，看第六位c的next值，为3，则把c和3对应的a进行比较，不同，则再把第3位a的next值1对应的a与第六位c比较，仍然不同，则第七位的next值为1。<br>7.　计算第八位的时候，看第七位a的next值，为1，则把a和1对应的a进行比较，相同，则第八位c的next值为第七位a的next值加上1，为2，因为是在第七位和实现了其next值对应的值与第七位相同。</p>
<p><strong>总结</strong>：求解next时前两位为0,1。之后的next计算要根据前一位的字符与其next值所对应的字符比较，相同则按此规则继续向前比较直至不同，取不同的那一项的next值。</p>
<h3 id="改进的KMP之求解nextval"><a href="#改进的KMP之求解nextval" class="headerlink" title="改进的KMP之求解nextval"></a>改进的KMP之求解nextval</h3><blockquote>
<p>求nextval数组值有两种方法，一种是不依赖next数组值直接用观察法求得，一种方法是根据next数组值进行推理，两种方法均可使用，视更喜欢哪种方法而定。本文主要分析nextval数组值的第二种方法。</p>
<p>例子：</p>
<p>　模式串         a b a a b c a c<br>　next值         0 1 1 2 2 3 1 2<br>　nextval值 	 0 1 0 2 1 3 0 2</p>
</blockquote>
<ol>
<li>第一位的nextval值必定为0，第二位如果与第一位相同则为0，如果不同则为1。</li>
<li>第三位的next值为1，那么将第三位和第一位进行比较，均为a，相同，则第三位的nextval值为0。</li>
<li>第四位的next值为2，那么将第四位和第二位进行比较，不同，则第四位的nextval值为其next值，为2。</li>
<li>第五位的next值为2，那么将第五位和第二位进行比较，相同，第二位的next值为1，则继续将第二位与第一位进行比较，不同，则第五位的nextval值为第二位的next值，为1。</li>
<li>第六位的next值为3，那么将第六位和第三位进行比较，不同，则第六位的nextval值为其next值，为3。</li>
<li>第七位的next值为1，那么将第七位和第一位进行比较，相同，则第七位的nextval值为0。</li>
<li>第八位的next值为2，那么将第八位和第二位进行比较，不同，则第八位的nextval值为其next值，为2。</li>
</ol>
<p><strong>总结</strong>：求解nextval时，第一位是0；模式串第二位若与第一位相同则nextval第二位取0，否则取1。对于此后的nextval[i]，将字符串的第i位与第next[i]位比较，如果相同，则继续按照这种方法向前比较直至不同，然后取不同的那个next值，如果一直比较到第一位无论相同与否都取0。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux入门</title>
    <url>/2017/12/18/Old-Linux-basics/</url>
    <content><![CDATA[<h3 id="熟悉Linux环境"><a href="#熟悉Linux环境" class="headerlink" title="熟悉Linux环境"></a>熟悉Linux环境</h3><h4 id="常用Shell命令"><a href="#常用Shell命令" class="headerlink" title="常用Shell命令"></a>常用Shell命令</h4><ul>
<li>目录操作<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir abc //创建一个目录 abc</span><br><span class="line">cd /abc //将工作目录改变到 abc</span><br><span class="line">cd //改变当前目录到主目录</span><br><span class="line">ls //列出当前目录的内容</span><br><span class="line">ls -l //输出当前目录内容的长列表，每个目录或文件占一行</span><br><span class="line">pwd //显示当前目录的全路径</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><p>文件显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat mx.c //显示 mx.c 文件内容</span><br><span class="line">more mx.c //分屏显示 mx.c 内容</span><br><span class="line">tail mx.c //显示文件后几行</span><br><span class="line">cat file1 file2 //连接 file1 和 file2</span><br><span class="line">head filename //显示文件 filename 的开始 10 行</span><br><span class="line">wc filename //统计文件 filename 中的行数、单词数和字符数</span><br><span class="line">od 文件 //查看非文本文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp file1 file2 //将文件 1 复制到文件 2</span><br><span class="line">mv file1 file2 //将文件重命名为 file2</span><br><span class="line">rm filename //删除文件 filename</span><br><span class="line">rm -i filename //请求用户确认删除</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tty //显示当前终端的路径和文件名</span><br><span class="line">who //显示当前登录用户的列表</span><br><span class="line">sort filename //显示文件 filename 中的行的排序结果</span><br><span class="line">spell filename //检查文件 filename 中的拼写错误</span><br></pre></td></tr></table></figure>
</li>
<li><p>其他实用程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date //输出系统日期和时间</span><br><span class="line">cal //显示本月的日历。cal 2002 显示 2002 年的日历</span><br><span class="line">clear //清除终端屏幕</span><br><span class="line">history //显示你以前执行过的命令的列表</span><br><span class="line">man //显示实用程序的有用信息，并提供该实用程序的基本用法</span><br><span class="line">echo //读取参数并把它写到输出</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Lua运行时热更新的实现</title>
    <url>/2020/10/27/Old-Lua-Runtime-Hotfix/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常见的Lua热更新都是在客户端下载所有Lua代码之后重启游戏，以实现重载所有数据和函数的目的。但在实际开发过程中，如果每次都要改完Lua代码重启游戏，正常人都不能接受。</p>
<p>除这种热更方式之外，其实还可以实现运行时热更，或者叫无感知热更。可以做到在玩家运行游戏的时候偷偷更新一部分代码。</p>
<span id="more"></span>

<p>很多项目会将只负责处理界面的View层Lua代码在每次调用时重新读取，以此实现不重启地更新代码。但这样依然有局限性——如果需要在数据层等其他模块修改函数，这些修改都无法生效。因为如果直接<code>require</code>，旧的数据都会丢失。</p>
<p>要实现比较合理的运行时热更新，除了设计热更的逻辑之外，前提是遵循一些约定。在规定热更新约定之前，先了解一下Lua热更新涉及的原理。</p>
<h2 id="热更新原理"><a href="#热更新原理" class="headerlink" title="热更新原理"></a>热更新原理</h2><h3 id="require机制"><a href="#require机制" class="headerlink" title="require机制"></a>require机制</h3><p>从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。</p>
<p>Lua 的模块是由变量、函数等已知元素组成的 table，因此创建一个模块很简单，就是创建一个 table，然后把需要导出的常量、函数放入其中，最后返回这个 table 就行。</p>
<p>以下为创建自定义模块 <code>exmaple.lua</code>，文件代码格式如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">exmaple = &#123;&#125;</span><br><span class="line"></span><br><span class="line">exmaple.constant = <span class="string">&quot;constant variable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exmaple.func1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;public func&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;private func&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exmaple.func3</span><span class="params">()</span></span></span><br><span class="line">    func2()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> exmaple</span><br></pre></td></tr></table></figure>

<p>在其他模块中，需要调用<code>exmaple.lua</code>模块的函数，则需要<code>require</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;exmaple&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">&quot;exmaple&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>require</code>之后，Lua的<code>package.loaded</code>中就会有<code>exmaple.lua</code>模块的数据，并且只有第一次<code>require</code>会执行<code>exmaple.lua</code>中的内容，之后再次<code>require</code>就会直接返回<code>package.loaded[&quot;exmaple&quot;]</code>。</p>
<p>这样的话，如果想要更新<code>exmaple.lua</code>的内容，就需要先清空<code>package.loaded[&quot;exmaple&quot;]</code>再<code>require</code>。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">package</span>.<span class="built_in">loaded</span>[<span class="string">&quot;example&quot;</span>] = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;example&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>似乎这样就实现了简单的热更，但这远远不够。因为清空<code>package.loaded[&quot;exmaple&quot;]</code>会导致丢失原有的数据，下面是一个简单的例子：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line">t.data = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">t.func</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(t.data)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> t</span><br></pre></td></tr></table></figure>

<p>如果按照上面的方式热更，每次<code>t.data</code>都会被重置为0，显然这不是我们想要的。</p>
<p>这种情况下，<code>t.data</code>作为函数<code>t.func</code>的<code>upvalue</code>（外部局部变量）会被重置。</p>
<h3 id="upvalue"><a href="#upvalue" class="headerlink" title="upvalue"></a>upvalue</h3><p>上面讲到的就是upvalue的例子，在游戏运行时，我们不会希望数据被覆盖或清空，应该尽量在保留原有数据的情况下替换函数的逻辑。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line">	count = count + <span class="number">1</span></span><br><span class="line">	<span class="built_in">print</span>(count)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> func</span><br></pre></td></tr></table></figure>

<p>在上面这个例子中，如果使用<code>require</code>机制热更代码，我们需要保存旧函数的<code>count</code>值。Lua中提供了获取并设置upvalue的方法<code>debug.getupvalue</code>和<code>debug.setupvalue</code>。</p>
<p>遍历一个函数的所有upvalue并设置upvalue：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> oldfunc = <span class="built_in">require</span> <span class="string">&quot;example&quot;</span></span><br><span class="line"><span class="built_in">package</span>.<span class="built_in">loaded</span>[<span class="string">&quot;example&quot;</span>] = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">local</span> newfunc = <span class="built_in">require</span> <span class="string">&quot;example&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">math</span>.<span class="built_in">huge</span> <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> name, value = <span class="built_in">debug</span>.<span class="built_in">getupvalue</span>(oldfunc, i)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">	<span class="built_in">debug</span>.<span class="built_in">setupvalue</span>(newfunc, i, value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>要注意的是，函数同样可以作为upvalue，而我们希望使用新的函数、旧的数据。所以在遍历upvalue的时候需要判断是否为函数，如果是则要用新的覆盖。</p>
<h3 id="全局语句"><a href="#全局语句" class="headerlink" title="全局语句"></a>全局语句</h3><p>在<code>require</code>一个模块时，会重新执行其中的全局语句，这会破坏已有的代码逻辑。解决办法有两种，都比较复杂。一种是语法分析，将全局语句变成<code>local i = &#123;&#125;</code>这种，保留住这个变量，然后把旧的数据复制过来；另一种是使用临时环境表执行新模块，执行完切换成旧模块使用的环境表。</p>
<p>这两种方法都比较麻烦，一般需要热更的主要都是各个系统的数据层，这些数据层基本不会包含全局语句的修改，所以我们可以忽略这种情况，只进行数据层的热更新。在多数情况下可以满足需求。</p>
<h2 id="热更新的约定"><a href="#热更新的约定" class="headerlink" title="热更新的约定"></a>热更新的约定</h2><p>了解了上面的原理之后，我们要想实现简单的Lua运行时热更新，需要满足以下的约定。</p>
<ol>
<li>不破坏原有数据</li>
</ol>
<p>游戏运行时许多Lua系统中都保存了服务器发来的数据，或者是计算产生的一些数据，我们不希望这些数据被清空或改变。热更新的基础就是更新服务的逻辑，通常只是逻辑发生变化，但原有的值并不能被改变。</p>
<ol start="2">
<li>不为热更多写代码</li>
</ol>
<p>程序员都比较懒，如果热更需要现在原有的逻辑中加入热更前后进行的操作的话，没人能接受。就像为了热更C#而改变原有的代码结构，应该尽量避免额外的负担。</p>
<ol start="3">
<li>只修改逻辑，而非增加</li>
</ol>
<p>一般来说需要运行时热更的都是改动比较小的更新或者修复一些bug，这种情况下只要修改函数就可以达到目的，而没有必要新增函数。而且，新增的函数如果使用了upvalue，新增之后没法给它赋值，因为在旧的模块中不存在这个upvalue。</p>
<ol start="4">
<li>可以热更嵌套结构中的函数</li>
</ol>
<p>比如table中的函数、table的metatable中的函数等。</p>
<ol start="5">
<li>不改变所有数据和函数的命名</li>
</ol>
<p>显然，如果改变命名，那谁知道要更新啥呢~</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>下面简单介绍实现思路。</p>
<h3 id="热更模块"><a href="#热更模块" class="headerlink" title="热更模块"></a>热更模块</h3><p>一般来说需要热更的话，是你修改了某个<code>XXXModel.lua</code>文件，这个文件在<code>package.loaded</code>中名为<code>XXXSystem.XXXModel</code>。其中<code>XXXSystem</code>是这个Lua模块存放的文件夹名称。</p>
<p>热更之前要先保存旧模块的全部数据：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> oldModule</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">package</span>.<span class="built_in">loaded</span>[packageName] <span class="keyword">then</span></span><br><span class="line">    oldModule = <span class="built_in">package</span>.<span class="built_in">loaded</span>[packageName]</span><br><span class="line">    <span class="built_in">package</span>.<span class="built_in">loaded</span>[packageName] = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>之后直接<code>require</code>新的模块，然后把新模块记录下来，遍历新模块的所有数据。总体来说，遍历的过程中，元素如果是table就保留就模块的，如果是function就用新模块的。</p>
<p>当然要注意，table会嵌套table和function，因此这是一个递归的过程。</p>
<p>还有，function要用新的，但是function的的upvalue要用旧的。</p>
<p>table中的metatable同样作为table处理，使用<code>debug.getmetatable</code>获取一个table的metatable然后进行与table一样的操作。</p>
<p>对于可能出现循环引用的情况，可以在更新表的时候记录已更新的table，避免重复处理死循环。</p>
<h3 id="监听模块"><a href="#监听模块" class="headerlink" title="监听模块"></a>监听模块</h3><p>热更可以用在编辑器下，同样可以在线上环境使用（当然要有更严格的限制）。在编辑器下热更的话，要监听本地lua文件的变化，</p>
<p>Unity编辑器中可以使用<code>FileSystemWatcher</code>来实现监听，可以把这个功能封装到一个<code>DirectoryWatcher</code>类里，方便监听指定的多个文件夹。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Directory.Exists(dirPath)) </span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">var</span> watcher = <span class="keyword">new</span> FileSystemWatcher();</span><br><span class="line">watcher.IncludeSubdirectories = <span class="literal">true</span>;</span><br><span class="line">watcher.Path = dirPath;</span><br><span class="line">watcher.NotifyFilter = NotifyFilters.LastWrite;</span><br><span class="line">watcher.Filter = <span class="string">&quot;*.lua&quot;</span>;</span><br><span class="line">watcher.Changed += handler;</span><br><span class="line">watcher.EnableRaisingEvents = <span class="literal">true</span>;</span><br><span class="line">watcher.InternalBufferSize = <span class="number">10240</span>;</span><br></pre></td></tr></table></figure>

<p>编辑器下游戏启动时创建<code>DirectoryWatcher</code>监听指定文件夹，并写处理函数<code>LuaFileOnChanged</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> luaDirWatcher = <span class="keyword">new</span> DirectoryWatcher(LuaConst.luaDir, <span class="keyword">new</span> FileSystemEventHandler(LuaFileOnChanged));<span class="comment">//监听lua文件</span></span><br></pre></td></tr></table></figure>

<p>触发<code>LuaFileOnChanged</code>的时候调用对应的Lua方法重载该文件模块即可。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是Lua热更的简单实现，应用于生产环境的话还不是很完善，需要考虑更多的情况，这里就不赘述了。但用在开发时，这个功能还是很有用的。</p>
]]></content>
  </entry>
  <entry>
    <title>Lua实现print调用Unity输出日志</title>
    <url>/2020/11/12/Old-Lua-print-Output-to-Unity/</url>
    <content><![CDATA[<p>在 tolua 和 xlua 中，调用 print 会直接在 Unity 控制台输出日志。而实际上 Lua 的源码中 print 只是输出日志，想要传递到 C# 需要额外做一些操作。</p>
<span id="more"></span>

<p>tolua的源码中，ToLua.cs文件里的构造函数和OpenLibs函数：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">L = LuaNewState();   </span><br><span class="line">ToLua.OpenLibs(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenLibs</span>(<span class="params">IntPtr L</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    LuaDLL.tolua_pushcfunction(L, Print);</span><br><span class="line">    LuaDLL.lua_setglobal(L, <span class="string">&quot;print&quot;</span>);</span><br><span class="line">	<span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一开始构造函数中核心代码是两句，首先初始化lua状态机，然后打开lua标准库，将库中的函数放入全局变量。</p>
<p>lua标准库中是package、table、string、math等lua源码自带的函数，这些代码的加载在lua源码中的<code>linit.c</code>文件里：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> luaL_Reg lualibs[] = &#123;</span><br><span class="line">  &#123;<span class="string">&quot;&quot;</span>, luaopen_base&#125;,</span><br><span class="line">  &#123;LUA_LOADLIBNAME, luaopen_package&#125;,</span><br><span class="line">  &#123;LUA_TABLIBNAME, luaopen_table&#125;,</span><br><span class="line">  &#123;LUA_IOLIBNAME, luaopen_io&#125;,</span><br><span class="line">  &#123;LUA_OSLIBNAME, luaopen_os&#125;,</span><br><span class="line">  &#123;LUA_STRLIBNAME, luaopen_string&#125;,</span><br><span class="line">  &#123;LUA_MATHLIBNAME, luaopen_math&#125;,</span><br><span class="line">  &#123;LUA_DBLIBNAME, luaopen_debug&#125;,</span><br><span class="line">  &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LUALIB_API <span class="type">void</span> <span class="title function_">luaL_openlibs</span> <span class="params">(lua_State *L)</span> &#123;</span><br><span class="line">  <span class="type">const</span> luaL_Reg *lib = lualibs;</span><br><span class="line">  <span class="keyword">for</span> (; lib-&gt;func; lib++) &#123;</span><br><span class="line">    lua_pushcfunction(L, lib-&gt;func);</span><br><span class="line">    lua_pushstring(L, lib-&gt;name);</span><br><span class="line">    lua_call(L, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LuaDLL.cs就是通过调用lua源码中的 <code>luaL_openlibs</code> 函数打开标准库。</p>
<p>接着 <code>LuaDLL.tolua_pushcfunction</code> 将 C# 的 Print 函数压入栈顶，lua源码中的<code>lua_pushcfunction</code>是一个宏函数，不能直接通过dll调用，在LuaDll中是通过DLLImport导入这个函数然后封装实现调用的：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DllImport( LUADLL, CallingConvention = CallingConvention.Cdecl )</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">lua_pushcclosure</span>(<span class="params"> IntPtr L, LuaCSFunction f, <span class="built_in">int</span> n </span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lua_pushcfunction</span>(<span class="params"> IntPtr L, LuaCSFunction f </span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	lua_pushcclosure( L, f, <span class="number">0</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LuaCSFuncton是一个参数为Intptr，返回值为int的委托。</p>
<p>tolua在 C# 层另外实现了一个 Print 方法，并且通过 <code>lua_setglobal</code> 把 lua 层的全局函数 print 替换掉：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Print</span>(<span class="params">IntPtr L</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> n = LuaDLL.lua_gettop(L);   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (CString.Block())</span><br><span class="line">        &#123;</span><br><span class="line">            CString sb = CString.Alloc(<span class="number">256</span>);</span><br><span class="line">            <span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">                <span class="built_in">int</span> line = LuaDLL.tolua_where(L, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">string</span> filename = LuaDLL.lua_tostring(L, <span class="number">-1</span>);</span><br><span class="line">            LuaDLL.lua_settop(L, n);</span><br><span class="line">            <span class="built_in">int</span> offset = filename[<span class="number">0</span>] == <span class="string">&#x27;@&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!filename.Contains(<span class="string">&quot;.&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                sb.Append(<span class="string">&#x27;[&#x27;</span>).Append(filename, offset, filename.Length - offset).Append(<span class="string">&quot;.lua:&quot;</span>).Append(line).Append(<span class="string">&quot;]:&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sb.Append(<span class="string">&#x27;[&#x27;</span>).Append(filename, offset, filename.Length - offset).Append(<span class="string">&#x27;:&#x27;</span>).Append(line).Append(<span class="string">&quot;]:&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">1</span>) sb.Append(<span class="string">&quot;    &quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (LuaDLL.lua_isstring(L, i) == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        sb.Append(LuaDLL.lua_tostring(L, i));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (LuaDLL.lua_isnil(L, i))</span><br><span class="line">                    &#123;</span><br><span class="line">                        sb.Append(<span class="string">&quot;nil&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (LuaDLL.lua_isboolean(L, i))</span><br><span class="line">                    &#123;</span><br><span class="line">                        sb.Append(LuaDLL.lua_toboolean(L, i) ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        IntPtr p = LuaDLL.lua_topointer(L, i);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (p == IntPtr.Zero)</span><br><span class="line">                        &#123;</span><br><span class="line">                            sb.Append(<span class="string">&quot;nil&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            sb.Append(LuaDLL.luaL_typename(L, i)).Append(<span class="string">&quot;:0x&quot;</span>).Append(p.ToString(<span class="string">&quot;X&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            Debugger.Log(sb.ToString());            <span class="comment">//203行与_line一致</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> LuaDLL.toluaL_exception(L, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>LuaJIT在各平台的编译方法</title>
    <url>/2021/01/05/Old-LuaJIT-Compile/</url>
    <content><![CDATA[<p>LuaJIT 可以将 lua 代码编译为字节码然后解释执行，增加反编译的难度。</p>
<p>通过对 LuaJIT 引擎的源码进行定制，将其生成的 LuaJIT 字节码的 opcode 随机化地打乱、增加干扰的opcode、文件格式变换。这样反编译的难度会进一步提高。下面记录一下编译 LuaJIT 的过程。</p>
<span id="more"></span>

<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h4 id="32"><a href="#32" class="headerlink" title="32"></a>32</h4><p>打开x86 Native Tools Command Prompt for VS 2019控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:</span><br><span class="line"><span class="built_in">cd</span> D:\tolua_runtime\LuaJIT-2.1.0-beta3\src</span><br><span class="line">msvcbuild</span><br></pre></td></tr></table></figure>

<p>拷贝src目录下的lua51.dll和luajit.exe</p>
<h4 id="64"><a href="#64" class="headerlink" title="64"></a>64</h4><p>打开x64 Native Tools Command Prompt for VS 2019控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:</span><br><span class="line"><span class="built_in">cd</span> D:\tolua_runtime\LuaJIT-2.1.0-beta3\src</span><br><span class="line">msvcbuild</span><br></pre></td></tr></table></figure>

<p>拷贝src目录下的lua51.dll和luajit.exe</p>
<h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><h4 id="32-1"><a href="#32-1" class="headerlink" title="32"></a>32</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> LuaJIT-2.1.0-beta3</span><br><span class="line">make clean &amp;&amp; make &amp;&amp; <span class="built_in">cp</span> src/luajit ../luajit-32 &amp;&amp; make clean</span><br></pre></td></tr></table></figure>

<p>拷贝LuaJIT-2.1.0-beta3目录下的luajit-32</p>
<h4 id="64-1"><a href="#64-1" class="headerlink" title="64"></a>64</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> LuaJIT-2.1.0-beta3</span><br><span class="line">make clean &amp;&amp; make CFLAGS=-DLUAJIT_ENABLE_GC64 &amp;&amp; <span class="built_in">cp</span> src/luajit ../luajit-64 &amp;&amp; make clean</span><br></pre></td></tr></table></figure>

<p>拷贝LuaJIT-2.1.0-beta3目录下的luajit-64</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. <span class="built_in">cd</span>进入到luajit.exe的目录下</span><br><span class="line">2. 然后生成字节码： luajit.exe -b a.lua a.bc</span><br><span class="line">3. 运行生成的字节码： luajit.exe a.bc</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>NGUI图集与Drawcall</title>
    <url>/2019/10/16/Old-NGUI-atlas-and-drawcall/</url>
    <content><![CDATA[<p>Unity中常用的界面是NGUI和UGUI，他们都用来创建界面，而NGUI学习成本更低。</p>
<p>在Unity渲染界面的时候，总体上会根据层级自下向上地渲染。其中，UIPanel的优先级最高，我们可以认为Unity首先会按照UIPanel的层级把prefab排序，而子物体们则会在UIPanel的层级上再根据层级排序。另外，即使一个UIPanel挂在另一个UIPanel的下面，也属于不同的层级。</p>
<p>然后由于有这样的渲染顺序，所以我们需要合理安排各个组件的层级，让使用相同美术素材的组件在接近的层级上，不同美术素材的组件尽量远一些。</p>
<span id="more"></span>

<p>举个栗子，假设我们有四个组件A、B、C、D层级分别是1、2、3、4，然后他们用的美术素材分别是E、F、E、F，那么在渲染的时候就会自底向上把A、B两个美术素材各渲染2遍，Drallcall也就是渲染次数等于4。为什么Unity这么蠢，不能自动地寻找相同美术素材的组件然后一起渲染呢？没办法，这只能靠我们自己来优化。所以我们应该把这四个组件的顺序调整成A、C、B、D，这样AC和BD就会分别一起渲染。</p>
<h2 id="NGUI图集"><a href="#NGUI图集" class="headerlink" title="NGUI图集"></a>NGUI图集</h2><p>在Unity中我们会经常用到很多美术元素，可能有几百上千个，而同一个元素会在不同地方被多次调用，这样的话Dracall会很容易变得很高，如果我们能够让同一个界面上的美术元素都合成一张图，总体只渲染一次，那不就很完美吗？所以NGUI和UGUI都使用图集来管理图片素材。他们的思路都是把经常复用的元素放到一张图集上面。</p>
<h2 id="UISprite"><a href="#UISprite" class="headerlink" title="UISprite"></a>UISprite</h2><p>NGUI引入图集的概念，不考虑ABA叠层的情况下，一个图集内的图片用UISprite，那么它就是一个DrawCall。但是如果你做了一个图集是1024X1024的。此时你的界面上只用了图集中的一张很小的图，那么很抱歉1024X1024这张大图都需要载入你的内存里面，1024就是4M的内存，如果你做了10个1024的图集，你的界面上刚好都只用了每个图集里面的一张小图，那么再次抱歉你的内存直接飙40M。</p>
<h2 id="UITexture"><a href="#UITexture" class="headerlink" title="UITexture"></a>UITexture</h2><p>它完全没有图集的概念，使用起来非常的灵活，只需要把图片挂上去就行了。这样内存里只会占用你这一张图的大小，内存虽然小了但是DrawCall就上去了。因为每一张UITexture就是一次DrawCall。如果你发现你的UITexture图片大小不对了，是因为图片拖进Unity默认图片的格式会设置成Texture，它的NonPower of2 是默认打开的，所以他会缩放你的图片成2的幂次方，所以你可以把图片格式改成GUI。</p>
<h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>NGUI生成的图集的图片格式是PNG，但是无论是什么格式的图片，Unity都会自己搞一套格式，并且打包的时候也不会用你文件夹下图片的格式，而是Unity自己的格式。如果你用UITexture你可以真对每一张图来修改它的格式，比如一些颜色数比较少的图片，你可以直接用16bit，如果你的图片没有用到透明，你可以用pvr或者etc，这样你的图片会更小。可是UISprite就不行，只要其中有一张小图用了透明，你就得用RGBA32，不然UI就会很难看，你可以自己试试。</p>
<p>除了UITexture 和 Atlas的图片没办法以外（因为必须有透明），不是建议是必须，你的贴图无论如何都必须是2的幂次方。因为只有2的幂次方图片 并且没有透明通道才会被压缩，IOS会压缩成pvr格式，Android会压缩成ETC格式，压缩以后图片会小很多的，好几倍的小。 </p>
]]></content>
  </entry>
  <entry>
    <title>NGUI屏幕适配原理与计算</title>
    <url>/2019/11/17/Old-NGUI-screen-resolution-compute/</url>
    <content><![CDATA[<p>NGUI中的屏幕尺寸是设计者决定的，那么在不同的手机或者电脑下是怎么适配的呢？研究了半天，下面记录一下研究的结果。</p>
<span id="more"></span>

<h2 id="设计尺寸"><a href="#设计尺寸" class="headerlink" title="设计尺寸"></a>设计尺寸</h2><p>设计尺寸是NGUI中UI Root上设置的宽和高，一般会设置Scaling Style为Constrained On Mobiles，这样在手机上运行的时候会根据手机实际的尺寸以及宽高比进行适配。下面的Content Width和Height就是设计尺寸的宽和高，本文以1366 * 768为例。</p>
<h2 id="宽高比"><a href="#宽高比" class="headerlink" title="宽高比"></a>宽高比</h2><p>宽高比就是宽比高,1366&#x2F;768也就是<strong>1.7786</strong>，而手机的分辨率各种各样，宽高比各不相同，在适配之前都需要计算一下宽高比，以此来确定适配方式。</p>
<h2 id="适配原理"><a href="#适配原理" class="headerlink" title="适配原理"></a>适配原理</h2><p>设计的尺寸是1366 * 768，接近16:9的宽高比，那么假如说手机是1920 * 1080的分辨率，该怎么显示游戏画面呢？</p>
<p>很显然1366 * 768是比1920 * 1080小的，总不可能把1366 * 768的游戏画面按照实际分辨率显示在手机上，那也太丑了。</p>
<p>我们先计算1920 * 1080的宽高比，算出来是1.7778，正好等于16:9，比1366 * 768的宽高比略小，也就是<strong>相对来说</strong>，1920 * 1080的宽没有1366 * 768的宽那么长。</p>
<p>这种情况下我们可以同比把设计尺寸（1366 * 768）放大，放大到高度为1080，这时设计尺寸就变成了1920.938 * 1080，恰好比手机的1920 * 1080多了不到一像素，这时就可以认为是适配结束了。</p>
<p>再换个例子，假设手机分辨率为2340 * 1080，宽高比为2.1667，明显大于1.7786，这时要把设计尺寸的1366 * 768同比放大到宽度为2340，结果就是设计尺寸变成了2340 * 1315.6，这样放大之后会牺牲上下一百多像素的内容，不过游戏中边界的元素都是使用锚点控制位置的，所以不用担心看不到按钮之类的。</p>
<h2 id="计算步骤"><a href="#计算步骤" class="headerlink" title="计算步骤"></a>计算步骤</h2><p>总结一下适配计算的步骤</p>
<ol>
<li>计算宽高比ratio</li>
<li>将ratio与设计尺寸的宽高比进行比较<ol>
<li>大于则按照宽适配（即缩放设计尺寸直到宽与手机分辨率的宽相同）</li>
<li>小于则按照高适配（即缩放设计尺寸直到高与手机分辨率的高相同）</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>NGUI Prefab Toolbar缩略图生成</title>
    <url>/2020/06/01/Old-NGUI-thumbnail/</url>
    <content><![CDATA[<p>NGUI的Prefab Toolbar可以放一些prefab模板，但是在新版Unity上无法显示缩略图，因此写了个工具为选中的NGUI prefab生成缩略图。</p>
<span id="more"></span>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UISnapshot</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> screenWidth = (<span class="built_in">int</span>)NGUITools.screenSize.x;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> screenHeight = (<span class="built_in">int</span>)NGUITools.screenSize.y;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Generate a snapshot for choosed ngui gameobject</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;GameObject/Generate Snapshot&quot;</span>, priority = 0)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GenerateSnapshot</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1.摄像机拍整个画面</span></span><br><span class="line">        <span class="comment">//2.截取指定的UI部分</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;Generating snapshot...&quot;</span>);</span><br><span class="line">        GameObject go = Selection.activeObject <span class="keyword">as</span> GameObject;</span><br><span class="line">        <span class="keyword">if</span> (go == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Please choose one prefab!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UIRoot uiroot = GameObject.FindObjectOfType&lt;UIRoot&gt;();</span><br><span class="line">        GameObject root = uiroot.gameObject;</span><br><span class="line">        Camera camera = root.transform.Find(<span class="string">&quot;Camera&quot;</span>).GetComponent&lt;Camera&gt;();</span><br><span class="line">        </span><br><span class="line">        Rect rect = NGUIObjectToRect(go);</span><br><span class="line">        Texture2D t2d = GetTex(camera, rect);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> path = <span class="string">&quot;Assets/NGUI/Editor/Preview/&quot;</span> + go.name + <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (Save2Png(t2d, path))</span><br><span class="line">            &#123;</span><br><span class="line">                UISnapshotPoint sp = go.GetComponent&lt;UISnapshotPoint&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!sp)</span><br><span class="line">                &#123;</span><br><span class="line">                    sp = go.AddComponent&lt;UISnapshotPoint&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                sp.thumbnail = t2d;</span><br><span class="line">                Debug.Log(<span class="string">&quot;Generating snapshot success!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;Error occured during generating snapshot.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算NGUI在屏幕中的矩形位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Rect <span class="title">NGUIObjectToRect</span>(<span class="params">GameObject go</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Camera camera = NGUITools.FindCameraForLayer(go.layer);</span><br><span class="line">        Bounds bounds = NGUIMath.CalculateAbsoluteWidgetBounds(go.transform);</span><br><span class="line">        Vector3 min = camera.WorldToScreenPoint(bounds.min);</span><br><span class="line">        Vector3 max = camera.WorldToScreenPoint(bounds.max);</span><br><span class="line">        <span class="comment">//return new Rect(min.x, min.y, (max.x - min.x), (max.y - min.y));</span></span><br><span class="line">        <span class="comment">//readpixels从左上角开始计算</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rect(min.x, (screenHeight - max.y), (max.x - min.x), (max.y - min.y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Texture2D <span class="title">GetTex</span>(<span class="params">Camera camera, Rect rect</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个RenderTexture对象</span></span><br><span class="line">        RenderTexture rt = <span class="keyword">new</span> RenderTexture(screenWidth, screenHeight, <span class="number">-1</span>);</span><br><span class="line">        camera.targetTexture = rt;</span><br><span class="line">        camera.Render();</span><br><span class="line">        <span class="comment">// 激活这个rt 并从中读取像素</span></span><br><span class="line">        RenderTexture.active = rt;</span><br><span class="line">        Texture2D screenShot = <span class="keyword">new</span> Texture2D((<span class="built_in">int</span>)rect.width, (<span class="built_in">int</span>)rect.height, TextureFormat.RGB24, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 从RenderTexture.active中读取像素</span></span><br><span class="line">        screenShot.ReadPixels(rect, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        screenShot.Apply();</span><br><span class="line">        <span class="comment">// 重置参数</span></span><br><span class="line">        camera.targetTexture = <span class="literal">null</span>;</span><br><span class="line">        RenderTexture.active = <span class="literal">null</span>;</span><br><span class="line">        GameObject.DestroyImmediate(rt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> screenShot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Save2Png</span>(<span class="params">Texture2D t2d, <span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = t2d.EncodeToPNG();</span><br><span class="line">        System.IO.File.WriteAllBytes(path, bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这样就可以点击菜单为prefab生成缩略图了，不过要让NGUI显示出来需要把UISnapshotPointEditor中的OnEnable函数改成以下内容，让NGUI默认使用手动截取的缩略图。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">	mType = Type.Manual;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Nginx的进程与并发分析</title>
    <url>/2017/12/27/Old-Nginx-processes/</url>
    <content><![CDATA[<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>Linux操作系统作业，要求阅读一个中型程序源码，如Apache、Nginx等，写一份阅读报告，给出其运行机制，及运行机制对应关键代码。</p>
<p>需要给出一定细节：配置参数的对运行的影响，相应的源码位置等。</p>
<p>作业提交包括：一份报告。</p>
<span id="more"></span>

<h4 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h4><h5 id="Nginx的工作模式"><a href="#Nginx的工作模式" class="headerlink" title="Nginx的工作模式"></a>Nginx的工作模式</h5><p>Single模式，Master-Worker模式</p>
<h5 id="Single模式"><a href="#Single模式" class="headerlink" title="Single模式"></a>Single模式</h5><p>只有一个工作进程，不适合生产环境</p>
<h5 id="Master-Worker模式"><a href="#Master-Worker模式" class="headerlink" title="Master-Worker模式"></a>Master-Worker模式</h5><p>Nginx通常工作在Master-Worker模式下，Master与Worker都是单线程的进程，用户可以通过增加Worker进程的数目提高多核CPU的利用率。同时，这个模型每个进程仅有一个线程，因此多线程时需要考虑数据的保护问题。</p>
<p>此外，一个master进程管理站个或者多个worker进程，基本的事件处理都是放在worker中，master负责一些全局初始化，以及对worker的管理。</p>
<p><img src="https://ae01.alicdn.com/kf/Hda3510685aff4764bb0ad5ee3d1e2017W.png" alt="Hda3510685aff4764bb0ad5ee3d1e2017W"></p>
<p><strong>Master 进程</strong></p>
<p>NGINX的master进程，负责解析配置文件，并启动其他角色的进程，如启动worker，cache manager。</p>
<p>启动完成其他进程之后，master进程仅起监视作用（相当与monitor角色），后面用户可以通过singaller角色的nginx向master发命令， master再通知它创建起来的其他进程。</p>
<p><strong>Worker 进程</strong></p>
<p>worker进程是实际服务客户的进程。包括接受新连接（accept），相应连接上的消息（read&#x2F;write）.</p>
<p><strong>Singaller 进程</strong></p>
<p>singaller进程仅仅是一个向master进程发送信号的工具进程。 通过向master发生特定消息，能够让： * master&#x2F;worker完成当前服务后，正常退出。 * master进程重新加载配置文件，或者重启worker。 * 重新打开log 文件。</p>
<p><strong>Cache manager</strong></p>
<p>可以做 HTTP、文件缓存，即对同一个静态文件的请求进行缓存。</p>
]]></content>
  </entry>
  <entry>
    <title>Nginx反向代理与缓存配置</title>
    <url>/2020/06/01/Old-Nginx-reverse-proxy/</url>
    <content><![CDATA[<p>有时候需要用Nginx在内网部署反向代理给内网的程序访问外网内容，并设置一定时间的缓存，记录一下。</p>
<span id="more"></span>



<h2 id="http缓存配置"><a href="#http缓存配置" class="headerlink" title="http缓存配置"></a>http缓存配置</h2><p>一般Nginx的http和server是分开配置的，所以先在http的配置中添加缓存路径</p>
<p>也就是添加<strong>cache path</strong>，放在http中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=cache_one:20m max_size=1g;</span><br></pre></td></tr></table></figure>



<h2 id="server配置"><a href="#server配置" class="headerlink" title="server配置"></a>server配置</h2><p>也就是<strong>vhost配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    </span><br><span class="line">    server_name www.another.net;</span><br><span class="line">    </span><br><span class="line">    index index.html;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://www.source.com/;</span><br><span class="line">        proxy_cache cache_one;</span><br><span class="line">        proxy_cache_valid 200 302 24h;</span><br><span class="line">        proxy_cache_valid 404 1m;</span><br><span class="line">        proxy_cache_valid any 5m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般200或者302都是正常的，所以可以缓存24小时，如果经常变化可以设置短一点，404的话只缓存一分钟。</p>
<p><strong>重载配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload </span><br></pre></td></tr></table></figure>

<p>这样就可以在本地服务器通过访问 <a href="http://www.another.net/">http://www.another.net</a> 来代理 <a href="https://www.source.com/">https://www.source.com</a> 了</p>
<h2 id="本地SSL证书配置"><a href="#本地SSL证书配置" class="headerlink" title="本地SSL证书配置"></a>本地SSL证书配置</h2><p>如果需要本地通过https访问的话需要配置一个本地SSL证书，服务器需要安装openssl环境。</p>
<p><strong>SSL证书生成</strong></p>
<p>生成秘钥key,运行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out server.key 2048</span><br></pre></td></tr></table></figure>

<p>会有两次要求输入密码,输入同一个即可</p>
<p>输入密码</p>
<p>然后你就获得了一个server.key文件.</p>
<p>以后使用此文件(通过openssl提供的命令或API)可能经常回要求输入密码,如果想去除输入密码的步骤可以使用以下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rsa -in server.key -out server.key</span><br></pre></td></tr></table></figure>

<p>创建服务器证书的申请文件server.csr,运行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure>

<p>其中Country Name填CN,Common Name填主机名也可以不填,如果不填浏览器会认为不安全.(例如你以后的url为<a href="https://abcd/xxxx%E2%80%A6.%E8%BF%99%E9%87%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%A1%ABabcd),%E5%85%B6%E4%BB%96%E7%9A%84%E9%83%BD%E5%8F%AF%E4%BB%A5%E4%B8%8D%E5%A1%AB">https://abcd/xxxx….这里就可以填abcd),其他的都可以不填</a>.</p>
<p>创建CA证书:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -new -x509 -key server.key -out ca.crt -days 3650</span><br></pre></td></tr></table></figure>

<p>此时,你可以得到一个ca.crt的证书,这个证书用来给自己的证书签名.</p>
<p>创建自当前日期起有效期为期十年的服务器证书server.crt：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -in server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt</span><br></pre></td></tr></table></figure>

<p>ls你的文件夹,可以看到一共生成了5个文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">**ca.crt**  **ca.srl**   **server.crt  server.csr**  **server.key**</span><br></pre></td></tr></table></figure>

<p>其中，server.crt和server.key就是Nginx需要的证书文件。</p>
<p><strong>最后Nginx配置修改如下</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    </span><br><span class="line">    server_name www.another.net;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate /etc/nginx/server.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/server.key;</span><br><span class="line">    </span><br><span class="line">    index index.html;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://www.source.com/;</span><br><span class="line">        proxy_cache cache_one;</span><br><span class="line">        proxy_cache_valid 200 302 24h;</span><br><span class="line">        proxy_cache_valid 404 1m;</span><br><span class="line">        proxy_cache_valid any 5m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重载配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload </span><br></pre></td></tr></table></figure>

<p>这样就可以访问 <a href="https://www.another.net/">https://www.another.net</a> 了。</p>
]]></content>
  </entry>
  <entry>
    <title>QT使用EasyPR识别车牌的正确方式</title>
    <url>/2018/07/17/Old-QT-and-EasyPr/</url>
    <content><![CDATA[<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>QT5.3.0 with MinGW</li>
<li>opencv3.0+</li>
</ul>
<h2 id="opencv配置"><a href="#opencv配置" class="headerlink" title="opencv配置"></a>opencv配置</h2><p>MinGW 编译好的 opencv 3.2.0 </p>
<ul>
<li>解压opencv文件夹到C盘根目录</li>
<li>添加<strong>系统环境变量</strong>如下两项到<strong>Path</strong>：<ul>
<li>C:\opencv\build\install\x86\mingw\bin</li>
<li>C:\opencv\build\install\x86\mingw\lib</li>
</ul>
</li>
<li>检查<strong>QT5.3.0</strong>自带的<strong>MinGW</strong>是否在<strong>环境变量</strong>中(没有则添加)：<ul>
<li>C:\Qt\Qt5.3.0\5.3\mingw482_32\bin</li>
<li>C:\Qt\Qt5.3.0\Tools\mingw482_32\bin</li>
<li>C:\Qt\Qt5.3.0\Tools\mingw482_32\i686-w64-mingw32\bin</li>
</ul>
</li>
<li>配置好重启QT！！！</li>
</ul>
<span id="more"></span>

<h2 id="EasyPR配置"><a href="#EasyPR配置" class="headerlink" title="EasyPR配置"></a>EasyPR配置</h2><ul>
<li><p>创建一个新的QT界面项目，命名不要是easypr，路径不要有中文</p>
</li>
<li><p>easypr精简版 (因为easypr里面有很多东西没用到，所以精简一下只需要2mb不到)</p>
</li>
<li><p>解压压缩包中所有文件到项目根目录</p>
</li>
<li><p>如下所示添加easypr文件到项目</p>
</li>
</ul>
<p><img src="https://ae01.alicdn.com/kf/H1b7ed3e77b014538ba4f6231f7cca449G.png" alt="H1b7ed3e77b014538ba4f6231f7cca449G"></p>
<p><img src="https://ae01.alicdn.com/kf/H622998a9f72d400993279cc8a1b4bdb1N.png" alt="H622998a9f72d400993279cc8a1b4bdb1N"></p>
<ul>
<li><p>.pro文件配置<br>.pro中最上面加上以下内容，因为easypr需要c++11标准编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QMAKE_CXXFLAGS+=-std=c++11</span><br><span class="line">CONFIG += c++11</span><br></pre></td></tr></table></figure>
<p>.pro文件最下面添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INCLUDEPATH+=E:\QT\PlateR\include</span><br><span class="line"></span><br><span class="line">win32&#123;</span><br><span class="line">INCLUDEPATH+=C:\opencv\build\install\include</span><br><span class="line">LIBS += C:\opencv\build\install\x86\mingw\bin\libopencv_*.dll</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：<code>INCLUDEPATH+=E:\QT\PlateR\include</code>这条按照你的项目路径来</p>
</li>
<li><p>配置config.h</p>
</li>
</ul>
<p>在项目里找到include&#x2F;easypr&#x2F;下的config.h，打开来看到以下内容，在30行左右</p>
<p><img src="https://ae01.alicdn.com/kf/H9d4fcde8faea4247862f67de47dcdbd3l.png" alt="H9d4fcde8faea4247862f67de47dcdbd3l"></p>
<p>按照我的格式把路径改成你项目的路径，格式千万不能错</p>
<h2 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h2><p>main.cpp示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dialog.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/easypr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/easypr/util/switch.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/easypr/core/plate.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> easypr;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Dialog w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    CPlateRecognize pr;</span><br><span class="line">    pr.<span class="built_in">setDetectType</span>(PR_DETECT_CMSER|PR_DETECT_COLOR);</span><br><span class="line">    vector&lt;CPlate&gt;plateVec;</span><br><span class="line">    cv::Mat image;</span><br><span class="line">    image = cv::<span class="built_in">imread</span>(<span class="string">&quot;E://test.jpg&quot;</span>);</span><br><span class="line">    pr.<span class="built_in">setResultShow</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> result = pr.<span class="built_in">plateRecognize</span>(image,plateVec);</span><br><span class="line">	pr.<span class="built_in">getDetectShow</span>();</span><br><span class="line">	CPlate plate = plateVec.<span class="built_in">at</span>(<span class="number">0</span>);</span><br><span class="line">	string license = plate.<span class="built_in">getPlateStr</span>();</span><br><span class="line">	QString lice1 = QString::<span class="built_in">fromLocal8Bit</span>(license.<span class="built_in">c_str</span>());</span><br><span class="line">	<span class="built_in">qDebug</span>()&lt;&lt;lice1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(image.<span class="built_in">empty</span>())</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	cv::<span class="built_in">namedWindow</span>(<span class="string">&quot;image show&quot;</span>);</span><br><span class="line">	cv::<span class="built_in">imshow</span>(<span class="string">&quot;image show&quot;</span>,image);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以运行了，正常的话控制台会输出车牌号码</p>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h4 id="找不到opencv头文件"><a href="#找不到opencv头文件" class="headerlink" title="找不到opencv头文件"></a>找不到opencv头文件</h4><p>没有配置opencv环境变量</p>
<h4 id="找不到easypr头文件"><a href="#找不到easypr头文件" class="headerlink" title="找不到easypr头文件"></a>找不到easypr头文件</h4><p>.pro文件中的<code>INCLUDEPATH+=E:\QT\PlateR\include</code>这句路径错了，需要是你的项目路径下的include文件夹！</p>
<h4 id="程序runtime-error或crashed"><a href="#程序runtime-error或crashed" class="headerlink" title="程序runtime error或crashed"></a>程序runtime error或crashed</h4><p>config.h文件中的model路径错了</p>
]]></content>
  </entry>
  <entry>
    <title>QT下运行用MinGW编译的OpenCV简明教程</title>
    <url>/2018/06/20/Old-QT-with-MinGW-built-OpenCV/</url>
    <content><![CDATA[<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul>
<li><code>Windows 7 or later</code></li>
<li><code>QT 5.3.0 with MinGW4.8.2</code> (下载已经编译好的<code>OpenCV</code>可以忽略下面两项)</li>
<li><code>OpenCV 3.2.0</code></li>
<li><code>CMake </code></li>
</ul>
<span id="more"></span>

<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><p>如果要自己编译的话需要下载<code>OpenCV 3.2.0</code> <a href="https://opencv.org/opencv-3-2.html">源码</a> 以及<code>CMake</code><a href="https://cmake.org/download/">最新版本</a></p>
<p>如果不想自己编译(编译至少要半小时)，可以从我的网盘下载编译好的 <code>OpenCV</code>：<a href="https://pan.neu.pw/index.php?share/file&user=1&sid=ImqVcXpz">网盘下载</a></p>
<p>下载后步骤如下：</p>
<ul>
<li>解压<code>opencv</code>文件夹到c盘</li>
<li>添加<strong>系统环境变量</strong>如下两项到<strong>Path</strong>：<ul>
<li>C:\opencv\build\install\x86\mingw\bin</li>
<li>C:\opencv\build\install\x86\mingw\lib</li>
</ul>
</li>
<li>检查<strong>QT5.3.0</strong>自带的<strong>MinGW</strong>是否在<strong>环境变量</strong>中(没有则添加)：<ul>
<li>C:\Qt\Qt5.3.0\5.3\mingw482_32\bin</li>
<li>C:\Qt\Qt5.3.0\Tools\mingw482_32\bin</li>
<li>C:\Qt\Qt5.3.0\Tools\mingw482_32\i686-w64-mingw32\bin</li>
</ul>
</li>
</ul>
<p>这样，环境的配置就完成了。</p>
<p>下面可以开始用QT Creater写一个OpenCV的Hello World程序了。</p>
<h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>和往常一样，新建Qt Widgets Application，选择Mainwindow类，注意路径不要有中文</p>
<h4 id="引入OpenCV库"><a href="#引入OpenCV库" class="headerlink" title="引入OpenCV库"></a>引入OpenCV库</h4><p>打开项目的<code>.pro</code>文件，底部添加如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">win32 &#123;</span><br><span class="line">INCLUDEPATH += C:\opencv\build\install\include</span><br><span class="line">LIBS += C:\opencv\build\install\x86\mingw\bin\libopencv_*.dll</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写main-cpp"><a href="#编写main-cpp" class="headerlink" title="编写main.cpp"></a>编写main.cpp</h4><p><code>main.cpp</code>代码如下编写即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    cv::Mat img;</span><br><span class="line">    img = cv::<span class="built_in">imread</span>(<span class="string">&quot;D:/1.jpg&quot;</span>);<span class="comment">//图片路径请自定义</span></span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    cv::<span class="built_in">namedWindow</span>(<span class="string">&quot;img show&quot;</span>);</span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;img show&quot;</span>,img);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>样图(我头像)：</p>
<p><img src="https://ae01.alicdn.com/kf/H61b156d1b3764058b872b644970879a3W.png" alt="H61b156d1b3764058b872b644970879a3W"></p>
<h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>结果示例：</p>
<p><img src="https://ae01.alicdn.com/kf/H61ae83e1acd84a11bd4f24be73c43fdaU.png" alt="H61ae83e1acd84a11bd4f24be73c43fdaU"></p>
]]></content>
  </entry>
  <entry>
    <title>Skinned Mesh Renderer多层材质赋值</title>
    <url>/2019/09/19/Old-Skinned-Mesh-Renderer/</url>
    <content><![CDATA[<p>Unity中Skinned Mesh Renderer上的材质可以挂多个，而Skinned Mesh Renderer有两个属性可以用来访问材质，一个是material，另一个是materials。</p>
<span id="more"></span>

<h2 id="material"><a href="#material" class="headerlink" title="material"></a>material</h2><p>第一个属性material是返回材质数组A的第一层材质（下标为0），也可以直接通过给这个属性赋值来改变第一层材质。</p>
<h2 id="materials"><a href="#materials" class="headerlink" title="materials"></a>materials</h2><p>第二个属性materials是返回材质数组A，但我们不能直接操作这个数组，因为Unity中返回的数组都是拷贝，所以我们想改变的话需要新建一个材质数组B，然后把B赋给A。</p>
<h2 id="修改材质"><a href="#修改材质" class="headerlink" title="修改材质"></a>修改材质</h2><p>Unity这样的设计方式实际上很蠢，我们在很多地方需要自己声明新的数组变量。下面告诉大家不同情况下Unity中材质的正确赋值方法。</p>
<p>修改单层材质的方法：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">unit_renderer.material = anotherMat;<span class="comment">//修改单层材质只需要直接给material赋值</span></span><br></pre></td></tr></table></figure>

<p>修改多层材质的方法：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">Material[] mats = unitRenderer.materials;<span class="comment">//先把新建材质数组，值为现有的材质数组</span></span><br><span class="line">mats[<span class="number">1</span>] = anotherMat;<span class="comment">//修改第二层材质为某个材质</span></span><br><span class="line">unitRenderer.materials = mats;<span class="comment">//把修改过的材质数组赋给Skinned Mesh Renderer</span></span><br></pre></td></tr></table></figure>

<p>也可以使用new方法初始化：<code>Material[] mats = new Materials[]&#123;bodyMat, headMat&#125;;</code>，这种方式是动态初始化。</p>
<p>参考链接：<a href="https://answers.unity.com/questions/175370/renderermaterials-not-working.html?_ga=2.219148891.359476452.1568802224-48193336.1567419401">renderer.materials not working.</a></p>
]]></content>
  </entry>
  <entry>
    <title>Solution for 8 Puzzle</title>
    <url>/2018/04/05/Old-Solution-for-8-Puzzle/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>八数码问题：在一个<code>3*3</code>的方棋盘上放置着1,2,3,4,5,6,7,8八个数码,每个数码占一格,且有一个空格。这些数码可以在棋盘上移动，其移动规则是：与空格相邻的数码方格可以移入空格。现在的问题是：对于指定的初始棋局和目标棋局，给出数码的移动序列。该问题称八数码难题或者重排九宫问题。在本文中，我将展示如何编写一个程序，使用<code>Python</code>和<code>PyGame</code>以及A *算法解决八数码问题。</p>
<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由于时间和空间资源的限制，穷举法只能解决一些状态空间很小的简单问题，而对于那些大状态空间的问题，穷举法就不能胜任，往往会导致“组合爆炸”。所以引入启发式搜索策略。启发式搜索就是利用启发性信息进行制导的搜索。它有利于快速找到问题的解。</p>
<p>由八数码问题的部分状态图可以看出，从初始节点开始，在通向目标节点的路径上，各节点的数码格局同目标节点相比较，其数码不同的位置个数在逐渐减少，最后为零。所以，这个数码不同的位置个数便是标志一个节点到目标节点距离远近的一个启发性信息，利用这个信息就可以指导搜索。即可以利用启发信息来扩展节点的选择，减少搜索范围，提高搜索速度。</p>
<p>启发函数设定。对于八数码问题，可以利用棋局差距作为一个度量。搜索过程中，差距会逐渐减少，最终为零，为零即搜索完成，得到目标棋局。</p>
<h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p>要通过人工智能来解决这个问题，我们需要对如何获得目标节点有一个基本的了解。<br>以下是步骤：</p>
<ol>
<li><p>获取场景的当前状态（指现实世界中的棋盘或游戏）。</p>
</li>
<li><p>找到可用的移动和他们的成本。</p>
</li>
<li><p>选择成本最低的移动并将其设置为当前状态。</p>
</li>
<li><p>检查它是否与目标状态匹配，如果是，则停止，如果没有移动到步骤1。</p>
</li>
</ol>
<p>在代码中，程序将在一个状态中寻找一个0，然后寻找允许哪些移动并且花费最少。因此它将逐渐接近最终结果。</p>
<h2 id="代码要求"><a href="#代码要求" class="headerlink" title="代码要求"></a>代码要求</h2><p>Python3以上版本，<code>PyGame</code>库</p>
<ol>
<li><code>Puzzle.py</code>——实现A*算法</li>
<li><code>Puzzler.py</code>——调用界面实现自动化解决八数码问题</li>
</ol>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><code>puzzle.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math,random</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">puzzle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#self.node=[]</span></span><br><span class="line">        self.fronts=[]</span><br><span class="line">        self.GoalNode=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;0&#x27;</span>]</span><br><span class="line">        self.StartNode=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;0&#x27;</span>]</span><br><span class="line">        self.PreviousNode=[]</span><br><span class="line">        self.prePreviousNode=[]</span><br><span class="line">        self.PreviousCount=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Solve</span>(<span class="params">self</span>):</span><br><span class="line">        self.shufler(<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.StartNode)</span><br><span class="line">        self.sucessor(self.StartNode)</span><br><span class="line">        nxNode=self.getNextNode()</span><br><span class="line">        <span class="built_in">print</span> (nxNode)</span><br><span class="line">        count=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nxNode!=self.GoalNode:</span><br><span class="line">            <span class="comment">#print(self.fronts)</span></span><br><span class="line">            <span class="built_in">print</span>(count)</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            self.sucessor(nxNode)</span><br><span class="line">            nxNode=self.getNextNode()</span><br><span class="line">            <span class="built_in">print</span> (nxNode)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;result&#x27;</span>,nxNode)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shufler</span>(<span class="params">self</span>):</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                node=self.StartNode</span><br><span class="line">                subNode=[]</span><br><span class="line">                direct=random.randint(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">                getZeroLocation=node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">1</span></span><br><span class="line">                subNode.extend(node)</span><br><span class="line">                boundry=self.boundries(getZeroLocation)</span><br><span class="line">                        </span><br><span class="line">                <span class="keyword">if</span> getZeroLocation+<span class="number">3</span>&lt;=<span class="number">9</span> <span class="keyword">and</span> direct==<span class="number">1</span>:</span><br><span class="line">                    temp=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">                    subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">3</span>]</span><br><span class="line">                    subNode[node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">3</span>]=temp</span><br><span class="line">                    self.StartNode=subNode</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">elif</span> getZeroLocation-<span class="number">3</span>&gt;=<span class="number">1</span> <span class="keyword">and</span> direct==<span class="number">2</span>:</span><br><span class="line">                    temp=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">                    subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)-<span class="number">3</span>]</span><br><span class="line">                    subNode[node.index(<span class="string">&#x27;0&#x27;</span>)-<span class="number">3</span>]=temp</span><br><span class="line">                    self.StartNode=subNode</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">elif</span> getZeroLocation-<span class="number">1</span>&gt;=boundry[<span class="number">0</span>] <span class="keyword">and</span> direct==<span class="number">3</span>:</span><br><span class="line">                    temp=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">                    subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)-<span class="number">1</span>]</span><br><span class="line">                    subNode[node.index(<span class="string">&#x27;0&#x27;</span>)-<span class="number">1</span>]=temp</span><br><span class="line">                    self.StartNode=subNode</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">elif</span> getZeroLocation+<span class="number">1</span>&lt;=boundry[<span class="number">1</span>] <span class="keyword">and</span> direct==<span class="number">4</span>:</span><br><span class="line">                    temp=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">                    subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">1</span>]</span><br><span class="line">                    subNode[node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">1</span>]=temp</span><br><span class="line">                    self.StartNode=subNode</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">boundries</span>(<span class="params">self,location</span>):</span><br><span class="line">        lst=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">        low=<span class="number">0</span></span><br><span class="line">        high=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">            <span class="keyword">if</span> location <span class="keyword">in</span> i:</span><br><span class="line">                low=i[<span class="number">0</span>]</span><br><span class="line">                high=i[<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> [low,high]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getNextNode</span>(<span class="params">self</span>):</span><br><span class="line">        nxNode=[]</span><br><span class="line">        tNode=[]</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            hrCost=<span class="number">100000</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.fronts:</span><br><span class="line">                    <span class="keyword">if</span>(i[-<span class="number">1</span>]&lt;hrCost):</span><br><span class="line">                        hrCost=i[-<span class="number">1</span>]</span><br><span class="line">                        nxNode=i[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">                        tNode=i</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> tNode <span class="keyword">in</span> self.PreviousNode <span class="keyword">and</span> tNode <span class="keyword">in</span> self.fronts:</span><br><span class="line">                self.fronts.remove(tNode)</span><br><span class="line">                self.PreviousNode.append(tNode)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.PreviousNode.append(tNode)</span><br><span class="line">                <span class="keyword">return</span> nxNode</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">heruistic</span>(<span class="params">self,node</span>):</span><br><span class="line">        herMisplaced=<span class="number">0</span></span><br><span class="line">        herDist=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> node[i]!=self.GoalNode[i]:</span><br><span class="line">                herMisplaced +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> node:</span><br><span class="line">            herDist +=math.fabs(node.index(i)-self.GoalNode.index(i))</span><br><span class="line">        </span><br><span class="line">        totalHerst=herDist+herMisplaced</span><br><span class="line">       </span><br><span class="line">        node.append(totalHerst)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sucessor</span>(<span class="params">self,node=[]</span>):</span><br><span class="line">        subNode=[]</span><br><span class="line">        getZeroLocation=node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">1</span></span><br><span class="line">        subNode.extend(node)</span><br><span class="line">        boundry=self.boundries(getZeroLocation)</span><br><span class="line"><span class="comment">#        for i in self.fronts:</span></span><br><span class="line"><span class="comment">#           if i[0:-1]==node:</span></span><br><span class="line"><span class="comment">#              self.fronts.remove(i)</span></span><br><span class="line">        self.fronts=[]</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> getZeroLocation+<span class="number">3</span>&lt;=<span class="number">9</span>:</span><br><span class="line">            temp=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">            subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">3</span>]</span><br><span class="line">            subNode[node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">3</span>]=temp</span><br><span class="line">            self.fronts.append(self.heruistic(subNode))</span><br><span class="line">            subNode=[]</span><br><span class="line">            subNode.extend(node)</span><br><span class="line">        <span class="keyword">if</span> getZeroLocation-<span class="number">3</span>&gt;=<span class="number">1</span>:</span><br><span class="line">            temp=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">            subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)-<span class="number">3</span>]</span><br><span class="line">            subNode[node.index(<span class="string">&#x27;0&#x27;</span>)-<span class="number">3</span>]=temp</span><br><span class="line">            self.fronts.append(self.heruistic(subNode))</span><br><span class="line">            subNode=[]</span><br><span class="line">            subNode.extend(node)</span><br><span class="line">        <span class="keyword">if</span> getZeroLocation-<span class="number">1</span>&gt;=boundry[<span class="number">0</span>]:</span><br><span class="line">            temp=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">            subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)-<span class="number">1</span>]</span><br><span class="line">            subNode[node.index(<span class="string">&#x27;0&#x27;</span>)-<span class="number">1</span>]=temp</span><br><span class="line">            self.fronts.append(self.heruistic(subNode))</span><br><span class="line">            subNode=[]</span><br><span class="line">            subNode.extend(node)</span><br><span class="line">        <span class="keyword">if</span> getZeroLocation+<span class="number">1</span>&lt;=boundry[<span class="number">1</span>]:</span><br><span class="line">            temp=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]</span><br><span class="line">            subNode[node.index(<span class="string">&#x27;0&#x27;</span>)]=subNode[node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">1</span>]</span><br><span class="line">            subNode[node.index(<span class="string">&#x27;0&#x27;</span>)+<span class="number">1</span>]=temp</span><br><span class="line">            self.fronts.append(self.heruistic(subNode))</span><br><span class="line">            subNode=[]</span><br><span class="line">            subNode.extend(node)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p><code>puzzler.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame, sys, time</span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> puzzle <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">puzzle=puzzle()</span><br><span class="line"><span class="comment">#puzzle.Solve()</span></span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">WINDOWWIDTH = <span class="number">300</span></span><br><span class="line">WINDOWHEIGHT = <span class="number">300</span></span><br><span class="line">BASICFONT = pygame.font.Font(<span class="string">&#x27;freesansbold.ttf&#x27;</span>,<span class="number">50</span>)</span><br><span class="line">windowSurface = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT), <span class="number">0</span>, <span class="number">32</span>)</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;8 Puzzle&#x27;</span>)</span><br><span class="line"></span><br><span class="line">BLACK = (<span class="number">96</span>, <span class="number">123</span>, <span class="number">139</span>)</span><br><span class="line">RED = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">GREEN = (<span class="number">255</span>, <span class="number">222</span>, <span class="number">173</span>)</span><br><span class="line">BLUE = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">WHITE=(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>)</span><br><span class="line">Text=(<span class="number">96</span>, <span class="number">123</span>, <span class="number">139</span>)</span><br><span class="line"></span><br><span class="line">blockTOP=<span class="number">0</span></span><br><span class="line">blockLEFT=<span class="number">0</span></span><br><span class="line">blocks=[]</span><br><span class="line">blockNumber=<span class="number">1</span></span><br><span class="line"><span class="comment">#blocks.append(&#123;&#x27;rect&#x27;:pygame.Rect(300, 80, 50, 100), &#x27;color&#x27;:RED, &#x27;dir&#x27;:&#125;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> blockNumber&gt;<span class="number">8</span>:</span><br><span class="line">            blocks.append(&#123;<span class="string">&#x27;rect&#x27;</span>:pygame.Rect(blockLEFT,blockTOP,<span class="number">99</span>,<span class="number">99</span>),<span class="string">&#x27;color&#x27;</span>:BLACK,<span class="string">&#x27;block&#x27;</span>:<span class="built_in">str</span>(<span class="number">0</span>)&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            blocks.append(&#123;<span class="string">&#x27;rect&#x27;</span>:pygame.Rect(blockLEFT,blockTOP,<span class="number">99</span>,<span class="number">99</span>),<span class="string">&#x27;color&#x27;</span>:GREEN,<span class="string">&#x27;block&#x27;</span>:<span class="built_in">str</span>(blockNumber)&#125;)</span><br><span class="line">        blockNumber+=<span class="number">1</span></span><br><span class="line">        blockLEFT+=<span class="number">100</span></span><br><span class="line">    blockTOP+=<span class="number">100</span></span><br><span class="line">    blockLEFT=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> blocks:        </span><br><span class="line">        pygame.draw.rect(windowSurface, b[<span class="string">&#x27;color&#x27;</span>], b[<span class="string">&#x27;rect&#x27;</span>])</span><br><span class="line">        textSurf = BASICFONT.render(b[<span class="string">&#x27;block&#x27;</span>], <span class="literal">True</span>,Text)</span><br><span class="line">        textRect = textSurf.get_rect()</span><br><span class="line">        textRect.center = b[<span class="string">&#x27;rect&#x27;</span>].left+<span class="number">50</span>,b[<span class="string">&#x27;rect&#x27;</span>].top+<span class="number">50</span></span><br><span class="line">        windowSurface.blit(textSurf, textRect)</span><br><span class="line">pygame.display.update()</span><br><span class="line">     </span><br><span class="line">numShufles=<span class="number">50</span></span><br><span class="line">evt=<span class="literal">False</span>  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># check for the QUIT event</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span>==MOUSEBUTTONDOWN <span class="keyword">and</span> event.button==<span class="number">1</span>:</span><br><span class="line">            evt=<span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">while</span> numShufles&gt;<span class="number">0</span>:</span><br><span class="line">        puzzle.shufler()</span><br><span class="line">        puzzle.PreviousNode.extend(puzzle.StartNode)</span><br><span class="line">        block=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> blocks:</span><br><span class="line">            b[<span class="string">&#x27;block&#x27;</span>]=<span class="built_in">str</span>(puzzle.StartNode[block])</span><br><span class="line">            block+=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> b[<span class="string">&#x27;block&#x27;</span>]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                b[<span class="string">&#x27;color&#x27;</span>]=BLACK</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                b[<span class="string">&#x27;color&#x27;</span>]=GREEN         </span><br><span class="line">            pygame.draw.rect(windowSurface, b[<span class="string">&#x27;color&#x27;</span>], b[<span class="string">&#x27;rect&#x27;</span>])</span><br><span class="line">            textSurf = BASICFONT.render(b[<span class="string">&#x27;block&#x27;</span>], <span class="literal">True</span>,Text)</span><br><span class="line">            textRect = textSurf.get_rect()</span><br><span class="line">            textRect.center = b[<span class="string">&#x27;rect&#x27;</span>].left+<span class="number">50</span>,b[<span class="string">&#x27;rect&#x27;</span>].top+<span class="number">50</span></span><br><span class="line">            windowSurface.blit(textSurf, textRect)</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        time.sleep(<span class="number">0.04</span>)</span><br><span class="line">        numShufles-=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> evt==<span class="literal">True</span>:</span><br><span class="line">            puzzle.sucessor(puzzle.StartNode)</span><br><span class="line">            nxNode=puzzle.getNextNode()</span><br><span class="line">            </span><br><span class="line">            block=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> blocks:</span><br><span class="line">                b[<span class="string">&#x27;block&#x27;</span>]=<span class="built_in">str</span>(nxNode[block])</span><br><span class="line">                block+=<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> b[<span class="string">&#x27;block&#x27;</span>]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                    b[<span class="string">&#x27;color&#x27;</span>]=BLACK</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    b[<span class="string">&#x27;color&#x27;</span>]=GREEN         </span><br><span class="line">                pygame.draw.rect(windowSurface, b[<span class="string">&#x27;color&#x27;</span>], b[<span class="string">&#x27;rect&#x27;</span>])</span><br><span class="line">                textSurf = BASICFONT.render(b[<span class="string">&#x27;block&#x27;</span>], <span class="literal">True</span>,Text)</span><br><span class="line">                textRect = textSurf.get_rect()</span><br><span class="line">                textRect.center = b[<span class="string">&#x27;rect&#x27;</span>].left+<span class="number">50</span>,b[<span class="string">&#x27;rect&#x27;</span>].top+<span class="number">50</span></span><br><span class="line">                windowSurface.blit(textSurf, textRect)</span><br><span class="line">            pygame.display.update()</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            count=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> nxNode!=puzzle.GoalNode:</span><br><span class="line">                <span class="comment">#print(self.fronts)</span></span><br><span class="line">                </span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">                puzzle.sucessor(nxNode)</span><br><span class="line">                nxNode=puzzle.getNextNode()</span><br><span class="line">                block=<span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> blocks:</span><br><span class="line">                    b[<span class="string">&#x27;block&#x27;</span>]=<span class="built_in">str</span>(nxNode[block])</span><br><span class="line">                    block+=<span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> b[<span class="string">&#x27;block&#x27;</span>]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                        b[<span class="string">&#x27;color&#x27;</span>]=BLACK</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        b[<span class="string">&#x27;color&#x27;</span>]=GREEN         </span><br><span class="line">                    pygame.draw.rect(windowSurface, b[<span class="string">&#x27;color&#x27;</span>], b[<span class="string">&#x27;rect&#x27;</span>])</span><br><span class="line">                    textSurf = BASICFONT.render(b[<span class="string">&#x27;block&#x27;</span>], <span class="literal">True</span>,Text)</span><br><span class="line">                    textRect = textSurf.get_rect()</span><br><span class="line">                    textRect.center = b[<span class="string">&#x27;rect&#x27;</span>].left+<span class="number">50</span>,b[<span class="string">&#x27;rect&#x27;</span>].top+<span class="number">50</span></span><br><span class="line">                    windowSurface.blit(textSurf, textRect)</span><br><span class="line">                pygame.display.update()</span><br><span class="line">                time.sleep(<span class="number">0.03</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">                  </span><br><span class="line">            </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># check for the QUIT event</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:</span><br><span class="line">            pygame.quit()</span><br><span class="line">            sys.exit() </span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://ae01.alicdn.com/kf/He37742daf9244075844d37aefadf5434n.png" alt="He37742daf9244075844d37aefadf5434n"></p>
<p><img src="https://ae01.alicdn.com/kf/H6266c4f4460d4dbc95a634b15a3cbee0N.png" alt="H6266c4f4460d4dbc95a634b15a3cbee0N"></p>
]]></content>
  </entry>
  <entry>
    <title>SourceTree提交Github失败解决方法</title>
    <url>/2019/09/11/Old-SourceTree-login-Github/</url>
    <content><![CDATA[<p>使用SourceTree提交代码到Github时会要求登录Github账号，但是输入正确的账号密码也会出现账号密码错误的提示，实际上并不是账号密码错了，而是Windows的SSL协议版本的问题。</p>
<span id="more"></span>

<p>出现该提示信息的主要原因是Github禁用了TLS v1.0 and v1.1这种弱加密标准，此时需要手动更新Windows的git凭证管理器，更新方式很简单，在网站下载Git在Window上的凭证管理器并默认安装即可，链接如下：<br><a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/">https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/</a></p>
<p>下载其中的exe并安装就解决了。</p>
]]></content>
  </entry>
  <entry>
    <title>Lua中的时区问题</title>
    <url>/2021/02/09/Old-Timezone-problem-in-lua/</url>
    <content><![CDATA[<p>Lua 中的 <code>os.time()</code> 获取的时间是当前设备的时间，但是当前设备是可以修改时间的，所以这个接口并不可靠。另外如果设备修改了时区，这个接口也没有提供获取指定时区当前时间的功能。</p>
<p>这样在各种需要显示时间以及根据时间判断是否开放系统的地方很可能因此出现问题。所以需要自己封装一些接口来获取服务器时区对应的时间。因为游戏时间肯定是以服务器所在时区显示为准。</p>
<span id="more"></span>

<h2 id="获取客户端时区"><a href="#获取客户端时区" class="headerlink" title="获取客户端时区"></a>获取客户端时区</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取客户端时区</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CommonTools.GetClientTimeZone</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">local</span> now = <span class="built_in">os</span>.<span class="built_in">time</span>()</span><br><span class="line">   <span class="keyword">local</span> <span class="built_in">difftime</span> = <span class="built_in">os</span>.<span class="built_in">difftime</span>(now, <span class="built_in">os</span>.<span class="built_in">time</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;!*t&quot;</span>, now)))</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">difftime</span> / <span class="number">3600</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>即使客户端的时间是不准确的，我们也可以算出客户端当前设置的时区是什么，也就是 UTC +几。</p>
<p>计算方式很简单。是用 从设备获取的<strong>UTC+0</strong>的时间 和 从设备获取的<strong>当前</strong>的时间 做差。</p>
<p>而服务器时区可以写个固定的，比如 8 就代表北京时间。</p>
<h2 id="时间戳与日期转换"><a href="#时间戳与日期转换" class="headerlink" title="时间戳与日期转换"></a>时间戳与日期转换</h2><p>服务器传来一个时间戳之后，客户端如果要显示，Lua中需要用 <code>os.date</code> 进行转换，然而 <code>os.date</code> 转换出来的是按照客户端时区转的，并且没有提供参数指定时区，这就难受了。那就自己实现一个 <code>os.date</code> 吧。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 服务器或者配置表的时间戳转换为服务器对应时区的时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CommonTools.OSDate</span><span class="params">(format, serverTime)</span></span></span><br><span class="line">   <span class="keyword">local</span> clientTimeZone = CommonTools.GetClientTimeZone()</span><br><span class="line">   <span class="keyword">local</span> serverTimeZone = CommonTools.GetServerTimeZone()</span><br><span class="line">   <span class="keyword">local</span> clientTime = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;!*t&quot;</span>, serverTime)</span><br><span class="line">   <span class="keyword">local</span> offset = (serverTimeZone - clientTimeZone) * <span class="number">3600</span> + (clientTime.isdst <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span>) * <span class="number">3600</span> <span class="comment">-- 时差包括时区差距以及夏令时</span></span><br><span class="line">   <span class="keyword">local</span> tempTime = serverTime + offset</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">string</span>.IsNullOrEmpty(<span class="built_in">format</span>) <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">format</span> = <span class="string">&quot;*t&quot;</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="built_in">format</span>, tempTime)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>既然 <code>os.date</code> 是按照客户端时区转换，那么比如服务器是UTC+8，客户端是UTC+9，那么服务器的时间戳在客户端转换之后产生的日期就会多一个小时——比如实际是UTC+8 2021年1月1日5点的时间戳，放到客户端转换就会把它当作UTC+9的时间戳去做转换，转换出来就变成了UTC+9 2021年1月1日2点，快了一个小时。</p>
<p>所以，要让最终算出正确的结果，需要先用服务器时区减去客户端时区计算出偏移，如果客户端时区更大，偏移就是负的，反之就是正的。这样算出来的日期才是正确的。</p>
<p>同理，<code>os.time</code> 也需要做类似的转换，不过偏移要反过来：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 客户端的时间table转换为服务器的时间戳 仅限转换客户端本地时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CommonTools.OSTime</span><span class="params">(table)</span></span></span><br><span class="line">   <span class="keyword">local</span> clientTimeZone = CommonTools.GetClientTimeZone()</span><br><span class="line">   <span class="keyword">local</span> serverTimeZone = CommonTools.GetServerTimeZone()</span><br><span class="line">   <span class="keyword">local</span> offset = clientTimeZone - serverTimeZone</span><br><span class="line">   <span class="built_in">table</span>.hour = <span class="built_in">table</span>.hour + offset</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">os</span>.<span class="built_in">time</span>(<span class="built_in">table</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Unity AndroidManifest Style的修改</title>
    <url>/2020/06/04/Old-Unity-AndroidManifest-Style/</url>
    <content><![CDATA[<p>Unity 的AndroidManifest和安卓开发的AndroidManifest是有一点区别的，很多属性并不能使用，设置样式的时候需要注意。</p>
<span id="more"></span>



<p>Unity的<code>AndroidManifest.xml</code>文件在项目的<code>Assets\Plugins\Android</code>路径下，里面的application标签可以加theme、icon之类的属性来设置主题和图标等信息。</p>
<p>这里的theme不能像安卓那样直接写<code>@android:style/Theme.Black.NoTitleBar</code>，打包会报错。经过测试，自己定义的样式需要继承自UnityThemeSelector，然后定义的属性也是有限制的，只能使用部分属性。</p>
<p>如下在<code>AndroidManifest.xml</code>文件中使用了一个名为MyStyle的自定义样式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.test.splash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.VIBRATE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">&quot;@style/MyStyle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.test.splash.SplashActivity&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:configChanges</span>=<span class="string">&quot;fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要在<code>Assets\Plugins\Android\res\values</code>路径下新建一个<code>styles.xml</code>文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;BlackText&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;@style/UnityThemeSelector&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在<code>style</code>标签下添加item定义样式，比如windowBackground是设置背景颜色。</p>
]]></content>
  </entry>
  <entry>
    <title>制作 Unity Animation 事件编辑器</title>
    <url>/2020/07/30/Old-Unity-Animation-Event-Editor/</url>
    <content><![CDATA[<p>Unity 的人物动作模型fbx文件中一般会有一个或多个 Animation 动画，为了配合音效，我们需要给 Animation 添加事件，Unity自带的Inspector可以实现简单的事件编辑，不过缺点是不能预览动作和音效事件的配合。因此可以自己制作工具来实现在运行时的事件编辑器。</p>
<span id="more"></span>

<h2 id="事件读取"><a href="#事件读取" class="headerlink" title="事件读取"></a>事件读取</h2><p>在加载人物模型之后，可以获取到身上挂的Animator脚本，从而读取到人物所有的AnimationClip：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AnimationClip[] animationClips = CurUnit.animator.runtimeAnimatorController.animationClips;</span><br></pre></td></tr></table></figure>

<p>Animation的基本信息有以下内容：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">animationClip.name <span class="comment">//clip名称 string</span></span><br><span class="line">animationClip.averageDuration <span class="comment">//持续时间(秒) float</span></span><br><span class="line">animationClip.events <span class="comment">//事件数组 AnimationEvent[]</span></span><br></pre></td></tr></table></figure>

<h2 id="新增事件"><a href="#新增事件" class="headerlink" title="新增事件"></a>新增事件</h2><p>给指定的animationClip新增一个调用函数为SoundEvent的事件，持续时间为1s，string参数为”hit”。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AnimationEvent evt = <span class="keyword">new</span> AnimationEvent();</span><br><span class="line">evt.functionName = <span class="string">&quot;SoundEvent&quot;</span>;</span><br><span class="line">evt.time = <span class="built_in">float</span>.Parse(<span class="number">1</span>);</span><br><span class="line">evt.stringParameter = <span class="string">&quot;hit&quot;</span>;</span><br><span class="line">animationClip.AddEvent(evt);</span><br></pre></td></tr></table></figure>

<h2 id="修改事件"><a href="#修改事件" class="headerlink" title="修改事件"></a>修改事件</h2><p>不能直接修改 animationClip 的 events数组，需要先取出来，修改完再赋值回去。因此编辑时需要自己记住下标eventIndex 。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AnimationEvent[] events = animationClip.events;</span><br><span class="line">AnimationEvent evt = <span class="keyword">new</span> AnimationEvent();</span><br><span class="line">evt.functionName = <span class="string">&quot;SoundEvent&quot;</span>;</span><br><span class="line">evt.time = <span class="built_in">float</span>.Parse(<span class="number">1</span>);</span><br><span class="line">evt.stringParameter = <span class="string">&quot;hit&quot;</span>;</span><br><span class="line">events[eventIndex] = evt;</span><br><span class="line">animationClip.events = events;</span><br></pre></td></tr></table></figure>

<p>由于是运行时添加，游戏中会立即增加这个时间，这时播放对于的 animation 动作就可以预览最终效果了。不过这样关闭游戏不会保存到文件，因为数据没有写入到 AssetDatabase。</p>
<h2 id="回退修改"><a href="#回退修改" class="headerlink" title="回退修改"></a>回退修改</h2><p>刚才修改了事件，虽然没保存，但是必须重启游戏才能恢复，这样很麻烦。实际上我们可以通过重新导入来实现 Revert 功能。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(animationClip));</span><br></pre></td></tr></table></figure>

<p>一行代码即可搞定。</p>
<h2 id="保存事件"><a href="#保存事件" class="headerlink" title="保存事件"></a>保存事件</h2><p>先尝试Unity官方文档所说的方式：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AnimationUtility.SetAnimationEvents(animationClip, animationClip.events);</span><br></pre></td></tr></table></figure>

<p>看起来很容易，一行代码就搞定了，关掉游戏再运行也没问题，可是git却没有检测到任何变化，这是怎么回事？</p>
<p>其实网上有不少吐槽这个接口的讨论了，这个接口只会把信息保存到本地缓存中，并没有真的写入到文件里，所以实际上需要自己来做保存这件事。</p>
<p>保存事件要先知道 animation 的 event 信息记录到哪里，实际上不是在 anim 文件中，而是其对应的 meta 文件中。</p>
<p>因此要想保存到文件，要根据读取的 animationClip 找到 AssetPath ，再找到对应数据的 m_ClipAnimations 标签，这里就是所有的AnimationProperty，最后遍历就可以做我们想做的事情了。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找到当前的animationClip的路径</span></span><br><span class="line"><span class="built_in">string</span> assetPath = AssetDatabase.GetAssetPath(animationClip);</span><br><span class="line">ModelImporter modelImporter = AssetImporter.GetAtPath(assetPath) <span class="keyword">as</span> ModelImporter;</span><br><span class="line"><span class="comment">//读取文件序列化数据 实际就是meta里的数据</span></span><br><span class="line">SerializedObject serializedObject = <span class="keyword">new</span> SerializedObject(modelImporter);</span><br><span class="line"><span class="comment">//找到所有animation</span></span><br><span class="line">SerializedProperty clipAnimations = serializedObject.FindProperty(<span class="string">&quot;m_ClipAnimations&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (clipAnimations == <span class="literal">null</span> || clipAnimations.arraySize == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    modelImporter.clipAnimations = modelImporter.defaultClipAnimations;</span><br><span class="line">    serializedObject = <span class="keyword">new</span> SerializedObject(modelImporter);</span><br><span class="line">    clipAnimations = serializedObject.FindProperty(<span class="string">&quot;m_ClipAnimations&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; clipAnimations.arraySize; i++)</span><br><span class="line">&#123;</span><br><span class="line">    SerializedProperty clipAnimationProperty = clipAnimations.GetArrayElementAtIndex(i);</span><br><span class="line">    <span class="keyword">if</span> (clipAnimationProperty.displayName == <span class="string">&quot;你要找的animationClip的名字&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找到其events</span></span><br><span class="line">        SerializedProperty eventsProperty = clipAnimationProperty.FindPropertyRelative(<span class="string">&quot;events&quot;</span>);</span><br><span class="line">        <span class="comment">//清空事件</span></span><br><span class="line">        eventsProperty.ClearArray();</span><br><span class="line">        <span class="comment">//重新写入</span></span><br><span class="line">        SerializedProperty eventProperty = eventsProperty.GetArrayElementAtIndex(index);</span><br><span class="line">        <span class="comment">//数据中的时间是相对于总时间的0到1的小数 而不是以秒为单位的时间 所以要转换一下</span></span><br><span class="line">        eventProperty.FindPropertyRelative(<span class="string">&quot;time&quot;</span>).floatValue = Time2Percent(evt.time);</span><br><span class="line">        eventProperty.FindPropertyRelative(<span class="string">&quot;functionName&quot;</span>).stringValue = evt.functionName;</span><br><span class="line">        eventProperty.FindPropertyRelative(<span class="string">&quot;floatParameter&quot;</span>).floatValue = evt.floatParameter;</span><br><span class="line">        eventProperty.FindPropertyRelative(<span class="string">&quot;intParameter&quot;</span>).intValue = evt.intParameter;</span><br><span class="line">        eventProperty.FindPropertyRelative(<span class="string">&quot;data&quot;</span>).stringValue = evt.stringParameter;</span><br><span class="line">        <span class="comment">//应用</span></span><br><span class="line">        serializedObject.ApplyModifiedProperties();</span><br><span class="line">        <span class="comment">//重新读取</span></span><br><span class="line">        AssetDatabase.ImportAsset(assetPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终刷新一下AssetDatabase</span></span><br><span class="line">AssetDatabase.Refresh();</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的方法就可以在运行时编辑animation的事件了，这个工具相比于Unity Inspector的功能可以更强大，可以实时预览事件在游戏中的效果，尤其是在编辑音效时，就体现出预览的重要性了。</p>
]]></content>
  </entry>
  <entry>
    <title>Unity Animator Controller复制产生的冗余依赖</title>
    <url>/2020/07/30/Old-Unity-Animator-Bug-of-Copy/</url>
    <content><![CDATA[<p>Unity 的 Animator Controller 在游戏中一般用来做动画状态机，存放一个游戏中人物或物体的各种动画，便于程序调用。</p>
<p>由于很多人物的动画状态机结构基本一致，我们在使用时常常直接复制 Animator Controller 或者复制其中的节点到另外一个 Animator Controller 中。</p>
<p>但实际操作中，这样会产生冗余数据和不必要的引用关系。</p>
<span id="more"></span>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="https://p.pstatp.com/origin/ffdc0001c6c3c317afc5" alt="image-20200730150643361"></p>
<p>如图，在导出名为12100的Animator Controller 时，选择包含引用时，会同时导出名为17001的Animator Controller。</p>
<p>然而实际上打开12100，视图里面并没有17001的animation节点，即使把所有节点都删除再保存，重新导出依然有17001的引用。</p>
<h2 id="查找guid"><a href="#查找guid" class="headerlink" title="查找guid"></a>查找guid</h2><p>打开17001的meta文件，找到它的guid，然后在12100的Controller文件中搜索，可以发现一个AnimatorStateTransition关联了这个guid。</p>
<p><img src="https://p.pstatp.com/origin/137c3000099e629332923" alt="image-20200730162337228"></p>
<p>关联的内容是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m_DstState: &#123;fileID: 1102131212858548580, guid: df538bb3c58384d4b83ab1cdbb708854,</span><br><span class="line">    type: 2&#125;</span><br></pre></td></tr></table></figure>

<p>改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m_DstState: &#123;fileID: 0&#125;</span><br></pre></td></tr></table></figure>

<p>这样再保存，引用关系就解除了。</p>
<p>再次导出就没有多余的引用了。</p>
<p><img src="https://p.pstatp.com/origin/ffbc0002061f3dd09f44" alt="image-20200730163042936"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>这个问题产生的原因是复制17001，在此基础上制作了12001，因此12001包含了17001的引用。</p>
<p>上面是大概的原因，下面讲一下冗余依赖产生的具体原因。</p>
<p>假如有两个Animator Controller 文件，分别名为<code>a.controller</code>和<code>b.controller</code> 。</p>
<p><code>a.controller</code> 中的状态如下：</p>
<p><img src="https://p.pstatp.com/origin/137810000487c41bd8c88" alt="技术分享"></p>
<p>可以看到Attack01指向Attack02。</p>
<p>当拷贝了包含Transitions并且该Transitions的Dst State不存在的Animator State到另一个Animator Controller时，就会出现游离依赖数据。以<code>a.controller</code>为例，查看该文件能够发现Attack01节点包含的Transitions数据：</p>
<p><img src="https://p.pstatp.com/origin/13776000090c10aa1c02c" alt="技术分享"></p>
<p>该Transition的Dst State为Attack02。如果我们拷贝<strong>Attack01</strong>但没有拷贝<strong>Attack02</strong>到<code>b.controller</code>，那么<code>b.controller</code>中就出现了游离依赖数据m_DstState。</p>
<p>并且这个数据我们在视图中看不到，也删不掉，随着拷贝次数增加，冗余数据会越来越多，甚至会造成循环依赖。如果这两个Controller都是AssetBundle的话，就会产生无限依赖加载。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="手工"><a href="#手工" class="headerlink" title="手工"></a>手工</h3><p>不使用直接复制来制作新的Animator Controller ，只通过工具生成空的Animator Controller 。</p>
<p>在遇到冗余引用时，暂时只能找到荣誉动画的meta，找到guid然后再有冗余的Controller中查找删除。</p>
<p>如果是引用了多余的Animator Controller：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m_DstState: &#123;fileID: 0&#125;</span><br></pre></td></tr></table></figure>

<p>如果是引用了多余的Animation：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m_Motion: &#123;fileID: 0&#125;</span><br></pre></td></tr></table></figure>

<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>通过之前的游离依赖数据分析可知他们的共性为m_DstState项包含了所依赖的.controller文件的guid，因此我们可以通过读取.controller文件将这些游离依赖数据删除。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.Animations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnimatorChecker</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;美术工具/Animator Controller/清除冗余引用数据&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CorrectData</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> block = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">bool</span> isDependOtherAnimatorController = <span class="literal">false</span>;</span><br><span class="line">        AnimatorController animatorController = Selection.activeObject <span class="keyword">as</span> AnimatorController;</span><br><span class="line">        <span class="built_in">string</span> filePathName = Path.GetFullPath(AssetDatabase.GetAssetPath(animatorController));</span><br><span class="line">        <span class="built_in">string</span> tempFilePathName = Application.dataPath + <span class="string">&quot;/&quot;</span> + System.DateTime.Now.Ticks.ToString() + <span class="string">&quot;.controller&quot;</span>;</span><br><span class="line">        <span class="keyword">using</span> (StreamWriter writer = File.CreateText(tempFilePathName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (StreamReader reader = File.OpenText(filePathName))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> content;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">null</span> != (content = reader.ReadLine()))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (content.StartsWith(<span class="string">&quot;--- !u&quot;</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(block))</span><br><span class="line">                            writer.Write(block);</span><br><span class="line"></span><br><span class="line">                        block = content + System.Environment.NewLine;</span><br><span class="line">                        isDependOtherAnimatorController = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isDependOtherAnimatorController)</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(block))</span><br><span class="line">                            writer.WriteLine(content);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            block += (content + System.Environment.NewLine);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 检测是否依赖其他的Animator Controller</span></span><br><span class="line">                            <span class="keyword">if</span> (content.Contains(<span class="string">&quot;m_DstState:&quot;</span>) &amp;&amp; content.Contains(<span class="string">&quot;guid&quot;</span>))</span><br><span class="line">                            &#123;</span><br><span class="line">                                block = <span class="literal">null</span>;</span><br><span class="line">                                isDependOtherAnimatorController = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 写入最后的数据</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(block))</span><br><span class="line">                    writer.Write(block);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileUtil.ReplaceFile(tempFilePathName, filePathName);</span><br><span class="line">        AssetDatabase.Refresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;美术工具/Animator Controller/查找Animator Controller引用&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CollectAnimatorControllerDependencies</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AnimatorController animatorController = Selection.activeObject <span class="keyword">as</span> AnimatorController;</span><br><span class="line">        <span class="built_in">string</span>[] dependencyArray = AssetDatabase.GetDependencies(AssetDatabase.GetAssetPath(animatorController));</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;************************* Animator Controller Dependencies (&quot;</span> + animatorController.name + <span class="string">&quot;) *************************&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> dependency <span class="keyword">in</span> dependencyArray)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dependency.EndsWith(<span class="string">&quot;.controller&quot;</span>))</span><br><span class="line">                Debug.Log(dependency);</span><br><span class="line">        &#125;</span><br><span class="line">        Debug.Log(<span class="string">&quot;************************************************* End *************************************************&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;美术工具/Animator Controller/查找所有Animator Controller引用&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CheckAnimatorControllerDependencies</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; dependencyCheckNameList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="built_in">string</span>[] filePathNameArray = Directory.GetFiles(Application.dataPath + <span class="string">&quot;/Content/Animator&quot;</span>, <span class="string">&quot;*.controller&quot;</span>, SearchOption.TopDirectoryOnly);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> filePathName <span class="keyword">in</span> filePathNameArray)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span>[] dependencyArray = AssetDatabase.GetDependencies(filePathName.Substring(filePathName.IndexOf(<span class="string">&quot;/Assets/&quot;</span>) + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> dependency <span class="keyword">in</span> dependencyArray)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dependency.EndsWith(<span class="string">&quot;.controller&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> assetName = Path.GetFileNameWithoutExtension(filePathName);</span><br><span class="line">                    <span class="built_in">string</span> dependencyName = Path.GetFileNameWithoutExtension(dependency);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// A依赖于B，如果&quot;B_A&quot;存在，表示B也依赖于A，则是循环依赖</span></span><br><span class="line">                    <span class="built_in">string</span> checkName = dependencyName + <span class="string">&quot;_&quot;</span> + assetName;</span><br><span class="line">                    <span class="keyword">if</span> (dependencyCheckNameList.Contains(checkName))</span><br><span class="line">                        Debug.Log(Path.GetFileName(filePathName) + <span class="string">&quot; and &quot;</span> + Path.GetFileName(dependency) + <span class="string">&quot; depend each other&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    dependencyCheckNameList.Add(assetName + <span class="string">&quot;_&quot;</span> + dependencyName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;美术工具/Animator Controller/清除冗余引用数据&quot;</span>, true)</span>]</span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;美术工具/Animator Controller/查找Animator Controller引用&quot;</span>, true)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">ValidateCorrectData</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Selection.activeObject <span class="keyword">is</span> AnimatorController;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/twjcnblog/p/7663048.html">https://www.cnblogs.com/twjcnblog/p/7663048.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Unity CacheServer搭建与使用</title>
    <url>/2020/06/04/Old-Unity-CacheServer-build-and-use/</url>
    <content><![CDATA[<p>Unity CacheServer是Unity的缓存服务器，支持部署在多平台。有了缓存服务器，Hold on会快很多。</p>
<span id="more"></span>

<p>Cache Server 的部署参考 <a href="https://networm.me/2019/01/06/unity-cache-server-setup/">https://networm.me/2019/01/06/unity-cache-server-setup/</a></p>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<p>MAC下载： <a href="https://nodejs.org/dist/v12.16.3/node-v12.16.3.pkg">https://nodejs.org/dist/v12.16.3/node-v12.16.3.pkg</a></p>
<p>查看node.js环境</p>
<p>命令行查看版本，成功说明没问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h2 id="从npm安装Cache-Server"><a href="#从npm安装Cache-Server" class="headerlink" title="从npm安装Cache Server"></a>从npm安装Cache Server</h2><p>cd某个文件夹然后 -g全局安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install unity-cache-server -g</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unity-cache-server [arguments] //不加参数会读默认配置 下面有修改默认配置的方法</span><br></pre></td></tr></table></figure>

<p>可以用下面的命令测试是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unity-cache-server -V</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><img src="https://ae01.alicdn.com/kf/Hd38f807ab9dd45609381b04973aea3aek.jpg" alt="Snipaste_2020-06-04_15-23-34.jpg"></p>
<h3 id="服务端默认配置修改"><a href="#服务端默认配置修改" class="headerlink" title="服务端默认配置修改"></a>服务端默认配置修改</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /opt/unity-cache-server</span><br><span class="line">cd /opt/unity-cache-server</span><br><span class="line">mkdir config</span><br><span class="line">unity-cache-server --save-config config/default.yml</span><br><span class="line">vi /opt/unity-cache-server/config/default.yml</span><br></pre></td></tr></table></figure>

<p><strong>下面的命令systemctl是CentOS的，Mac要用Homebrew的brew services</strong></p>
<h3 id="进程数"><a href="#进程数" class="headerlink" title="进程数"></a>进程数</h3><p>建议修改进程数为 1 个以上，能更有效地提升速度。</p>
<p>在 options: 下面增加 workers: 5，注意这是 Yaml 文件，使用空格进行缩进，workers 前面有 4 个空格。</p>
<h3 id="缓存路径"><a href="#缓存路径" class="headerlink" title="缓存路径"></a>缓存路径</h3><p>Cache.options.cache_fs.cachePath 必须使用绝对路径，需要将值从 .cache_fs 改为 &#x2F;opt&#x2F;unity-cache-server&#x2F;.cache_fs。</p>
<p>如果未使用绝对路径，启动服务时不会提示任何错误直接退出。</p>
<h3 id="运行控制"><a href="#运行控制" class="headerlink" title="运行控制"></a>运行控制</h3><p>开机自启动、运行与状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable unity-cache-server //mac用start会同时注册为开机自启动</span><br><span class="line">systemctl start unity-cache-server</span><br><span class="line">systemctl status unity-cache-server</span><br></pre></td></tr></table></figure>

<p>检查运行日志</p>
<p>运行以下命令可以以 tail 方式持续实时地显示日志，使用 Ctrl+C 退出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl -u unity-cache-server -f</span><br></pre></td></tr></table></figure>

<p>停止服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop unity-cache-server</span><br></pre></td></tr></table></figure>

<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>需要将默认端口 8126 放到允许列表中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8126/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>菜单Edit-Preferences-Cache Server</p>
<p>选择Remote</p>
<p>ip填远程主机的ip，端口8126</p>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>需要手动清理，执行以下脚本删除 180 天或超过 200GiB 的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unity-cache-server-cleanup --cache-path /opt/unity-cache-server/.cache_fs --log-level 5 --max-cache-size 214748364800 --expire-time-span 180.00:00:00</span><br></pre></td></tr></table></figure>

<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop unity-cache-server</span><br><span class="line">npm update unity-cache-server -g</span><br><span class="line">systemctl start unity-cache-server</span><br><span class="line">systemctl status unity-cache-server</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Unity NGUI元素位置计算与截图</title>
    <url>/2019/11/03/Old-Unity-NGUI-position/</url>
    <content><![CDATA[<h2 id="Rect"><a href="#Rect" class="headerlink" title="Rect"></a>Rect</h2><p>Unity中的Rect包含x, y, width, height四个参数，分别是到屏幕左侧的距离、到屏幕底部的距离以及矩形的宽和高，需要注意的是这就代表着Rect是从左下角开始计算的。</p>
<span id="more"></span>

<p><img src="https://ae01.alicdn.com/kf/Hf4ff9fee20b549b28386b21b65eb39e4h.png" alt="Hf4ff9fee20b549b28386b21b65eb39e4h"></p>
<h2 id="屏幕尺寸计算"><a href="#屏幕尺寸计算" class="headerlink" title="屏幕尺寸计算"></a>屏幕尺寸计算</h2><p>NGUI自带计算屏幕尺寸的函数，不过只能在编辑器模式下使用，如果在手机上会报错。</p>
<p>下面代码都是写成编辑器里面的脚本的，所以都是static。复习一下static：</p>
<p>静态类只包含静态成员，无法实例化，不能被继承，不能包含实例构造函数，如果一个类下所有成员都需要被共享则可以定义为静态类。</p>
<p>静态成员属于类，只会被创建一次；而相对的实例成员属于对象，有多少个对象就有多少份实例成员。</p>
<p>静态方法只能被重载，不能被重写。虽然字段不能声明为static const，但const本质上是静态的。</p>
<p>静态方法部署于特定对象，可以访问静态成员，不能直接访问实例成员，不过可以在实例函数调用的情况下把实例成员作为参数接受。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> screenWidth = (<span class="built_in">int</span>)NGUITools.screenSize.x;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> screenHeight = (<span class="built_in">int</span>)NGUITools.screenSize.y;</span><br></pre></td></tr></table></figure>

<p>另一种计算方式，只能在手机上使用，编辑器中计算出来的不准确。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> width = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> height = <span class="number">0</span>;</span><br><span class="line">UIRoot root = GameObject.FindObjectOfType&lt;UIRoot&gt;();</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> s = (<span class="built_in">float</span>)root.activeHeight / Screen.height;</span><br><span class="line">    width = Mathf.CeilToInt(Screen.width * s);</span><br><span class="line">    height = Mathf.CeilToInt(Screen.height * s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="NGUI元素位置计算"><a href="#NGUI元素位置计算" class="headerlink" title="NGUI元素位置计算"></a>NGUI元素位置计算</h2><p>最近在做一个截图功能，自定义截图大小，使用的是Texture2D.ReadPixels(new rect(x,y,width,height),0,0）这个方法，奈何始终截不到需要的图。我们知道Unity的Rect是从左下开始算，但是反人类的是ReadPixels是从左上角开始计算，也就是说这里y的值需要换成屏幕高度减去原来的y再减去矩形高度。用代码来看更直观一些。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算NGUI元素在相机屏幕中的矩形位置</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Rect <span class="title">NGUIObjectToRect</span>(<span class="params">Camera camera, GameObject go</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Bounds bounds = NGUIMath.CalculateAbsoluteWidgetBounds(go.transform);</span><br><span class="line">    Vector3 min = camera.WorldToScreenPoint(bounds.min);</span><br><span class="line">    Vector3 max = camera.WorldToScreenPoint(bounds.max);</span><br><span class="line">    <span class="comment">//正常的rect</span></span><br><span class="line">    <span class="comment">//return new Rect(min.x, min.y, (max.x - min.x), (max.y - min.y));</span></span><br><span class="line">    <span class="comment">//readpixels需要的rect (从左上角开始计算)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Rect(min.x, (screenHeight - max.y), (max.x - min.x), (max.y - min.y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单来说就是ReadPixels需要的Rect不是Unity用的Rect，这也太反人类了。。。</p>
<h2 id="指定区域截图"><a href="#指定区域截图" class="headerlink" title="指定区域截图"></a>指定区域截图</h2><p>截图功能可以这么思考，创建一个RenderTexture，然后赋值给摄像机的目标Texture，让摄像机拍的东西渲染在上面，接着再按照Rect裁剪这个RenderTexture就可以了，通过一个函数就可以做到。注意的是这里的Rect是给ReadPixels用的，所以传进来的时候记得按照上面写的函数写返回值。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Texture2D <span class="title">GetTex</span>(<span class="params">Camera camera, Rect rect</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建一个RenderTexture对象</span></span><br><span class="line">    RenderTexture rt = <span class="keyword">new</span> RenderTexture(screenWidth, screenHeight, <span class="number">-1</span>);</span><br><span class="line">    camera.targetTexture = rt;</span><br><span class="line">    camera.Render();</span><br><span class="line">    <span class="comment">// 激活这个rt 并从中读取像素</span></span><br><span class="line">    RenderTexture.active = rt;</span><br><span class="line">    Texture2D screenShot = <span class="keyword">new</span> Texture2D((<span class="built_in">int</span>)rect.width, (<span class="built_in">int</span>)rect.height, TextureFormat.RGB24, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 从RenderTexture.active中读取像素</span></span><br><span class="line">    screenShot.ReadPixels(rect, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    screenShot.Apply();</span><br><span class="line">    <span class="comment">// 重置参数</span></span><br><span class="line">    camera.targetTexture = <span class="literal">null</span>;</span><br><span class="line">    RenderTexture.active = <span class="literal">null</span>;</span><br><span class="line">    GameObject.DestroyImmediate(rt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> screenShot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Texture2D转PNG图片"><a href="#Texture2D转PNG图片" class="headerlink" title="Texture2D转PNG图片"></a>Texture2D转PNG图片</h2><p>截图之后把最终的结果保存为图片，很简单，只需要T2D和一个路径就可以。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Save2Png</span>(<span class="params">Texture2D t2d, <span class="built_in">string</span> path</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] bytes = t2d.EncodeToPNG();</span><br><span class="line">    System.IO.File.WriteAllBytes(path, bytes);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Unity Splash黑屏问题解决——使用Android Studio实现Splash</title>
    <url>/2020/06/01/Old-Unity-Splash-Implemented-in-Android/</url>
    <content><![CDATA[<p>Unity Splash之前会有几秒的黑屏，即使是打个空包也会有一两秒，很难接受，所以要解决这个问题必须写Java代码，在安卓app启动时展示Splash logo，而不是在Unity activity中展示。</p>
<span id="more"></span>

<h2 id="Unity-Splash原理"><a href="#Unity-Splash原理" class="headerlink" title="Unity Splash原理"></a>Unity Splash原理</h2><p>Unity的Splash就是Unity logo或者你自定义的logo出现的那个界面。Splash界面会在第一个场景加载前出现，直到第一个场景Awake的时候才关闭。</p>
<p>实际运行我们会发现，即使是空工程也会先黑屏1-2秒再显示Splash，然后才会进入首个场景。这个原因是打出来的apk包需要先调用UnityPlayerActivity，在UnityPlayerActivity出来之前当然是黑屏。</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>要想打开应用程序直接显示logo，只有在Java层写一个继承UnityPlayerActivity的Activity用于启动，创建时直接显示Java层的Splash。</p>
<p>再写一个用来管理Splash加载、显示、隐藏的类。加载Splash图片新建View之后添加到Unity的View里，并且设置View的长宽为Unity视图的长宽，这样可以保证不会变形。</p>
<p>实际情况下只需要写一个继承UnityPlayerActivity的类就足够了，写两个函数分别控制logo的显示与隐藏即可。</p>
<h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><p>Unity 2017.4.16f1 64bit</p>
<p>Android Studio 3.6.1</p>
<h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>Android Studio 3.6.1 新建Module</p>
<p><img src="https://ae01.alicdn.com/kf/H137b354455d941d7a2369c2460bbbe18M.png" alt="image.png"></p>
<p>把Unity的classes.jar复制到Module的libs文件夹中，classes.jar的位置在\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\mono\Release\Classes\classes.jar</p>
<p><img src="https://ae01.alicdn.com/kf/H9041ab1648404862945b3cf47f05c20bQ.png" alt="image _1_.png"></p>
<p>然后把jar包添加到依赖，这样在Java中才可以调用Unity的接口，继承UnityPlayerActivity。</p>
<p><img src="https://ae01.alicdn.com/kf/H4812ebb95f824a7cb697095b52c4c7feu.png" alt="image _2_.png"></p>
<p><img src="https://ae01.alicdn.com/kf/Hb28ea8b713f541dd9d0d7b0413c0540c2.png" alt="image _3_.png"></p>
<p><img src="https://ae01.alicdn.com/kf/H6afdf16ec20e4a57bbbf4658ec4e6d7fg.png" alt="9e5f7a37-9742-4207-a277-0d0736539be9.png"></p>
<p>给Module添加ActivityClass，之后导出的jar包就是这个class。</p>
<p><img src="https://ae01.alicdn.com/kf/H340ae1edb31f4b77bd72af1dbdf7451e5.png" alt="image _4_.png"></p>
<p><img src="https://ae01.alicdn.com/kf/H046aecce716a47b7a031af2fd6548127U.png" alt="image _5_.png"></p>
<p>Name可以随便写一个，点OK生成。</p>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>类名我用的是SplashActivity，代码结构如下，后面会放完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.splash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SplashActivity</span> <span class="keyword">extends</span> <span class="title class_">UnityPlayerActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ImageView</span> <span class="variable">logoView</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">        onShowSplash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onShowSplash</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onHideSplash</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先SplashActivity要继承UnityPlayerActivity，这样可以在UnityPlayerActivity创建的时候调用到SplashActivity的onCreate，以此实现尽快的展示Splash logo。</p>
<p>然后写一个onHideSplash方法提供给Unity调用，用来隐藏logo。</p>
<h2 id="资源放置"><a href="#资源放置" class="headerlink" title="资源放置"></a>资源放置</h2><p>logo的资源需要先放到Java项目中，要不然没法调用，资源应该放在图中的main\res\drawble目录下。</p>
<p><img src="https://ae01.alicdn.com/kf/H54fa5932807348afac768560b74973d6u.jpg" alt="Snipaste_2020-06-01_20-31-56.jpg"></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.splash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.DisplayMetrics;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unity3d.player.UnityPlayer;</span><br><span class="line"><span class="keyword">import</span> com.unity3d.player.UnityPlayerActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SplashActivity</span> <span class="keyword">extends</span> <span class="title class_">UnityPlayerActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ImageView</span> <span class="variable">logoView</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">        onShowSplash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onShowSplash</span><span class="params">()</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Unity&quot;</span>,<span class="string">&quot;----------------onShowSplash&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(logoView != <span class="literal">null</span>)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Unity&quot;</span>,<span class="string">&quot;------------------logoView==null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取屏幕尺寸信息计算缩放</span></span><br><span class="line">            <span class="type">DisplayMetrics</span> <span class="variable">dm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisplayMetrics</span>();</span><br><span class="line">            getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">            <span class="type">float</span> <span class="variable">scaleX</span> <span class="operator">=</span> dm.widthPixels/<span class="number">1366f</span>;</span><br><span class="line">            <span class="type">float</span> <span class="variable">scaleY</span> <span class="operator">=</span> dm.heightPixels/<span class="number">768f</span>;</span><br><span class="line">            Log.d(<span class="string">&quot;Unity&quot;</span>, <span class="string">&quot;Screen Width:&quot;</span>+dm.widthPixels+<span class="string">&quot;;Screen Height:&quot;</span>+dm.heightPixels);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建ImageView</span></span><br><span class="line">            logoView = <span class="keyword">new</span> <span class="title class_">ImageView</span>(<span class="built_in">this</span>);</span><br><span class="line">            <span class="comment">//资源是logo.png</span></span><br><span class="line">            logoView.setImageResource(R.drawable.logo);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加View到布局容器</span></span><br><span class="line">            mUnityPlayer.addView(logoView);</span><br><span class="line">            Log.d(<span class="string">&quot;Unity&quot;</span>,<span class="string">&quot;------------------addView&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据比例缩放</span></span><br><span class="line">            logoView.setScaleX(scaleX);</span><br><span class="line">            logoView.setScaleY(scaleY);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onHideSplash</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(logoView != <span class="literal">null</span>)&#123;</span><br><span class="line">                UnityPlayer.currentActivity.runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Log.d(<span class="string">&quot;Unity&quot;</span>, <span class="string">&quot;onHideSplash run&quot;</span>);</span><br><span class="line">                        mUnityPlayer.removeView(logoView);</span><br><span class="line">                        logoView = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><p>除了代码还要设置AndroidManifest，指定你写的activity所在的包名com.test.splash.SplashActivity，这样启动入口就变成你写的SplashActivity了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.test.splash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.VIBRATE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.test.splash.SplashActivity&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:configChanges</span>=<span class="string">&quot;fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="构建jar包"><a href="#构建jar包" class="headerlink" title="构建jar包"></a>构建jar包</h2><p>写完就要构建jar包给Unity使用了，要编辑splash的build.gradle，添加以下代码</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Copy类型，请在Terminal中运行gradlew makeJar</span></span><br><span class="line"><span class="keyword">task</span> makeJar(type: <span class="keyword">Copy</span>) &#123;</span><br><span class="line">    <span class="comment">//删除存在的</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="string">&#x27;build/libs/&#x27;</span> + <span class="string">&quot;splash.jar&quot;</span></span><br><span class="line">    <span class="comment">//设置拷贝的文件</span></span><br><span class="line">    <span class="keyword">from</span>(<span class="string">&quot;build/intermediates/aar_main_jar/release&quot;</span>)</span><br><span class="line">    <span class="comment">//打进jar包后的文件目录,将classes.jar放入build/libs/目录下</span></span><br><span class="line">    <span class="keyword">into</span>(<span class="string">&#x27;build/libs/&#x27;</span>)</span><br><span class="line">    <span class="comment">//要打包的jar文件</span></span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;classes.jar&#x27;</span>)</span><br><span class="line">    <span class="comment">//重命名</span></span><br><span class="line">    rename(<span class="string">&#x27;classes.jar&#x27;</span>, <span class="string">&quot;splash.jar&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">makeJar.dependsOn(build)</span><br></pre></td></tr></table></figure>

<p>点击Android Studio的菜单-View-Tool Windows-Gradle，右侧会出现gradle指令，找到Tasks中Other下面的makeJar双击构建jar包。</p>
<p>构建成功的话会在splash\build\libs目录下出现splash.jar</p>
<h2 id="Unity调用"><a href="#Unity调用" class="headerlink" title="Unity调用"></a>Unity调用</h2><p>把构建好的jar包和AndroidManifest放到Unity工程路径的Assets\Plugins\Android目录下</p>
<p>logo图片放在Unity工程路径的Assets\Plugins\Android\res\drawable目录下</p>
<p>最终在Unity中合适的时机，调用onHideSplash关闭logo即可。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (UNITY_ANDROID &amp;&amp; !UNITY_EDITOR)</span></span><br><span class="line">    AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;com.unity3d.player.UnityPlayer&quot;</span>);</span><br><span class="line">    AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">&quot;currentActivity&quot;</span>);</span><br><span class="line">    jo.Call(<span class="string">&quot;onHideSplash&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/8256c0da444a">https://www.jianshu.com/p/8256c0da444a</a></p>
<p><a href="https://www.jianshu.com/p/5c1f438e07f1">https://www.jianshu.com/p/5c1f438e07f1</a></p>
<p><a href="https://www.jianshu.com/p/2dd6cf0da2be">https://www.jianshu.com/p/2dd6cf0da2be</a></p>
]]></content>
  </entry>
  <entry>
    <title>Unity关闭游戏预览时崩溃的解决方法</title>
    <url>/2019/09/20/Old-Unity-crash-when-exit-game/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用Unity 2017.4.16开发时经常遇到关闭游戏预览的时候Unity Crash的情况，经过查询log文件可以找到出问题的原因。要注意的是，每一次运行Unity的时候会重新创建这个文件，所以崩溃之后要立即去查看或者把日志保存下来。</p>
<span id="more"></span>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>Unity Editor的崩溃日志存放在<code>C:\Users\YOURNAME\AppData\Local\Unity\Editor\Editor.log</code>，崩溃之后可以查看这个日志，我这里崩溃部分的日志是这样的（而且每次崩溃都一样）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">========== OUTPUTING STACK TRACE ==================</span><br><span class="line"></span><br><span class="line">0x00007FFD006892BB (AkSoundEngine) AK::MemoryMgr::Term</span><br><span class="line">0x00007FFD006881FE (AkSoundEngine) AK::MemoryMgr::Free</span><br><span class="line">0x00007FFD005A8F98 (AkSoundEngine) AK::SoundEngine::Term</span><br><span class="line">  ERROR: SymGetSymFromAddr64, GetLastError: &#x27;试图访问无效的地址。</span><br><span class="line"></span><br><span class="line">&#x27; (Address: 00007FFD00595277)</span><br><span class="line">0x00007FFD00595277 (AkSoundEngine) (function-name not available)</span><br><span class="line">0x000000005F51B0BD (Mono JIT Code) (wrapper managed-to-native) AkSoundEnginePINVOKE:CSharp_Term ()</span><br><span class="line">0x000000005F51AF9A (Mono JIT Code) [C:\WorkSpace\Client\Assets\Wwise\Deployment\API\Generated\Windows\AkSoundEngine_Windows.cs:2331] AkSoundEngine:Term () </span><br><span class="line">0x000000005F5190A8 (Mono JIT Code) [C:\WorkSpace\Client\Assets\Wwise\Deployment\Components\AkTerminator.cs:107] AkTerminator:Terminate () </span><br><span class="line">0x000000005F518925 (Mono JIT Code) [C:\WorkSpace\Client\Assets\Wwise\Deployment\Components\AkTerminator.cs:57] AkTerminator:OnApplicationQuit () </span><br><span class="line">0x0000000000D87472 (Mono JIT Code) (wrapper runtime-invoke) object:runtime_invoke_void__this__ (object,intptr,intptr,intptr)</span><br><span class="line">0x00007FFCD7A864D3 (mono) [c:\buildslave\mono\build\mono\mini\mini.c:4937] mono_jit_runtime_invoke </span><br><span class="line">0x00007FFCD79D8A2D (mono) [c:\buildslave\mono\build\mono\metadata\object.c:2623] mono_runtime_invoke </span><br><span class="line">0x0000000140A34E2C (Unity) scripting_method_invoke</span><br><span class="line">0x0000000140A287FA (Unity) ScriptingInvocation::Invoke</span><br><span class="line">0x00000001409F3D28 (Unity) MonoBehaviour::HandleNotifications</span><br><span class="line">0x00000001403BF961 (Unity) MessageHandler::HandleMessage</span><br><span class="line">0x00000001403C7634 (Unity) GameObject::SendMessageAny</span><br><span class="line">0x00000001407186D2 (Unity) SendMessageToEveryone</span><br><span class="line">0x0000000140720DBF (Unity) NotifyPlayerQuit</span><br><span class="line">0x00000001411F0FE5 (Unity) PlayerLoopController::ExitPlayMode</span><br><span class="line">0x00000001411F17AD (Unity) PlayerLoopController::SetIsPlaying</span><br><span class="line">0x00000001411F25F6 (Unity) Application::TickTimer</span><br><span class="line">0x00000001414198DF (Unity) MainMessageLoop</span><br><span class="line">0x000000014141B19C (Unity) WinMain</span><br><span class="line">0x0000000141E74068 (Unity) __tmainCRTStartup</span><br><span class="line">0x00007FFD21B47974 (KERNEL32) BaseThreadInitThunk</span><br><span class="line">0x00007FFD2401A271 (ntdll) RtlUserThreadStart</span><br><span class="line"></span><br><span class="line">========== END OF STACKTRACE ===========</span><br></pre></td></tr></table></figure>

<p>通过分析和查询资料可以看出崩溃和AkSoundEngine有关系，Wwise是Audiokinetic开发的游戏互动音频引擎，支持Unity和Unreal等游戏引擎，AkSoundEngine就是Wwise中的东西。</p>
<p>在Unity中，运行游戏的时候会创建AkInitializer，退出游戏的时候会销毁。AkInitializer使用的是Lazy模式的初始化，通过设置断点发现编辑器的游戏预览退出的的时候，偶尔会在MonoBehaviour的OnDisable()方法中重新创建的音频管理器对象，也就是说有了两个，但是这种方式又是Audiokinetic允许的。因此，退出游戏的时候可能销毁的不是一开始创建的那个音频管理器对象，就会崩溃。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>也就是说，我们要保证销毁器销毁的是创建的那个对象，所以要修改AKTerminator.cs这个文件，在里面加上一个判断：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="comment">//The sound engine was not terminated normally.  Make this instance the one that will manage termination.</span></span><br><span class="line">    <span class="comment">//This happen when Unity resets everything when a script changes.</span></span><br><span class="line">    <span class="keyword">if</span> (ms_Instance == <span class="literal">null</span> &amp;&amp; AkSoundEngine.IsInitialized())</span><br><span class="line">    &#123;</span><br><span class="line">    	ms_Instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加上<code>OnEnable</code>这个函数之后果然没有再崩溃了。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用这个解决方法可以解决大部分情况下的崩溃，但是如果在游戏运行时修改代码，然后再关闭游戏依然会导致崩溃，似乎是必现。</p>
<p>参考链接：<a href="https://www.audiokinetic.com/qa/3473/unity-crash-when-exit-application-editor-using-akterminator?show=3609#a3609"><a href="https://www.audiokinetic.com/qa/3473/unity-crash-when-exit-application-editor-using-akterminator"><strong>unity crash when exit the application in play-in-editor using AkTerminator.cs</strong></a></a></p>
]]></content>
  </entry>
  <entry>
    <title>User-based KNN with LibRec</title>
    <url>/2018/06/09/Old-User-based-KNN-with-LibRec/</url>
    <content><![CDATA[<p>本项目使用领先的推荐系统Java开源工具库<code>LibRec</code>完成，实现其中的<code>UserKNN</code>算法，并使用<code>struts2</code>框架完成简单的网页展示。</p>
<span id="more"></span>

<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul>
<li>JDK 1.7</li>
<li>TomCat 7.0</li>
<li>struts 2.3.34</li>
<li>LibRec 2.0</li>
<li>BootStrap 3.3.7</li>
</ul>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>本项目的算法使用的是基于协同过滤的<code>User-based KNN</code>算法。基本思想就是，如果你喜欢某几部电影，而另外一个人也喜欢这几部电影，并且他还喜欢A电影，则你也很有可能喜欢A电影。</p>
<p>因此算法的原理就是先找到与目标用户相似的用户集合，然后找到集合中用户喜欢的并且目标用户没有评价过的物品推荐给他。</p>
<h4 id="计算相似度"><a href="#计算相似度" class="headerlink" title="计算相似度"></a>计算相似度</h4><p>该算法通常使用Jaccard公式或余弦相似度计算两个用户之间的相似度。</p>
<p><strong>Jaccard:</strong><br>$$<br>W_{uv}&#x3D;\frac{ |N(u)\cap N(v)| }{ |N(u)\cup N(v)| }<br>$$</p>
<p><strong>余弦相似度:</strong><br>$$<br>W_{uv}&#x3D;\frac{ |N(u)\cap N(v)| } {\sqrt { |N(u)\cup N(v)| }}<br>$$</p>
<p>假设用户<strong>ABCD</strong>与物品<strong>abcde</strong>的关系如下：</p>
<table>
<thead>
<tr>
<th>A</th>
<th>a</th>
<th>b</th>
<th>d</th>
</tr>
</thead>
<tbody><tr>
<td>B</td>
<td>a</td>
<td>c</td>
<td></td>
</tr>
<tr>
<td>C</td>
<td>b</td>
<td>e</td>
<td></td>
</tr>
<tr>
<td>B</td>
<td>c</td>
<td>d</td>
<td>e</td>
</tr>
</tbody></table>
<p>首先建立“物品—用户”的倒排表 ：</p>
<table>
<thead>
<tr>
<th>a</th>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody><tr>
<td>b</td>
<td>A</td>
<td>C</td>
</tr>
<tr>
<td>c</td>
<td>B</td>
<td>D</td>
</tr>
<tr>
<td>d</td>
<td>A</td>
<td>D</td>
</tr>
<tr>
<td>e</td>
<td>C</td>
<td>D</td>
</tr>
</tbody></table>
<p>然后对于每个物品，喜欢他的用户，两两之间相同物品加1：</p>
<table>
<thead>
<tr>
<th></th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>B</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>C</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>D</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<p>接着计算余弦相似度：</p>
<table>
<thead>
<tr>
<th></th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>0</td>
<td>$$\frac 1 {\sqrt {3\times 2}}$$</td>
<td>$$\frac 1 {\sqrt {3\times 2}}$$</td>
<td>$$\frac 1 {\sqrt {3\times 3}}$$</td>
</tr>
<tr>
<td>B</td>
<td>$$\frac 1 {\sqrt {3\times 2}}$$</td>
<td>0</td>
<td>0</td>
<td>$$\frac 1 {\sqrt {3\times 2}}$$</td>
</tr>
<tr>
<td>C</td>
<td>$$\frac 1 {\sqrt {3\times 2}}$$</td>
<td>0</td>
<td>0</td>
<td>$$\frac 1 {\sqrt {3\times 2}}$$</td>
</tr>
<tr>
<td>D</td>
<td>$$\frac 1 {\sqrt {3\times 3}}$$</td>
<td>$$\frac 1 {\sqrt {3\times 2}}$$</td>
<td>$$\frac 1 {\sqrt {3\times 2}}$$</td>
<td>0</td>
</tr>
</tbody></table>
<p>####推荐物品</p>
<p>首先从矩阵中找出与目标用户 $$u $$最相似的 K 个用户，用集合$$ S(u, K) $$表示，将$$ S $$中用户喜欢的物品全部提取出来，并去除$$ u$$ 已经喜欢的物品。</p>
<p>对于每个候选物品$$ i $$，用户$$ u $$对它感兴趣的程度用如下公式计算：<br>$$<br>p(u,i)&#x3D;\sum_{v\in S(u,K)\cap N(i)}{w_{uv} \times r_{vi}}<br>$$<br>其中$$r_{vi}$$表示用户$$ v $$对$$ i$$ 的喜欢程度，在本例中都是为 1，在一些需要用户给予评分的推荐系统中，则要代入用户评分。</p>
<p>这样，就能计算出任意目标用户对其他物品可能的的喜欢程度了，按照得分排序就能得到推荐的物品列表。</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>导入项目到eclipse中，部署到TomCat即可。</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p><strong>Datasets:</strong> </p>
<p>filmtrust ratings</p>
<p><strong>librec.properties:</strong> </p>
<ul>
<li><strong>data:</strong></li>
</ul>
<p>数据目录是<code>dfs.data.dir=/data</code> ，该目录放在<code>WebContent/WEB-INF/classes/</code>下，其中数据文件是<code>data.input.path=ratings.txt</code>，因为filmtrust的数据格式为User-Item-Rating，所以librec设置中数据的格式为<code>data.column.format=UIR</code> </p>
<p>因为放在了classes下面，所以通过tomcat运行项目时相对路径是没有问题的，可以直接运行。</p>
<ul>
<li><strong>Splitter:</strong></li>
</ul>
<p>LibRec中含有数据的划分方式共五类, 将数据集根据一定比例划分为训练集与测试集(及验证集), 留出其中一个作为验证, 给定N个作为验证, K折交叉验证, 以及测试数据集与训练数据集等五种方式. 其中部分分割方式又含有基于user或item等其他分割方式。综合考虑之后使用<code>ratio</code>按照比例划分为训练集与测试集，其中训练集比例设置为0.8 。</p>
<ul>
<li><strong>Evaluator:</strong></li>
</ul>
<p><code>RecommenderEvaluator</code>接口用于实现对特定算法的评估. 目前实现对于ranking的评估器有AUC, Precision, Recall等十类评估器. 对于rating实现评估器有MAE, MPE, MSE, RMSE这四类。由于本项目使用的是rating方式，所以使用了<code>RMSE</code>评估器。</p>
<h2 id="Running"><a href="#Running" class="headerlink" title="Running"></a>Running</h2><p><strong>Web:</strong></p>
<p><img src="https://i.loli.net/2019/09/11/s2cYet4brkK5fm9.jpg" alt="881f8721ly1fs55q3tuzyj20re0kitd2.jpg"></p>
<p><strong>Console:</strong></p>
<p><img src="https://i.loli.net/2019/09/11/hfvzpntQsFMRZg2.jpg" alt="881f8721ly1fs55pkrpf4j20l4078dga.jpg"></p>
<p>web结果中可以看到推荐给用户1的电影，console中可以看到RMSE均方标准差以及推荐的数据。</p>
<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><ul>
<li><p><strong>GetRecAction.java</strong></p>
<p>struts框架的Action类，用于获取用户输入的id，存储由<code>GetRecItem.java</code>推荐的电影表。</p>
</li>
<li><p><strong>GetRecItem.java</strong></p>
<p>实现LibRec的推荐算法功能的类，参考librec官网的文档。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Web server with thread pool</title>
    <url>/2017/06/30/Old-Web-server-with-thread-pool/</url>
    <content><![CDATA[<blockquote>
<p>The goals of this project are:</p>
<ul>
<li>to understand the basic elements of the World Wide Web and its protocols.</li>
<li>to learn how real-world multi-threaded servers are built.</li>
<li>to apply scheduling algorithms to a working system.</li>
<li>gain experience in reading and modifying existing code.</li>
</ul>
</blockquote>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * John</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClient</span> &#123;</span><br><span class="line">	<span class="comment">/* 设置端口为8888 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println( <span class="string">&quot;请输入你要得到的文件：&quot;</span> );</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">scanner</span>		<span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>( System.in );</span><br><span class="line">			<span class="type">String</span>	<span class="variable">filename</span>	<span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">			<span class="comment">/* 连接服务器 */</span></span><br><span class="line">			<span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>( <span class="string">&quot;localhost&quot;</span>, port );</span><br><span class="line">			<span class="comment">/* 发送请求头 */</span></span><br><span class="line">			<span class="type">PrintStream</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>( s.getOutputStream() );</span><br><span class="line">			writer.println( <span class="string">&quot;GET /&quot;</span> + filename + <span class="string">&quot; HTTP/1.1&quot;</span> );</span><br><span class="line">			writer.println( <span class="string">&quot;Host:localhost&quot;</span> );</span><br><span class="line">			writer.println( <span class="string">&quot;connection:keep-alive&quot;</span> );</span><br><span class="line">			writer.println();</span><br><span class="line">			writer.flush();</span><br><span class="line">			<span class="comment">/* 发送请求体 */</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 接受响应状态 响应成功（状态码200）--保存资源到本地磁盘</span></span><br><span class="line"><span class="comment">			 * 跳过响应中的前四行，开始读取相应的数据</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="type">InputStream</span>	<span class="variable">in</span>	<span class="operator">=</span> s.getInputStream();</span><br><span class="line">			<span class="type">BufferedReader</span>	<span class="variable">reader</span>	<span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>( <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>( in ) );</span><br><span class="line">			<span class="type">String</span>		<span class="variable">firstLineOfResponse</span>	<span class="operator">=</span> reader.readLine(); <span class="comment">/* HTTP/1.1 200 ok */</span></span><br><span class="line">			<span class="type">String</span>		<span class="variable">secondLineOfResponse</span> <span class="operator">=</span> reader.readLine(); <span class="comment">/* Content-Type:text/html */</span></span><br><span class="line">			<span class="type">String</span>		<span class="variable">threeLineOfResponse</span>	<span class="operator">=</span> reader.readLine(); <span class="comment">/* Content-Length: */</span></span><br><span class="line">			<span class="type">String</span>		<span class="variable">fourLineOfResponse</span>	<span class="operator">=</span> reader.readLine(); <span class="comment">/* 空行 */</span></span><br><span class="line"></span><br><span class="line">			System.out.println( firstLineOfResponse );</span><br><span class="line">			System.out.println( secondLineOfResponse );</span><br><span class="line">			System.out.println( threeLineOfResponse );</span><br><span class="line">			System.out.println( fourLineOfResponse );</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> ( firstLineOfResponse.endsWith( <span class="string">&quot;OK&quot;</span> ) )</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				 * 读取响应文件，保存数据</span></span><br><span class="line"><span class="comment">				 * success</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line">				<span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">				<span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>( <span class="string">&quot;d:/client/&quot;</span> + filename );</span><br><span class="line">				<span class="type">int</span>		<span class="variable">len</span>	<span class="operator">=</span> in.read( b );</span><br><span class="line">				<span class="keyword">while</span> ( len != -<span class="number">1</span> )</span><br><span class="line">				&#123;</span><br><span class="line">					out.write( b, <span class="number">0</span>, len );</span><br><span class="line">					len = in.read( b );</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println( <span class="string">&quot;数据传输结束&quot;</span> );</span><br><span class="line">				out.close();</span><br><span class="line">				in.close();</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				 * 响应失败（状态码404）</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line">				<span class="type">StringBuffer</span>	<span class="variable">result</span>	<span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">				<span class="type">String</span>		<span class="variable">line</span>	<span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">				<span class="keyword">while</span> ( (line = reader.readLine())!= <span class="literal">null</span> )</span><br><span class="line">				&#123;</span><br><span class="line">					result.append( line );</span><br><span class="line">				&#125;</span><br><span class="line">				reader.close();</span><br><span class="line">				System.out.println( result );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.PriorityBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * John</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> port=<span class="number">8080</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    	</span><br><span class="line">        ServerSocket ss=<span class="literal">null</span>;</span><br><span class="line">        Socket s=<span class="literal">null</span>;</span><br><span class="line">        ThreadPoolExecutor threadPool=<span class="literal">null</span>;</span><br><span class="line">        String Mode=<span class="string">&quot;FCFS&quot;</span>;</span><br><span class="line">        <span class="comment">//String Mode=&quot;SFF&quot;;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ss=<span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">            <span class="keyword">if</span>(Mode==<span class="string">&quot;FCFS&quot;</span>)&#123;</span><br><span class="line">            	threadPool = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>,  </span><br><span class="line">                        TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">PriorityBlockingQueue</span>&lt;Runnable&gt;(<span class="number">3</span>),  </span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());  </span><br><span class="line">            &#125;<span class="keyword">if</span>(Mode==<span class="string">&quot;SFF&quot;</span>)&#123;</span><br><span class="line">            	threadPool = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>,  </span><br><span class="line">                        TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">3</span>),  </span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy()); </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            	<span class="comment">//接收用户连接,触发accept()</span></span><br><span class="line">                s=ss.accept();</span><br><span class="line">                threadPool.execute(<span class="keyword">new</span> <span class="title class_">TaskThread</span>(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * John extends Thread </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>, Comparable&lt;TaskThread&gt;&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">Socket</span>		<span class="variable">socket</span>	<span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">BufferedReader</span>	<span class="variable">reader</span>	<span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">PrintWriter</span>	<span class="variable">writer</span>	<span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">long</span> priority;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">TaskThread</span><span class="params">(Socket s)</span></span><br><span class="line">	&#123;</span><br><span class="line">		socket = s;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">			reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>( <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>( socket.getInputStream() ) );</span><br><span class="line"></span><br><span class="line">			<span class="type">String</span>	<span class="variable">firstlineofrequest</span>	<span class="operator">=</span> reader.readLine();</span><br><span class="line">			<span class="type">String</span>	<span class="variable">uri</span>	<span class="operator">=</span> firstlineofrequest.split( <span class="string">&quot; &quot;</span> )[<span class="number">1</span>];</span><br><span class="line">			writer = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>( out );</span><br><span class="line"></span><br><span class="line">			<span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>( <span class="string">&quot;d:/server/&quot;</span> + uri );</span><br><span class="line">			<span class="type">long</span> fileLength=f.length();</span><br><span class="line">			setPriority(fileLength);</span><br><span class="line">			<span class="keyword">if</span> ( f.exists() )</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>( <span class="string">&quot;d:/server/&quot;</span> + uri );</span><br><span class="line">				writer.println( <span class="string">&quot;HTTP/1.1 200 OK&quot;</span> );</span><br><span class="line">				writer.flush();</span><br><span class="line">				<span class="keyword">if</span> ( uri.endsWith( <span class="string">&quot;.html&quot;</span> ) )</span><br><span class="line">				&#123;</span><br><span class="line">					writer.println( <span class="string">&quot;Content-Type:text/html&quot;</span> );</span><br><span class="line">					writer.flush();</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span> ( uri.endsWith( <span class="string">&quot;.jpg&quot;</span> ) )</span><br><span class="line">				&#123;</span><br><span class="line">					writer.println( <span class="string">&quot;Content-type:image/jpg&quot;</span> );</span><br><span class="line">					writer.flush();</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					writer.println( <span class="string">&quot;Content-type:application/octet-stream&quot;</span> );</span><br><span class="line">					writer.flush();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">/* 读取剩下三行 */</span></span><br><span class="line">				<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ )</span><br><span class="line">				&#123;</span><br><span class="line">					reader.readLine();</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				<span class="comment">/*有文件 */</span></span><br><span class="line">				writer.println( <span class="string">&quot;Content-length:&quot;</span> + file.available() );</span><br><span class="line">				writer.println(); <span class="comment">/* 根据http协议，先发一个空行 */</span></span><br><span class="line">				writer.flush();</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep( <span class="number">1000</span> );</span><br><span class="line">				&#125; <span class="keyword">catch</span> ( InterruptedException e ) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">				<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">				len = file.read( b );</span><br><span class="line">				<span class="keyword">while</span> ( len != -<span class="number">1</span> )</span><br><span class="line">				&#123;</span><br><span class="line">					out.write( b, <span class="number">0</span>, len );</span><br><span class="line">					System.out.println( <span class="string">&quot;1024&quot;</span> );</span><br><span class="line">					len = file.read( b );</span><br><span class="line">					out.flush();</span><br><span class="line">				&#125;</span><br><span class="line">				out.close();</span><br><span class="line">			&#125;<span class="keyword">else</span>  &#123;</span><br><span class="line">				writer.println( <span class="string">&quot;HTTP/1.1 404 Not Found&quot;</span> );</span><br><span class="line">				writer.println( <span class="string">&quot;Content-Type:text/plain&quot;</span> );</span><br><span class="line">				writer.println( <span class="string">&quot;Content-Length:20&quot;</span> );</span><br><span class="line">				writer.println();</span><br><span class="line">				writer.println( <span class="string">&quot;Can Not Found File&quot;</span> );</span><br><span class="line">				writer.flush();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> ( IOException e ) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">long</span> fileLength)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.priority=fileLength;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getPriority</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.priority;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(TaskThread o)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> priority &lt; o.getPriority() ? <span class="number">1</span> : (priority &gt; o.getPriority() ? -<span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Windows10安装tensorflow</title>
    <url>/2018/05/15/Old-Windows10-install-tensorflow/</url>
    <content><![CDATA[<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ol>
<li>Python3.X</li>
<li>Windows10</li>
</ol>
<h3 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GPU版本</span></span><br><span class="line">pip3 install --upgrade tensorflow-gpu</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU版本</span></span><br><span class="line">pip3 install --upgrade tensorflow</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：如果显卡是英伟达<strong>支持CUDA</strong>的独显就安装GPU版本</p>
<p><a href="https://developer.nvidia.com/cuda-gpus">查询是否支持CUDA</a></p>
<p>我安装GPU版本成功但是没效果，只能安装CPU版本了</p>
</blockquote>
<span id="more"></span>

<h3 id="安装CUDA和cuDNN"><a href="#安装CUDA和cuDNN" class="headerlink" title="安装CUDA和cuDNN"></a>安装CUDA和cuDNN</h3><p>如果是CPU版本就跳过这个步骤</p>
<h4 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h4><p><a href="https://developer.nvidia.com/cuda-downloads">下载地址</a> </p>
<blockquote>
<p> 可选在线安装版本和离线版本</p>
</blockquote>
<p>安装完成后CMD输入<code>nvcc - </code>，出现版本信息即可</p>
<h4 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h4><p><a href="https://developer.nvidia.com/rdp/cudnn-download">下载地址</a></p>
<p>下载完成是一个压缩包，解压到任意目录即可。</p>
<p>然后把目录下的<code>bin</code>目录路径添加到环境变量的<code>path</code>里</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>随便写个程序测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello = tf.constant(<span class="string">&#x27;Hello, TensorFlow!&#x27;</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="built_in">print</span>(sess.run(hello))</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Windows10下的AlphaPose配置教程</title>
    <url>/2019/02/10/Old-Windows10-with-AlphaPose/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>AlphaPose是一个精确的多人姿态估计器，它在COCO、MPII等数据集上效果显著高于其他已开源系统，而且同时支持Linux和Windows，并且是交大MVIG组开发的，所以来尝试一下。另外AlphaPose还提供了基于PyTorch平台的源码，可以说很方便使用了，并且安装教程也很详细。</p>
<span id="more"></span>

<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><ol>
<li><p>安装Git: <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
</li>
<li><p>安装Python3.6 or 3.7: <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p>
</li>
<li><p>安装CUDA 9.0 （必须是<a href="https://developer.nvidia.com/cuda-gpus">受支持的N卡</a>） : <a href="https://developer.nvidia.com/cuda-90-download-archive">https://developer.nvidia.com/cuda-90-download-archive</a></p>
</li>
<li><p>根据Python、CUDA版本安装PyTorch 0.4.1: <a href="https://pytorch.org/get-started/previous-versions/">https://pytorch.org/get-started/previous-versions/</a></p>
<p>在Git Bash中输如下命令即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install https://download.pytorch.org/whl/cu90/torch-0.4.1-cp36-cp36m-win_amd64.whl</span><br><span class="line">pip3 install torchvision</span><br></pre></td></tr></table></figure>



<p>如果pip下载过慢可以先用IDM等下载工具自己下载whl文件然后用pip安装本地的whl：</p>
<p>Python3.6：<a href="https://download.pytorch.org/whl/cu90/torch-0.4.1-cp36-cp36m-win_amd64.whl">https://download.pytorch.org/whl/cu90/torch-0.4.1-cp36-cp36m-win_amd64.whl</a></p>
<p>Python3.7：<a href="https://download.pytorch.org/whl/cu90/torch-0.4.1-cp37-cp37m-win_amd64.whl">https://download.pytorch.org/whl/cu90/torch-0.4.1-cp37-cp37m-win_amd64.whl</a></p>
</li>
<li><p>下载最新的win-64&#x2F;intel-openmp bz2文件 <a href="https://anaconda.org/anaconda/intel-openmp/files">https://anaconda.org/anaconda/intel-openmp/files</a> 把压缩包中Library\bin目录下的dll文件放到一个电脑的某个文件夹中，然后将这个文件夹加入环境变量。（推荐放到C:\Users\Your user name\bin）</p>
</li>
<li><p>按照官方的安装方法git clone PyTorch版本项目，然后pip install -r requirements.txt即可</p>
<p>如果提示torch版本不对，就把requirements.txt中的torch版本号改成你当前使用的版本号。</p>
</li>
<li><p>手动下载Model文件: <strong>duc_se.pth</strong> (2018&#x2F;08&#x2F;30) (<a href="https://drive.google.com/open?id=1OPORTWB2cwd5YTVBX-NE8fsauZJWsrtW">Google Drive</a> | <a href="https://pan.baidu.com/s/15jbRNKuslzm5wRSgUVytrA">Baidu pan</a>), <strong>yolov3-spp.weights</strong>(<a href="https://drive.google.com/open?id=1D47msNOOiJKvPOXlnpyzdKA3k6E97NTC">Google Drive</a> | <a href="https://pan.baidu.com/s/1Zb2REEIk8tcahDa8KacPNA">Baidu pan</a>). 分别放到 <code>./models/sppe</code> 和 <code>./models/yolo</code> 文件夹下</p>
</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以使用webcam为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 webcam_demo.py --vis</span><br></pre></td></tr></table></figure>

<p>使用 <code>demo.py</code> 和 <code>video_demo.py</code> 时需要开启 <code>--sp</code> 参数，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 demo.py --indir <span class="variable">$&#123;img_directory&#125;</span> --outdir examples/res --sp</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>识别结果还可以</p>
<p><img src="https://i.loli.net/2019/02/20/5c6d003fda874.jpg" alt="3.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>Docker-compose搭建weibo-rss订阅微博</title>
    <url>/2019/10/24/Old-build-weibo-rss-with-docker-compose/</url>
    <content><![CDATA[<p><a href="https://github.com/zgq354/weibo-rss">weibo-rss</a>是一个把微博转为rss订阅的爬虫，使用node.js编写，会定时爬取指定微博账号的首页最新10条，可以完整保留图片、视频和超链接。支持Docker-compose一键部署，很方便。</p>
<span id="more"></span>

<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>下面以Centos为例，其他系统可以参考Docker和compose各自的官网</p>
<h3 id="Docker-CE"><a href="#Docker-CE" class="headerlink" title="Docker-CE"></a>Docker-CE</h3><p>官网：<a href="https://docs.docker.com/v17.09/engine/installation/">https://docs.docker.com/v17.09/engine/installation/</a></p>
<p>删除旧版本docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<p>设置稳定版仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>安装最新版Docker-CE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>

<p>启动Docker-CE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<p>升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y upgrade</span><br></pre></td></tr></table></figure>

<p>卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<h3 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h3><p>官网：<a href="https://docs.docker.com/compose/install/#prerequisites">https://docs.docker.com/compose/install/#prerequisites</a></p>
<p>下载最新稳定版Docker Compose</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>添加可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>测试安装成功没有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br><span class="line">docker-compose version 1.24.1, build 1110ad01</span><br></pre></td></tr></table></figure>

<p>如果没成功看看是不是路径错了，可以创建软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="安装weibo-rss"><a href="#安装weibo-rss" class="headerlink" title="安装weibo-rss"></a>安装weibo-rss</h2><p>先cd到你希望安装的目录然后克隆weibo-rss的仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zgq354/weibo-rss.git</span><br><span class="line"><span class="built_in">cd</span> weibo-rss</span><br></pre></td></tr></table></figure>

<p>一键构建和启动( <code>-d</code> 参数代表作为daemon后台运行)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>停止运行使用<code>docker-compose stop</code></p>
<p>需要更新到最新的话可以参考以下步骤</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> weibo-rss</span><br><span class="line">git pull</span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure>

<p>git pull 为拉取最新代码，<code>docker-compose</code> 命令的 <code>--build</code> 参数代表重新构建容器</p>
<p>启动之后rss会在localhost的3000端口运行，只能在linux本地访问，需要外网访问还需要用nginx反向代理</p>
<p>在nginx的conf中的server{}里如下修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:3000/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样外网访问example.com的时候就会看到linux内网的3000端口的weibo-rss了</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>微博现在限制了部分用户的访问权限，有些用户只能在登录状态下被访问，因此weibo-rss无法爬取这类用户的微博。</p>
]]></content>
  </entry>
  <entry>
    <title>混沌分形作业</title>
    <url>/2018/05/06/Old-chaos-and-fractal/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote>
<p><strong>1.</strong> 当前网络上谣言的传播对社会造成了很多不利的影响，请根据所掌握的网络科学知识，在当今互联网结构上，给出一种舆情监控的方法，进而给出抑制谣言传播的办法。<br>不少于2页A4纸，有算法设计与分析，给出参考文献。</p>
</blockquote>
<blockquote>
<p><strong>2.</strong>  研究春运期间人口流动规律，对于交通运输部门的合理配置运力，提高出行效率具有重要意义。<br>请以复杂网络理论为视角，对春运期间人口流量进行网络结构及人口流动分析，给出人口流动规律。<br>不少于2页A4纸，有算法设计与分析，给出参考文献。</p>
</blockquote>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>hexo安装过程</title>
    <url>/2018/03/30/Old-hexo-install/</url>
    <content><![CDATA[<ul>
<li><p>安装Node.js</p>
</li>
<li><p>安装Git</p>
</li>
<li><p>新建blog文件夹，<code>Git bash here</code>.</p>
</li>
<li><p><code>$ npm install -g hexo-cli</code> or <code>$ npm i -g hexo</code></p>
</li>
<li><p>Done!</p>
</li>
</ul>
<span id="more"></span>]]></content>
  </entry>
  <entry>
    <title>用朴素贝叶斯根据姓名判断性别</title>
    <url>/2018/05/17/Old-judge-name-with-native-bayes/</url>
    <content><![CDATA[<h3 id="条件概率与贝叶斯定理"><a href="#条件概率与贝叶斯定理" class="headerlink" title="条件概率与贝叶斯定理"></a>条件概率与贝叶斯定理</h3><p>对于事件A和B，当B发生的情况下，A发生的条件概率为<br>$$<br>P(A|B) &#x3D; \frac{P(AB)}{P(B)}.<br>$$<br>如果把$$P(AB)$$表示为$$P(B|A)P(A)$$，那么 就有<br>$$<br>P(A|B) &#x3D; \frac{P(B|A)P(A)}{P(B)}.<br>$$</p>
<span id="more"></span>

<h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><p>朴素贝叶斯是一个基于贝叶斯定理的分类算法，<strong>其基本假设是所有特征是相互独立的</strong>。</p>
<p> 举个例子来说，有一个二元分类问题，每个样本只有两个二元特征$$X1$$和$$X2$$。若已知一个样本$$(X1&#x3D;1,X2&#x3D;0)$$，我们要预测它的标签为1的概率，就是等价于去计算<br>$$<br>P(Y&#x3D;1|X_1&#x3D;1,X_2&#x3D;0)<br>$$<br>根据贝叶斯定理，可以得到<br>$$<br>P(Y&#x3D;1|X_1&#x3D;1,X_2&#x3D;0)&#x3D;\frac{P(Y&#x3D;1)P(X_1&#x3D;1,X_2&#x3D;0|Y&#x3D;1)}{P(X_1&#x3D;1, X_2&#x3D;0)}<br>$$</p>
<h3 id="拉普拉斯光滑"><a href="#拉普拉斯光滑" class="headerlink" title="拉普拉斯光滑"></a>拉普拉斯光滑</h3><p>“我爱机器学习”中有七个字<br>“我”的频率为：<br>$$<br>f(我)&#x3D;\frac 1 7<br>$$<br>“学”的频率为：<br>$$<br>f(学)&#x3D;\frac 2 7<br>$$<br>拉普拉斯光滑的公式为:<br>$$<br>g(x)&#x3D;\frac{n_x+\alpha}{l+\alpha c}<br>$$</p>
<p>其中$$n_x$$是单词$$x$$出现的次数，$$l$$是句子的长度，$$c$$是句子中不同词汇的个数，$$\alpha$$是拉普拉斯光滑的光滑系数，这个是自行设定的。</p>
<p>上面的句子里一共七个字，五个不同的字。假设我们选定$$\alpha$$&#x3D;1: </p>
]]></content>
  </entry>
  <entry>
    <title>操作系统实验</title>
    <url>/2017/07/01/Old-os-homework/</url>
    <content><![CDATA[<p>记录操作系统课程的几个实验</p>
<h4 id="实验一-进程的同步与互斥"><a href="#实验一-进程的同步与互斥" class="headerlink" title="实验一_进程的同步与互斥"></a>实验一_进程的同步与互斥</h4><blockquote>
<p>通过学习和分析基础例子程序，使用windows进程和线程编程（也可以采用Java 或Unix&#x2F;Linux的POSIX线程编程）实现一个简单的生产者&#x2F;消费者问题的程序。</p>
</blockquote>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::mutex mtx;<span class="comment">//锁</span></span><br><span class="line"><span class="built_in">std</span>::condition_variable cv;<span class="comment">//条件变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cargo = <span class="number">0</span>;<span class="comment">//货物数</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">shipment_available</span><span class="params">()</span><span class="comment">//是否有货</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> cargo != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消费者线程.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">consumer</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::unique_lock &lt;<span class="built_in">std</span>::mutex&gt; lk(mtx);</span><br><span class="line">        cv.wait(lk, shipment_available);<span class="comment">//若无货物被阻塞直到被唤醒</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;消费了&quot;</span>&lt;&lt; cargo &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        cargo = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">250</span>));<span class="comment">//睡眠250毫秒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::thread <span class="title function_">consumer_thread</span><span class="params">(consumer, <span class="number">10</span>)</span>; <span class="comment">// 建立消费者线程.</span></span><br><span class="line">    <span class="comment">// 主线程为生产者线程, 生产 10 个物品.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (shipment_available())</span><br><span class="line">            <span class="built_in">std</span>::this_thread::yield();<span class="comment">//放弃本线程的CPU时间片，允许其他线程运行</span></span><br><span class="line">        <span class="built_in">std</span>::unique_lock &lt;<span class="built_in">std</span>::mutex&gt; lk(mtx);</span><br><span class="line">        cargo = i + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;生产了&quot;</span>&lt;&lt; cargo &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        cv.notify_one();<span class="comment">//唤醒等待线程</span></span><br><span class="line">        <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">100</span>));<span class="comment">//睡眠100毫秒</span></span><br><span class="line">    &#125;</span><br><span class="line">    consumer_thread.join();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实验二-处理机调度"><a href="#实验二-处理机调度" class="headerlink" title="实验二_处理机调度"></a>实验二_处理机调度</h4><blockquote>
<p>设计一个按优先权调度算法实现处理器调度的程序</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	<span class="type">char</span>	name[<span class="number">10</span>]; <span class="comment">/*进程名*/</span></span><br><span class="line">	<span class="type">int</span>	runtime; <span class="comment">/*运行时间*/</span></span><br><span class="line">	<span class="type">int</span>	priority; <span class="comment">/*优先级*/</span></span><br><span class="line">	<span class="type">char</span> state; <span class="comment">/*状态*/</span></span><br><span class="line">	PCB	* next; <span class="comment">/*指针*/</span></span><br><span class="line">	<span class="type">void</span> <span class="title function_">status</span><span class="params">()</span> <span class="type">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;runtime&lt;&lt;<span class="string">&quot;\t\t&quot;</span>&lt;&lt;priority&lt;&lt;<span class="string">&quot;\t\t&quot;</span>&lt;&lt;state&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCBSortCriterion</span> &#123;</span> <span class="comment">/*优先准则*/</span></span><br><span class="line">public:</span><br><span class="line">	<span class="type">bool</span> <span class="title function_">operator</span><span class="params">()</span><span class="params">( <span class="type">const</span> PCB &amp; p1, <span class="type">const</span> PCB &amp; p2 )</span> <span class="type">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(p1.priority &lt; p2.priority);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> number=<span class="number">5</span>;<span class="comment">/* 进程数 */</span></span><br><span class="line">	PCB	* pcb	= new PCB[number];</span><br><span class="line">	PCB	* p1	= new PCB[number];</span><br><span class="line">	PCB	p;</span><br><span class="line">	<span class="type">int</span>	i;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NAME,RUNTIME,PRIORITY&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= number - <span class="number">1</span>; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; pcb[i].name;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; pcb[i].runtime;</span><br><span class="line">		pcb[i].state=<span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; pcb[i].priority;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">typedef</span> <span class="built_in">priority_queue</span>&lt;PCB, <span class="built_in">vector</span>&lt;PCB&gt;, PCBSortCriterion&gt; pQueue;</span><br><span class="line"></span><br><span class="line">	pQueue q,temp;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ( <span class="type">int</span> j = <span class="number">0</span>; j &lt;= number - <span class="number">1</span>; j++ ) <span class="comment">/*建立优先队列 */</span></span><br><span class="line">	&#123;</span><br><span class="line">		q.push( pcb[j] );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;初始状态:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NAME\t&quot;</span>&lt;&lt;<span class="string">&quot;NEEDTIME\t&quot;</span>&lt;&lt;<span class="string">&quot;PRIORITY\t&quot;</span> &lt;&lt;<span class="string">&quot;STATE\t&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	temp = q;</span><br><span class="line">	<span class="keyword">while</span> ( !temp.empty() )</span><br><span class="line">	&#123;</span><br><span class="line">		p = temp.top();</span><br><span class="line">		p.status();</span><br><span class="line">		temp.pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> n= <span class="number">0</span>,m= <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> ( !q.empty() )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;CPUTIME:&quot;</span> &lt;&lt; ++n&lt;&lt;<span class="string">&quot;   &quot;</span>;</span><br><span class="line">		p = q.top();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; q.top().name &lt;&lt; <span class="string">&quot;!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NAME\t&quot;</span>&lt;&lt;<span class="string">&quot;NEEDTIME\t&quot;</span>&lt;&lt;<span class="string">&quot;PRIORITY\t&quot;</span> &lt;&lt;<span class="string">&quot;STATE\t&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		p.runtime	-= <span class="number">1</span>;</span><br><span class="line">		p.priority	-= <span class="number">1</span>;</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">if</span> ( p.runtime != <span class="number">0</span> ) <span class="comment">/*继续入队*/</span></span><br><span class="line">		&#123;</span><br><span class="line">			q.push( p );</span><br><span class="line">		&#125;<span class="keyword">else</span>  &#123;</span><br><span class="line">			p.state = <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">			p1[m++] = p;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		temp = q;</span><br><span class="line">		<span class="keyword">while</span> ( !temp.empty() )</span><br><span class="line">		&#123;</span><br><span class="line">			p = temp.top();</span><br><span class="line">			p.status();</span><br><span class="line">			temp.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ( m &gt; <span class="number">0</span> )    <span class="comment">/* 输出完成信息 */</span></span><br><span class="line">			<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= m - <span class="number">1</span>; i++ )</span><br><span class="line">				p1[i].status();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;完成&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system( <span class="string">&quot;pause&quot;</span> );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实验三-存储管理"><a href="#实验三-存储管理" class="headerlink" title="实验三_存储管理"></a>实验三_存储管理</h4><blockquote>
<p>1.模拟分页式存储管理中硬件的地址转换和产生缺页中断</p>
</blockquote>
<p><code>Page.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;<span class="comment">//页表</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> pageId;<span class="comment">//页号</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> flag;<span class="comment">//标志，1则表示该页已经在主存</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> areaId;<span class="comment">//主存块号</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Page</span><span class="params">(<span class="type">int</span> pageId, <span class="type">int</span> flag, <span class="type">int</span> areaId)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.pageId = pageId;</span><br><span class="line">		<span class="built_in">this</span>.flag = flag;</span><br><span class="line">		<span class="built_in">this</span>.areaId = areaId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> pageId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageId</span><span class="params">(<span class="type">int</span> pageId)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.pageId = pageId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFlag</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> flag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">int</span> flag)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.flag = flag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAreaId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> areaId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAreaId</span><span class="params">(<span class="type">int</span> areaId)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.areaId = areaId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Operation.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> fifoindex=<span class="number">0</span>;<span class="comment">//操作</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> optinalIndex=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> pageId;<span class="comment">//页号</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> pageAddress;<span class="comment">//业内地址</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Operation</span><span class="params">()</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Operation</span><span class="params">(<span class="type">int</span> pageId,<span class="type">int</span> pageAddress)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.pageId=pageId;</span><br><span class="line">		<span class="built_in">this</span>.pageAddress=pageAddress;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> pageId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageId</span><span class="params">(<span class="type">int</span> pageId)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.pageId = pageId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageAddress</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> pageAddress;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageAddress</span><span class="params">(<span class="type">int</span> pageAddress)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.pageAddress = pageAddress;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">flag</span><span class="params">(Page page[],Operation op)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(page[op.getPageId()].getFlag()==<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//输出页表</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">printPageTable</span><span class="params">(Page page[],Operation op,Operation op2,String oper)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;页号   &quot;</span>+<span class="string">&quot;标志   &quot;</span>+<span class="string">&quot;主存块号&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">			System.out.print(page[i].getPageId()+page[i].getFlag()+page[i].getAreaId());</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;指令为&quot;</span>+oper+op.getPageId()+<span class="string">&quot; &quot;</span>+op.getPageAddress());</span><br><span class="line">		System.out.println(op2.getPageId()+<span class="string">&quot; &quot;</span>+op2.getPageAddress());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//输出</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Page page[],Operation op,Operation op2,String oper)</span>&#123;</span><br><span class="line">		<span class="type">int</span> index1=<span class="number">0</span>,index2=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(op.getPageId()==page[i].getPageId())</span><br><span class="line">				index1=i;</span><br><span class="line">			<span class="keyword">if</span>(op2.getPageId()==page[i].getPageId())</span><br><span class="line">				index2=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(oper.equals(<span class="string">&quot;读&quot;</span>))&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;(&quot;</span>+page[index1].getAreaId()+op.getPageId()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;(&quot;</span>+page[index2].getAreaId()+op2.getPageId()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//调入主存</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">move</span><span class="params">(Page page[],Operation op)</span>&#123;</span><br><span class="line">		page[fifoindex].setFlag(<span class="number">0</span>);</span><br><span class="line">		page[fifoindex].setPageId(op.getPageId());</span><br><span class="line">		fifoindex++;</span><br><span class="line">		fifoindex=fifoindex%<span class="number">7</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">fifo</span><span class="params">(Page page[],Operation op,Operation op2,String oper)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!flag(page,op))&#123;</span><br><span class="line">			move(page,op);<span class="comment">//不在内存则调换</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!flag(page,op2))&#123;</span><br><span class="line">			move(page,op2);</span><br><span class="line">		&#125;</span><br><span class="line">		printPageTable(page,op,op2,oper);</span><br><span class="line">		print(page,op,op2,oper);</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Main.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Page A=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">		Page B=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">		Page C=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">		Page D=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">		Page E=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		Page F=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		Page G=<span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		Page page[]=&#123;A,B,C,D,E,F,G&#125;;</span><br><span class="line">		</span><br><span class="line">		Operation a=<span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="number">0</span>,<span class="number">070</span>);</span><br><span class="line">		Operation b=<span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="number">1</span>,<span class="number">050</span>);</span><br><span class="line">		Operation c=<span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="number">2</span>,<span class="number">015</span>);</span><br><span class="line">		Operation d=<span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="number">3</span>,<span class="number">021</span>);</span><br><span class="line">		Operation e=<span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="number">0</span>,<span class="number">056</span>);</span><br><span class="line">		Operation f=<span class="keyword">new</span> <span class="title class_">Operation</span>(<span class="number">6</span>,<span class="number">040</span>);</span><br><span class="line">		Operation op[]=&#123;a,b,c,d,e,f&#125;;</span><br><span class="line">		</span><br><span class="line">		Operation o=<span class="keyword">new</span> <span class="title class_">Operation</span>();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.用先进先出（FIFO）页面调度算法处理缺页中断</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没写</span></span><br></pre></td></tr></table></figure>


<h4 id="实验四-文件系统"><a href="#实验四-文件系统" class="headerlink" title="实验四_文件系统"></a>实验四_文件系统</h4><blockquote>
<p>用高级语言编写和调试一个简单的文件系统，模拟文件管理的工作过程</p>
</blockquote>
<p><code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String password)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>FileOperation.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件操作类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOperation</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;D:\\server\\&quot;</span>;<span class="comment">//指定目录</span></span><br><span class="line">		<span class="keyword">private</span> File file;<span class="comment">//新建文件</span></span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> num;<span class="comment">//操作选项</span></span><br><span class="line">		<span class="keyword">private</span> String fileName;<span class="comment">//新建文件名</span></span><br><span class="line">		<span class="keyword">private</span> String username;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="title function_">FileOperation</span><span class="params">(String user)</span>&#123;</span><br><span class="line">			<span class="built_in">this</span>.address=<span class="built_in">this</span>.address+user+<span class="string">&quot;\\&quot;</span>;<span class="comment">//路径设置为用户目录</span></span><br><span class="line">			fileOperate();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileOperate</span><span class="params">()</span> &#123;</span><br><span class="line">			file = <span class="keyword">new</span> <span class="title class_">File</span>(address);</span><br><span class="line">			file.mkdirs();</span><br><span class="line">			System.out.println(<span class="string">&quot;1:创建文件&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;2:读取文件&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;3:写入文件&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;4:删除文件&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;5:列文件目录 &quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;6:退出 &quot;</span>);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">			<span class="comment">//操作文件的选项数字</span></span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				</span><br><span class="line">				num = input.nextInt();</span><br><span class="line">				</span><br><span class="line">			&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;请重新输入&quot;</span>);</span><br><span class="line">				fileOperate();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">switch</span>(num)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//创建文件	</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;当前目录:&quot;</span>+address);</span><br><span class="line">				System.out.println(<span class="string">&quot;创建文件: &quot;</span>);</span><br><span class="line">				System.out.println(<span class="string">&quot;输入文件名字（包括后缀）：&quot;</span>);</span><br><span class="line">				fileName = input.next();</span><br><span class="line">				<span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(address+fileName);</span><br><span class="line">				<span class="keyword">if</span>(f1.exists())&#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;文件已经存在&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						f1.createNewFile();</span><br><span class="line">						System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">				fileOperate();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				</span><br><span class="line">			<span class="comment">//读取文件	</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;当前目录:&quot;</span>+address);</span><br><span class="line">				System.out.println(<span class="string">&quot;读取文件: &quot;</span>);</span><br><span class="line">				System.out.println(<span class="string">&quot;输入文件名：&quot;</span>);</span><br><span class="line">				fileName = input.next();</span><br><span class="line">				<span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(address+fileName);</span><br><span class="line">				String str;</span><br><span class="line">				<span class="type">BufferedReader</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="type">FileReader</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f2);</span><br><span class="line">					buffer = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(ins);</span><br><span class="line">					System.out.println(<span class="string">&quot;文件内容:&quot;</span>);</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="keyword">while</span>(<span class="literal">null</span> != (str = buffer.readLine()))&#123;</span><br><span class="line">							</span><br><span class="line">							System.out.println(str);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					buffer.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">				fileOperate();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				</span><br><span class="line">			<span class="comment">//写入文件	</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;当前目录:&quot;</span>+address);</span><br><span class="line">				System.out.println(<span class="string">&quot;写入文件: &quot;</span>);</span><br><span class="line">				System.out.println(<span class="string">&quot;输入文件名：&quot;</span>);</span><br><span class="line">				fileName = input.next();</span><br><span class="line">				<span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(address+fileName);</span><br><span class="line">				System.out.println(<span class="string">&quot;输入文本内容:&quot;</span>);</span><br><span class="line">				<span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> input.next();</span><br><span class="line">				<span class="type">FileWriter</span> <span class="variable">wrs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					wrs = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f3);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="type">BufferedWriter</span> <span class="variable">buffer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(wrs);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					buffer3.write(str1);</span><br><span class="line">					buffer3.flush();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">				fileOperate();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				</span><br><span class="line">			<span class="comment">//删除文件或目录	</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;当前目录:&quot;</span>+address);</span><br><span class="line">				System.out.println(<span class="string">&quot;删除文件: &quot;</span>);</span><br><span class="line">				System.out.println(<span class="string">&quot;输入文件名：&quot;</span>);</span><br><span class="line">				fileName = input.next();</span><br><span class="line">				<span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(address+fileName);</span><br><span class="line">				<span class="keyword">if</span>(f4.isFile())&#123;</span><br><span class="line">					<span class="keyword">if</span>(f4.exists())&#123;</span><br><span class="line">						f4.delete();</span><br><span class="line">						System.out.println(<span class="string">&quot;文件删除成功&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span>&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">				fileOperate();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				</span><br><span class="line">			<span class="comment">//查看文件目录</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">					System.out.println(<span class="string">&quot;操作目录 ：&quot;</span>+address);</span><br><span class="line">					System.out.println(<span class="string">&quot;查看文件：&quot;</span>);</span><br><span class="line">					String[] files = file.list(); </span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; files.length;i++)&#123;</span><br><span class="line">						<span class="type">File</span> <span class="variable">f6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(address+files[i]);</span><br><span class="line">						<span class="keyword">if</span>(f6.isDirectory())&#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;文件夹 ：&quot;</span>+files[i]);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span>&#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;文件 ：&quot;</span>+files[i]);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					System.out.println(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">					fileOperate();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//退出</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">					System.out.println(<span class="string">&quot;程序已退出，注销成功!&quot;</span>);</span><br><span class="line">					System.exit(<span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">default</span>: fileOperate();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Main.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] ars)</span> &#123;</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//登陆账号1，密码1</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">		List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();<span class="comment">//用户集合</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;<span class="comment">//添加十个用户账号密码分别是数字1-10</span></span><br><span class="line">			User user=<span class="keyword">new</span> <span class="title class_">User</span>(String.valueOf(i),String.valueOf(i));</span><br><span class="line">			users.add(user);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.next();</span><br><span class="line">		<span class="keyword">for</span>(User u:users)&#123;</span><br><span class="line">			<span class="keyword">if</span>(u.getName().equals(str))&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;密码：&quot;</span>);</span><br><span class="line">				input = <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">				<span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> input.next();</span><br><span class="line">					<span class="keyword">if</span>(u.getPassword().equals(password))&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">						<span class="type">FileOperation</span> <span class="variable">myfile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOperation</span>(u.getName());</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span>&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">						<span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		input.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Websocket将Unity日志输出到网页</title>
    <url>/2019/11/29/Old-output-Unity-log-to-web-with-Websocket/</url>
    <content><![CDATA[<p>Unity中查看日志时如果很多就会特别卡，或者在手机上时查看日志很费劲，尝试了一下用Websocket输出到网页上，方便查看。</p>
<span id="more"></span>

<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>服务端为了方便使用node.js，只需要十几行代码即可完成。</p>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title class_">Server</span>(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(http);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userId = <span class="number">0</span>;</span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span>(<span class="params">socket</span>)&#123;</span><br><span class="line">  socket.<span class="property">userId</span> = userId ++;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a user connected, user id: &#x27;</span> + socket.<span class="property">userId</span>);</span><br><span class="line"></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;log&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message from user#&#x27;</span> + socket.<span class="property">userId</span> + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">    io.<span class="title function_">emit</span>(<span class="string">&#x27;log&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">id</span>: socket.<span class="property">userId</span>,</span><br><span class="line">      <span class="attr">msg</span>: msg</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listening on *:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">box-sizing</span>: border-box; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123; <span class="attribute">font</span>: <span class="number">13px</span> Helvetica, Arial; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">form</span> &#123; <span class="attribute">background</span>: <span class="number">#000</span>; <span class="attribute">padding</span>: <span class="number">3px</span>; <span class="attribute">position</span>: fixed; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">form</span> <span class="selector-tag">input</span> &#123; <span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="attribute">width</span>: <span class="number">90%</span>; <span class="attribute">margin-right</span>: .<span class="number">5%</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">form</span> <span class="selector-tag">button</span> &#123; <span class="attribute">width</span>: <span class="number">9%</span>; <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">130</span>, <span class="number">224</span>, <span class="number">255</span>); <span class="attribute">border</span>: none; <span class="attribute">padding</span>: <span class="number">10px</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> &#123; <span class="attribute">list-style-type</span>: none; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span> &#123; <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123; <span class="attribute">background</span>: <span class="number">#eee</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-1.11.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> socket = <span class="title function_">io</span>();</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      socket.<span class="title function_">emit</span>(<span class="string">&#x27;log&#x27;</span>, $(<span class="string">&#x27;#m&#x27;</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#m&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    socket.<span class="title function_">on</span>(<span class="string">&#x27;log&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#messages&#x27;</span>).<span class="title function_">append</span>($(<span class="string">&#x27;&lt;li&gt;&#x27;</span>).<span class="title function_">text</span>(<span class="string">&quot;user#&quot;</span> + data.<span class="property">id</span> + <span class="string">&quot;: &quot;</span> + data.<span class="property">msg</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;m&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socket.io-unity-test-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test server in node.js for socket.io-unity&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.15.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;socket.io&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>运行服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>C#代码，挂在场景中的某个组件上即可</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> Quobject.SocketIoClientDotNet.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SocketIOScript</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span> serverURL = <span class="string">&quot;http://localhost:3000&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> Socket socket = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">float</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Destroy</span>()</span> &#123;</span><br><span class="line">		DoClose ();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use this for initialization</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span> &#123;</span><br><span class="line">		DoOpen ();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Update is called once per frame</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Update</span> ()</span> &#123;</span><br><span class="line">        time += Time.deltaTime;</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SendChat(Time.time.ToString());</span><br><span class="line">            time = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DoOpen</span>()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (socket == <span class="literal">null</span>) &#123;</span><br><span class="line">			socket = IO.Socket (serverURL);</span><br><span class="line">			socket.On (Socket.EVENT_CONNECT, () =&gt; &#123;</span><br><span class="line">                SendChat(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DoClose</span>()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">			socket.Disconnect ();</span><br><span class="line">			socket = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SendChat</span>(<span class="params"><span class="built_in">string</span> str</span>)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">			socket.Emit (<span class="string">&quot;log&quot;</span>, str);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后把Unity的Debug.Log封装一下，里面在输出日志的时候SendChat函数即可。</p>
<p>客户端使用Websocket依赖的库：<a href="https://www.lanzous.com/i7qfgmb">下载地址</a></p>
<p><img src="https://ae01.alicdn.com/kf/Hea494a66085a46a8b57aafd00cc189305.png" alt="Snipaste_2019-11-29_16-10-13.png"></p>
<p>目前缺点是这几个库很容易跟其他插件冲突，暂时还没找到C#合适的Websocket库。</p>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://ae01.alicdn.com/kf/Hc653eab608b042de8a278a4ed25d3bcaJ.png" alt="Snipaste_2019-11-29_16-21-22.png"></p>
]]></content>
  </entry>
  <entry>
    <title>序列化和反序列化</title>
    <url>/2021/03/14/Old-protobuf-and-json/</url>
    <content><![CDATA[<p>互联网的产生带来了机器间通讯的需求，而互联通讯的双方需要采用约定的协议，序列化和反序列化属于通讯协议的一部分。</p>
<ul>
<li>序列化： 将数据结构或对象转换成二进制串的过程</li>
<li>反序列化：将在序列化过程中所生成的二进制串转换成数据结构或者对象的过程</li>
</ul>
<span id="more"></span>

<p>数据结构和对象：对于面向对象的语言，工程师所操作的一切都是对象（Object），来自于类的实例化。</p>
<p>二进制串：序列化所生成的二进制串指的是存储在内存中的一块数据。一般指byte[]，而C++中的byte不是内置类型，使用unsigned char来代替。</p>
<p>序列化和反序列化的协议需要考虑的特性：</p>
<ul>
<li>通用性<ul>
<li>跨平台、跨语言</li>
<li>流行程度</li>
</ul>
</li>
<li>强健性&#x2F;鲁棒性<ul>
<li>成熟度</li>
</ul>
</li>
<li>可调试性&#x2F;可读性<ul>
<li>序列化后的数据是否可读</li>
</ul>
</li>
<li>性能</li>
<li>扩展性&#x2F;兼容性</li>
<li>安全性</li>
</ul>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON起源于弱类型语言Javascript， 它的产生来自于一种称之为”Associative array”的概念，其本质是就是采用“Attribute－value”的方式来描述对象。实际上在Javascript和PHP等弱类型语言中，类的描述方式就是Associative array。JSON的如下优点，使得它快速成为最广泛使用的序列化协议之一：</p>
<ol>
<li><p>这种Associative array格式非常符合工程师对对象的理解。</p>
</li>
<li><p>它保持了XML的人眼可读（Human-readable）的优点。</p>
</li>
<li><p>相对于XML而言，序列化后的数据更加简洁。 来自于的以下链接的研究表明：XML所产生序列化之后文件的大小接近JSON的两倍。<a href="http://www.codeproject.com/Articles/604720/JSON-vs-XML-Some-hard-numbers-about-verbosity">http://www.codeproject.com/Articles/604720/JSON-vs-XML-Some-hard-numbers-about-verbosity</a> 。</p>
</li>
<li><p>它具备Javascript的先天性支持，所以被广泛应用于Web browser的应用常景中，是Ajax的事实标准协议。</p>
</li>
<li><p>与XML相比，其协议比较简单，解析速度比较快。</p>
</li>
<li><p>松散的Associative array使得其具有良好的可扩展性和兼容性。</p>
</li>
</ol>
<h3 id="典型应用场景和非应用场景"><a href="#典型应用场景和非应用场景" class="headerlink" title="典型应用场景和非应用场景"></a>典型应用场景和非应用场景</h3><p>JSON在很多应用场景中可以替代XML，更简洁并且解析速度更快。典型应用场景包括：</p>
<p>1、公司之间传输数据量相对小，实时性要求相对低（例如秒级别）的服务。</p>
<p>2、基于Web browser的Ajax请求。</p>
<p>3、由于JSON具有非常强的前后兼容性，对于接口经常发生变化，并对可调式性要求高的场景，例如Mobile app与服务端的通讯。</p>
<p>4、由于JSON的典型应用场景是JSON＋HTTP，适合跨防火墙访问。</p>
<p>总的来说，采用JSON进行序列化的额外空间开销比较大，对于大数据量服务或持久化，这意味着巨大的内存和磁盘开销，这种场景不适合。没有统一可用的IDL降低了对参与方的约束，实际操作中往往只能采用文档方式来进行约定，这可能会给调试带来一些不便，延长开发周期。 由于JSON在一些语言中的序列化和反序列化需要采用反射机制，所以在性能要求为ms级别，不建议使用。</p>
<h2 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h2><p>Protobuf具备了优秀的序列化协议的所需的众多典型特征：</p>
<p>1、标准的IDL和IDL编译器，这使得其对工程师非常友好。</p>
<p>2、序列化数据非常简洁，紧凑，与XML相比，其序列化之后的数据量约为1&#x2F;3到1&#x2F;10。</p>
<p>3、解析速度非常快，比对应的XML快约20-100倍。</p>
<p>4、提供了非常友好的动态库，使用非常简介，反序列化只需要一行代码。</p>
<p>Protobuf是一个纯粹的展示层协议，可以和各种传输层协议一起使用；Protobuf的文档也非常完善。 但是由于Protobuf产生于Google，所以目前其仅仅支持Java、C++、Python三种语言。另外Protobuf支持的数据类型相对较少，不支持常量类型。</p>
<h3 id="典型应用场景和非应用场景-1"><a href="#典型应用场景和非应用场景-1" class="headerlink" title="典型应用场景和非应用场景"></a>典型应用场景和非应用场景</h3><p>Protobuf具有广泛的用户基础，空间开销小以及高解析性能是其亮点，非常适合于公司内部的对性能要求高的RPC调用。由于Protobuf提供了标准的IDL以及对应的编译器，其IDL文件是参与各方的非常强的业务约束，另外，Protobuf与传输层无关，采用HTTP具有良好的跨防火墙的访问属性，所以Protobuf也适用于公司间对性能要求比较高的场景。由于其解析性能高，序列化后数据量相对少，非常适合应用层对象的持久化场景。</p>
<p>它的主要问题在于其所支持的语言相对较少，另外由于没有绑定的标准底层传输层协议，在公司间进行传输层协议的调试工作相对麻烦。</p>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>Protobuf 和json对比：</p>
<p><a href="https://zhuanlan.zhihu.com/p/53339153">https://zhuanlan.zhihu.com/p/53339153</a></p>
<p>在JavaScript环境下，Protobuf 只比 JSON 快一点，尤其是在 JSON 开启压缩的情况下，而且 JSON 具有可读性，也更容易调试，所以一般都会选择 JSON。</p>
<p>但如果我们使用的是其他平台，在非压缩环境中使用 Protobuf 时，请求所花费的时间比 JSON 请求少78％。 这表明二进制格式的执行速度几乎是文本格式的5倍。</p>
<p>当 JSON 不是native环境（如NodeJS,浏览器）时，性能提升的非常大。 因此，当您遇到 JSON 的延迟问题时，请考虑迁移到 Protobuf。</p>
<p>当然Protobuf也有一些缺点，比如开发者远远少于Json。官方支持的语言较少，比如不支持Lua，只能使用第三方库。</p>
<h2 id="Protobuf的反序列化"><a href="#Protobuf的反序列化" class="headerlink" title="Protobuf的反序列化"></a>Protobuf的反序列化</h2><p>Protobuf 反序列化</p>
<p>Protobuf 的二进制流格式符合 TLV 标准，（tag length value），key 就是 tag，包含了字段序号和类型，计算方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key =  (field_number &lt;&lt; 3) | wire_type</span><br></pre></td></tr></table></figure>

<p>每种数据类型都有对应的 Type：</p>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">Meaning</th>
<th align="left">Used For</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">Varint</td>
<td align="left">int32, int64, uint32, uint64, sint32, sint64, bool, enum</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">64-bit</td>
<td align="left">fixed64, sfixed64, double</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">Length-delimited</td>
<td align="left">string, bytes, embedded messages, packed repeated fields</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">Start group</td>
<td align="left">groups (deprecated)</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">End group</td>
<td align="left">groups (deprecated)</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">32-bit</td>
<td align="left">fixed32, sfixed32, float</td>
</tr>
</tbody></table>
<p>所以 tag 的低3位就是 wire_type， tag 右移3位就是 field_number。</p>
<p>二进制数据中 tag 后面跟的是 length 和 value，下面看一个简单的例子。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">Test4</span> &#123;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">int32</span> d = <span class="number">4</span> [packed=<span class="literal">true</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如有一个 Test4 结构，其中字段 d 中有三个元素，分别是3，270和86942。那么序列化的数据如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22        // key (field number 4, wire type 2)</span><br><span class="line">06        // payload size (6 bytes)</span><br><span class="line">03        // first element (varint 3)</span><br><span class="line">8E 02     // second element (varint 270)</span><br><span class="line">9E A7 05  // third element (varint 86942)</span><br></pre></td></tr></table></figure>



<p>此外，Google提供了官方的直接解析工具，可以在没有 proto 的情况下解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protoc --decode_raw</span><br></pre></td></tr></table></figure>

<p>更详细的内容可见：<a href="https://developers.google.com/protocol-buffers/docs/encoding">https://developers.google.com/protocol-buffers/docs/encoding</a></p>
<p>参考文章：<a href="https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html">https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>C#中ref与out的用法</title>
    <url>/2019/10/23/Old-re-and-out-usage-in-CSharp/</url>
    <content><![CDATA[<p>C#中有ref和out参数，而lua是弱类型，通过xlua如何访问呢，这当然是可以实现的。</p>
<span id="more"></span>

<h2 id="ref和out"><a href="#ref和out" class="headerlink" title="ref和out"></a>ref和out</h2><p>ref和out都对函数参数采用引用传递形式——不管是值类型参数还是引用类型参数，并且定义函数和调用函数时都必须显示生命该参数为ref&#x2F;out形式。两者都可以使函数传回多个结果。</p>
<p>两者区别：</p>
<p>两种参数类型的设计思想不同，ref的目的在于将值类型参数当作引用型参数传递到函数，是函数的输入参数，并且在函数内部的任何改变也都将影响函数外部该参数的值。</p>
<p>而out的目的在于获取函数的返回值，是输出参数，由函数内部计算得到的值再回传到函数外部，因此必须在函数内部对该参数赋值，这将冲掉函数外部的任何赋值，使得函数外部赋值毫无意义。</p>
<ol>
<li>out必须在函数体内初始化，这使得在外面初始化变得没意义。也就是说，out型的参数在函数体内不能得到外面传进来的初始值。</li>
<li>ref必须在函数体外初始化。</li>
<li>两者在函数体内的任何修改都将影响到函数体外面。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">            Incr(<span class="keyword">ref</span> n1);</span><br><span class="line">            Console.WriteLine(n1);</span><br><span class="line">            Decr(<span class="keyword">out</span> n1);</span><br><span class="line">            Console.WriteLine(n1);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Incr</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> n1</span>)</span> &#123;</span><br><span class="line">            n1++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Decr</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> n1</span>)</span> &#123;</span><br><span class="line">            n1 = <span class="number">1</span>;</span><br><span class="line">            n1--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>未完待续</p>
]]></content>
  </entry>
  <entry>
    <title>并查集原理与应用</title>
    <url>/2020/06/06/Old-union-find-algorithm/</url>
    <content><![CDATA[<p>并查集是一种树形数据结构，用来处理不交集（Disjoint Sets）的合并、查询问题。</p>
<p>并查集有两个操作，叫做联合-查找算法（Union-find Algorithm），其实可以理解为一个查询操作还有一个合并操作。就像C++的string有find和strcat一样。</p>
<span id="more"></span>

<h2 id="并查集结构"><a href="#并查集结构" class="headerlink" title="并查集结构"></a>并查集结构</h2><p>前面说了并查集是<strong>树形结构</strong>，那么我们可以在脑海中构建一个多叉树来思考一下。</p>
<p>比如一个班级有50个学生，他们被分成了几个大组，每个大组有一个同学是大组长，然后每个大组分成几个小组，每个小组有一个小组长。</p>
<p>这样他们就构成了几棵树，每棵树代表一个大组，这个结构很像公司的组织架构。</p>
<p>我们可以把这50个学生序号编为<code>0-49</code>，当作一个大小为50的数组。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">50</span>];</span><br></pre></td></tr></table></figure>

<p>那么数组里面存放什么呢？数组里存的是每个学生自己<strong>直属上级</strong>的序号，如果没有上级就是自己的序号。</p>
<h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><p>有了并查集这样的数据结构，我们就很容易区分任意两个同学a和b是不是在同一个大组：</p>
<p>告诉我a和b的序号，就到数组中分别找他们的上级，上级的上级，一直找到最上级，也就是上级是自己的时候返回，最后比较他们的上级是不是同一个人即可。</p>
<p>查找某位同学<strong>最上级</strong>的函数这么写：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">50</span>];</span><br><span class="line"><span class="comment">//查找x的最上级</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = x;</span><br><span class="line">    <span class="keyword">while</span>(a[i] != i)</span><br><span class="line">    	i = a[i];</span><br><span class="line">    <span class="keyword">return</span>  i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很显然，如果组织架构很大，也就是树很高的时候这样查找会比较慢，下面会使用路径压缩来优化这个过程。</p>
<h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><p>路径压缩可以通俗地理解为每个学生直接记住自己的<strong>最高上级</strong>，很显然这样比记住直属上级然后一级一级查找要快很多。</p>
<p>我们可以把路径压缩放到查找函数中进行，也就是找到某个学生的最上级的之后，让这条路径上所有人都记住自己的最上级。这样虽然相当于查找了两遍，但是在之后查找的时候基本上都可以直接找到最上级，可以节省很多时间。</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//和上面一样 先找到最上级i</span></span><br><span class="line">    <span class="type">int</span> i=x;</span><br><span class="line">    <span class="keyword">while</span> (a[i] != i)</span><br><span class="line">		i = a[i];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//路径压缩</span></span><br><span class="line">    <span class="comment">//就是让刚才那条路径的人都记住i</span></span><br><span class="line">    <span class="type">int</span> j = x;</span><br><span class="line">    <span class="type">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(j != i)</span><br><span class="line">    &#123;</span><br><span class="line">         tmp = a[j]; </span><br><span class="line">         a[j] = i;</span><br><span class="line">         j = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="联合算法"><a href="#联合算法" class="headerlink" title="联合算法"></a>联合算法</h2><p>联合算法就是把两个大组合为一个大组，很简单，比如A、B两个大组，让A组的大组长成为AB合并后的新大组长即可（即A成为B的上级），当然让B组大组长当也可以。</p>
<p>联合算法需要传两个参数，分别是两个组的组员序号，比如x和y。</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">union</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> A=<span class="built_in">find</span>(x);<span class="comment">//找到x最上级</span></span><br><span class="line">    <span class="type">int</span> B=<span class="built_in">find</span>(y);<span class="comment">//找到y最上级</span></span><br><span class="line">    <span class="keyword">if</span>(A!=B)</span><br><span class="line">        a[B]=A;<span class="comment">//让A成为B的上级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来，A、B两个大组就联合成一个大组了。</p>
<h2 id="并查集应用"><a href="#并查集应用" class="headerlink" title="并查集应用"></a>并查集应用</h2><p>并查集很适合用在连通性问题中，尤其是图类问题。</p>
<p>比如图上有很多点，点与点之间有路径或者没有路径，然后问你图是不是连通的，如果不是，需要再连几条线才能连通，或者问你图里有几个连通分量（分支）。</p>
<p>这些问题都可以转化为并查集问题，比如 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1232">HDU 1232 畅通工程</a> 。</p>
<p>初始化的时候可以把每个点都当作一个小组，每个点是自己的组长，然后如果两点之间有线就union联合起来。最终遍历一下数组，就知道有几个连通分量了。</p>
]]></content>
  </entry>
  <entry>
    <title>用Tensorflow模仿许巍写歌词</title>
    <url>/2018/05/16/Old-write-lyrics-with-Tensorflow/</url>
    <content><![CDATA[<h3 id="Tensorflow生成歌词"><a href="#Tensorflow生成歌词" class="headerlink" title="Tensorflow生成歌词"></a>Tensorflow生成歌词</h3><p>其实就是抄的<a href="http://leix.me/2016/11/28/tensorflow-lyrics-generation/">这篇文章</a></p>
<p><a href="https://github.com/karpathy/char-rnn">char-rnn</a>是基于字符预测下一个字符，比如说已知<code>hello</code>的前四个字母<code>hell</code>，那我们就可以据此预测下一个字符很可能是<code>o</code>,因为是字符char级别的，并没有单词或句子层次上的特征提取，相对而言比较简单易学。</p>
<p>使用方法及数据都在Github了：<a href="https://github.com/jozhn/CharRNN-LRC">CharRNN-LRC</a></p>
<span id="more"></span>

<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul>
<li>Tensorflow 1.8.0</li>
<li>numpy</li>
<li>Python 3.x</li>
</ul>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>拿中文举例来说，每个字与每个字并不是统计上独立的，比如说如果不爱就不要再伤害 长度为10的序列，如果我们知道如，下一个字有可能是果，如果知道前两个字如果，第三个字就是不的可能性大些，依次类推，如果知道前9个字如果不爱就不要再伤，那么最后一个就有可能是害字。用图直观的表示如下。</p>
<p><img src="https://leix.me/images/rnn.png" alt="RNN"><br>总的来说，这是一个<code>seq2seq</code>的模型，训练数据用的是许巍60多首歌的歌词，训练数据和代码稍后会放到github上。</p>
<p>代码中预热LSTM模型用的语句是<code>永生永世的爱恋</code>，当然也可以换成其他的，不过需要是txt中包含的文字~</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>抄一遍的原因是Tensorflow已经更新到1.8了，而原版的使用的是1.2，目前又有api更换了，所以小改一下就能用了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib.tensorboard.plugins <span class="keyword">import</span> projector</span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib <span class="keyword">import</span> legacy_seq2seq <span class="keyword">as</span> seq2seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HParam</span>():</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    n_epoch = <span class="number">100</span></span><br><span class="line">    learning_rate = <span class="number">0.01</span></span><br><span class="line">    decay_steps = <span class="number">1000</span></span><br><span class="line">    decay_rate = <span class="number">0.9</span></span><br><span class="line">    grad_clip = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    state_size = <span class="number">100</span></span><br><span class="line">    num_layers = <span class="number">3</span></span><br><span class="line">    seq_length = <span class="number">20</span></span><br><span class="line">    log_dir = <span class="string">&#x27;./logs&#x27;</span></span><br><span class="line">    metadata = <span class="string">&#x27;metadata.tsv&#x27;</span></span><br><span class="line">    gen_num = <span class="number">500</span> <span class="comment"># how many chars to generate</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataGenerator</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, datafiles, args</span>):</span><br><span class="line">        self.seq_length = args.seq_length</span><br><span class="line">        self.batch_size = args.batch_size</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(datafiles, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.data = f.read()</span><br><span class="line"></span><br><span class="line">        self.total_len = <span class="built_in">len</span>(self.data)  <span class="comment"># total data length</span></span><br><span class="line">        self.words = <span class="built_in">list</span>(<span class="built_in">set</span>(self.data))</span><br><span class="line">        self.words.sort()</span><br><span class="line">        <span class="comment"># vocabulary</span></span><br><span class="line">        self.vocab_size = <span class="built_in">len</span>(self.words)  <span class="comment"># vocabulary size</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Vocabulary Size: &#x27;</span>, self.vocab_size)</span><br><span class="line">        self.char2id_dict = &#123;w: i <span class="keyword">for</span> i, w <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.words)&#125;</span><br><span class="line">        self.id2char_dict = &#123;i: w <span class="keyword">for</span> i, w <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.words)&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pointer position to generate current batch</span></span><br><span class="line">        self._pointer = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># save metadata file</span></span><br><span class="line">        self.save_metadata(args.metadata)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">char2id</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> self.char2id_dict[c]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">id2char</span>(<span class="params">self, <span class="built_in">id</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.id2char_dict[<span class="built_in">id</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_metadata</span>(<span class="params">self, file</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&#x27;id\tchar\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.vocab_size):</span><br><span class="line">                c = self.id2char(i)</span><br><span class="line">                f.write(<span class="string">&#x27;&#123;&#125;\t&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(i, c))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_batch</span>(<span class="params">self</span>):</span><br><span class="line">        x_batches = []</span><br><span class="line">        y_batches = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.batch_size):</span><br><span class="line">            <span class="keyword">if</span> self._pointer + self.seq_length + <span class="number">1</span> &gt;= self.total_len:</span><br><span class="line">                self._pointer = <span class="number">0</span></span><br><span class="line">            bx = self.data[self._pointer: self._pointer + self.seq_length]</span><br><span class="line">            by = self.data[self._pointer +</span><br><span class="line">                           <span class="number">1</span>: self._pointer + self.seq_length + <span class="number">1</span>]</span><br><span class="line">            self._pointer += self.seq_length  <span class="comment"># update pointer position</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># convert to ids</span></span><br><span class="line">            bx = [self.char2id(c) <span class="keyword">for</span> c <span class="keyword">in</span> bx]</span><br><span class="line">            by = [self.char2id(c) <span class="keyword">for</span> c <span class="keyword">in</span> by]</span><br><span class="line">            x_batches.append(bx)</span><br><span class="line">            y_batches.append(by)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x_batches, y_batches</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The core recurrent neural network model.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, args, data, infer=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> infer:</span><br><span class="line">            args.batch_size = <span class="number">1</span></span><br><span class="line">            args.seq_length = <span class="number">1</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">&#x27;inputs&#x27;</span>):</span><br><span class="line">            self.input_data = tf.placeholder(</span><br><span class="line">                tf.int32, [args.batch_size, args.seq_length])</span><br><span class="line">            self.target_data = tf.placeholder(</span><br><span class="line">                tf.int32, [args.batch_size, args.seq_length])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">&#x27;model&#x27;</span>):</span><br><span class="line">            self.cell = tf.contrib.rnn.BasicLSTMCell(args.state_size)</span><br><span class="line">            self.cell = tf.contrib.rnn.MultiRNNCell([self.cell] * args.num_layers)</span><br><span class="line">            self.initial_state = self.cell.zero_state(</span><br><span class="line">                args.batch_size, tf.float32)</span><br><span class="line">            <span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;rnnlm&#x27;</span>):</span><br><span class="line">                w = tf.get_variable(</span><br><span class="line">                    <span class="string">&#x27;softmax_w&#x27;</span>, [args.state_size, data.vocab_size])</span><br><span class="line">                b = tf.get_variable(<span class="string">&#x27;softmax_b&#x27;</span>, [data.vocab_size])</span><br><span class="line">                <span class="keyword">with</span> tf.device(<span class="string">&quot;/cpu:0&quot;</span>):</span><br><span class="line">                    embedding = tf.get_variable(</span><br><span class="line">                        <span class="string">&#x27;embedding&#x27;</span>, [data.vocab_size, args.state_size])</span><br><span class="line">                    inputs = tf.nn.embedding_lookup(embedding, self.input_data)</span><br><span class="line">            outputs, last_state = tf.nn.dynamic_rnn(</span><br><span class="line">                self.cell, inputs, initial_state=self.initial_state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">&#x27;loss&#x27;</span>):</span><br><span class="line">            output = tf.reshape(outputs, [-<span class="number">1</span>, args.state_size])</span><br><span class="line"></span><br><span class="line">            self.logits = tf.matmul(output, w) + b</span><br><span class="line">            self.probs = tf.nn.softmax(self.logits)</span><br><span class="line">            self.last_state = last_state</span><br><span class="line"></span><br><span class="line">            targets = tf.reshape(self.target_data, [-<span class="number">1</span>])</span><br><span class="line">            loss = seq2seq.sequence_loss_by_example([self.logits],</span><br><span class="line">                                                    [targets],</span><br><span class="line">                                                    [tf.ones_like(targets, dtype=tf.float32)])</span><br><span class="line">            self.cost = tf.reduce_sum(loss) / args.batch_size</span><br><span class="line">            tf.summary.scalar(<span class="string">&#x27;loss&#x27;</span>, self.cost)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">&#x27;optimize&#x27;</span>):</span><br><span class="line">            self.lr = tf.placeholder(tf.float32, [])</span><br><span class="line">            tf.summary.scalar(<span class="string">&#x27;learning_rate&#x27;</span>, self.lr)</span><br><span class="line"></span><br><span class="line">            optimizer = tf.train.AdamOptimizer(self.lr)</span><br><span class="line">            tvars = tf.trainable_variables()</span><br><span class="line">            grads = tf.gradients(self.cost, tvars)</span><br><span class="line">            <span class="keyword">for</span> g <span class="keyword">in</span> grads:</span><br><span class="line">                tf.summary.histogram(g.name, g)</span><br><span class="line">            grads, _ = tf.clip_by_global_norm(grads, args.grad_clip)</span><br><span class="line"></span><br><span class="line">            self.train_op = optimizer.apply_gradients(<span class="built_in">zip</span>(grads, tvars))</span><br><span class="line">            self.merged_op = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">data, model, args</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        saver = tf.train.Saver()</span><br><span class="line">        writer = tf.summary.FileWriter(args.log_dir, sess.graph)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add embedding tensorboard visualization. Need tensorflow version</span></span><br><span class="line">        <span class="comment"># &gt;= 0.12.0RC0</span></span><br><span class="line">        config = projector.ProjectorConfig()</span><br><span class="line">        embed = config.embeddings.add()</span><br><span class="line">        embed.tensor_name = <span class="string">&#x27;rnnlm/embedding:0&#x27;</span></span><br><span class="line">        embed.metadata_path = args.metadata</span><br><span class="line">        projector.visualize_embeddings(writer, config)</span><br><span class="line"></span><br><span class="line">        max_iter = args.n_epoch * \</span><br><span class="line">            (data.total_len // args.seq_length) // args.batch_size</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_iter):</span><br><span class="line">            learning_rate = args.learning_rate * \</span><br><span class="line">                (args.decay_rate ** (i // args.decay_steps))</span><br><span class="line">            x_batch, y_batch = data.next_batch()</span><br><span class="line">            feed_dict = &#123;model.input_data: x_batch,</span><br><span class="line">                         model.target_data: y_batch, model.lr: learning_rate&#125;</span><br><span class="line">            train_loss, summary, _, _ = sess.run([model.cost, model.merged_op, model.last_state, model.train_op],</span><br><span class="line">                                                 feed_dict)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                writer.add_summary(summary, global_step=i)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Step:&#123;&#125;/&#123;&#125;, training_loss:&#123;:4f&#125;&#x27;</span>.<span class="built_in">format</span>(i,</span><br><span class="line">                                                               max_iter, train_loss))</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">0</span> <span class="keyword">or</span> (i + <span class="number">1</span>) == max_iter:</span><br><span class="line">                saver.save(sess, os.path.join(</span><br><span class="line">                    args.log_dir, <span class="string">&#x27;lyrics_model.ckpt&#x27;</span>), global_step=i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">data, model, args</span>):</span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        ckpt = tf.train.latest_checkpoint(args.log_dir)</span><br><span class="line">        <span class="built_in">print</span>(ckpt)</span><br><span class="line">        saver.restore(sess, ckpt)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initial phrase to warm RNN</span></span><br><span class="line">        prime = <span class="string">u&#x27;永生永世的爱恋&#x27;</span></span><br><span class="line">        state = sess.run(model.cell.zero_state(<span class="number">1</span>, tf.float32))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> prime[:-<span class="number">1</span>]:</span><br><span class="line">            x = np.zeros((<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">            x[<span class="number">0</span>, <span class="number">0</span>] = data.char2id(word)</span><br><span class="line">            feed = &#123;model.input_data: x, model.initial_state: state&#125;</span><br><span class="line">            state = sess.run(model.last_state, feed)</span><br><span class="line"></span><br><span class="line">        word = prime[-<span class="number">1</span>]</span><br><span class="line">        lyrics = prime</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(args.gen_num):</span><br><span class="line">            x = np.zeros([<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">            x[<span class="number">0</span>, <span class="number">0</span>] = data.char2id(word)</span><br><span class="line">            feed_dict = &#123;model.input_data: x, model.initial_state: state&#125;</span><br><span class="line">            probs, state = sess.run([model.probs, model.last_state], feed_dict)</span><br><span class="line">            p = probs[<span class="number">0</span>]</span><br><span class="line">            word = data.id2char(np.argmax(p))</span><br><span class="line">            <span class="built_in">print</span>(word, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            time.sleep(<span class="number">0.05</span>)</span><br><span class="line">            lyrics += word</span><br><span class="line">        <span class="keyword">return</span> lyrics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">infer</span>):</span><br><span class="line"></span><br><span class="line">    args = HParam()</span><br><span class="line">    data = DataGenerator(<span class="string">&#x27;xuwei.txt&#x27;</span>, args)</span><br><span class="line">    model = Model(args, data, infer=infer)</span><br><span class="line"></span><br><span class="line">    run_fn = sample <span class="keyword">if</span> infer <span class="keyword">else</span> train</span><br><span class="line"></span><br><span class="line">    run_fn(data, model, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    msg = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Usage:</span></span><br><span class="line"><span class="string">    Training: </span></span><br><span class="line"><span class="string">        python3 gen.py 0</span></span><br><span class="line"><span class="string">    Sampling:</span></span><br><span class="line"><span class="string">        python3 gen.py 1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        infer = <span class="built_in">int</span>(sys.argv[-<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;--Sampling--&#x27;</span> <span class="keyword">if</span> infer <span class="keyword">else</span> <span class="string">&#x27;--Training--&#x27;</span>)</span><br><span class="line">        main(infer)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote>
<p>总是那么遥远沉重<br>不变的轮回之中<br>生命变得虚无飘渺<br>曾经遥远漫长的幻想<br>为何它始终不能实<br><strong>那一种力量</strong><br><strong>依然在我心中流淌</strong><br><strong>在我怀里是温暖的家</strong><br><strong>就让我的心里永远一次被唤醒</strong><br><strong>我不知道转变的天风里</strong><br><strong>你爱蓝色夜晚漫天的星光</strong><br><strong>是否爱将这世界上一定在这短暂的一切</strong><br><strong>是因为这一切的地方</strong><br><strong>我的心却那么遥远沉重</strong></p>
</blockquote>
<blockquote>
<p>不变的轮回之中<br>生命变得虚无飘渺<br>曾经遥远漫长的幻想<br>为何它始终不能实<br><strong>那一种力量</strong><br><strong>依然在我心中流淌</strong><br><strong>在我怀里是温暖的家</strong><br><strong>就让我的心里永远一次被唤醒</strong><br><strong>我不知道转变的天风里</strong><br><strong>你爱蓝色夜晚漫天的星光</strong><br><strong>是否爱将这世界上一定在这短暂的一切</strong><br><strong>是因为这一切的地方</strong><br><strong>我的心却那么遥远沉重</strong></p>
</blockquote>
<p>前几句是《永恒》的原歌词，因为数据集太小，就变成背诵了~后面来看效果还不错（加粗的算是原创了）</p>
<blockquote>
<p>许巍的歌词大多比较简短，相比杰伦的歌词风格更加一致，所以虽然文本量少很多，但生成的效果更好一些。</p>
<p>如果用汪峰的歌词应该也不错，不过这些人的歌词训练之后容易出现的问题就是常常会无限循环某几句话，大概是训练文本量还是不够吧。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>浅谈新版UnLua的核心改变</title>
    <url>/2022/11/04/New-Version-of-UnLua/</url>
    <content><![CDATA[<p>UnLua是目前虚幻引擎下最主流的脚本方案之一，并且最近一年多以来更新频率提高了很多，修复了很多遗留问题。而从2.2版本开始，UnLua对内部的一些实现进行了较大的改动，但目前网络上还没有介绍最新版本的改动的。所以在这里我<strong>简单分析一下UnLua2.2之后的核心改动和需要关注的生命周期等问题</strong>。</p>
<span id="more"></span>

<h2 id="UnLua的历史版本"><a href="#UnLua的历史版本" class="headerlink" title="UnLua的历史版本"></a>UnLua的历史版本</h2><p>简单来说，UnLua1.0~2.1.4在核心实现和使用方法上基本没有太大变化，这些版本主要是修复bug。其中2.0起更新Lua到了5.4.2，对UObject Ref机制有所修改。</p>
<p><strong>而UnLua2.2开始有了较大的改动</strong>，针对旧版本存在的较多严重问题通过重构进行修复。新版本的核心在于修复了数据结构设置不合理、野指针等问题，然后增加了多LuaState机制等特性。</p>
<h2 id="UnLua的核心修改"><a href="#UnLua的核心修改" class="headerlink" title="UnLua的核心修改"></a>UnLua的核心修改</h2><p>这里简单介绍UnLua2.2之后的几个<strong>核心修改点</strong>。</p>
<h3 id="UObject生命周期"><a href="#UObject生命周期" class="headerlink" title="UObject生命周期"></a>UObject生命周期</h3><h4 id="旧版"><a href="#旧版" class="headerlink" title="旧版"></a>旧版</h4><p>在老版本UnLua中，只要是Lua中获取的UObject，<strong>就会被UnLua的ObjectReferencer增加一个全局引用，以避免UObject被UE GC</strong>。这个引用去掉的时机依赖于对应的Lua userdata在Lua侧被GC。</p>
<p><img src="https://img.jozhn.com/blog/202211031142125.png"></p>
<p>看起来在Lua里写起来很爽，用到的UObject永远有效，但也带来了严重的问题——大量的UObject因为Lua侧的userdata仍存在引用而长时间无法释放。而且，在Lua中查找userdata的引用是非常困难的。</p>
<p>Lua中没有提供查询引用的接口，只能自己实现。<strong>UnLua中想做到查找完整的引用链几乎是不可能的</strong>，因为还存在协程、upvalue、UStruct、UE容器等等复杂的使用情况。当他们组合在一起，复杂度就指数级上升。这给修复内存泄漏带来了极大的挑战。</p>
<h4 id="新版"><a href="#新版" class="headerlink" title="新版"></a>新版</h4><p>新版本做了一个大胆激进的调整，直接<strong>去掉了对UObject的引用机制</strong>。当然，不是全部的UObject都不引用，涉及保持Delegate等用法的临时UObject还是需要的。</p>
<p>熟悉UnLua的朋友应该会立即想到，怎么保证Lua中访问的UObject是有效的呢？</p>
<p>UE的GC是有事件通知的，我们可以知道UObject什么时候被GC。首先，在Lua获取UObect时会把<code>UObject**</code> 作为light userdata放在Lua Registry中的ObjectMap里（弱引用），<strong>当UObject被GC时，就把userdata的指针赋值为一个名为ReleasedPtr的特殊指针地址</strong>，具体是<code>0xDEAD</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">lua_pushstring</span>(L, <span class="string">&quot;Object&quot;</span>);  </span><br><span class="line"><span class="built_in">lua_rawget</span>(L, <span class="number">-2</span>);  </span><br><span class="line"><span class="type">void</span>* Userdata = <span class="built_in">lua_touserdata</span>(L, <span class="number">-1</span>);  </span><br><span class="line">*((<span class="type">void</span>**)Userdata) = (<span class="type">void</span>*)LowLevel::ReleasedPtr;</span><br></pre></td></tr></table></figure>

<p>这样在Lua里访问UObject时，UnLua就可以<strong>通过判断指针是不是ReleasedPtr来确定对象是否已经被释放</strong>。如果没有被释放，会通过UObject的各种Flag来判断是否处于GC流程中，能否使用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsUObjectValid</span><span class="params">(UObjectBase* ObjPtr)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (!ObjPtr || ObjPtr == LowLevel::ReleasedPtr)  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">return</span> (ObjPtr-&gt;<span class="built_in">GetFlags</span>() &amp; (RF_BeginDestroyed | RF_FinishDestroyed)) == <span class="number">0</span> &amp;&amp; ObjPtr-&gt;<span class="built_in">IsValidLowLevelFast</span>();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就保证了访问UObject时不会因为野指针而崩溃。不过准确的说，这样只能保证大部分情况，<strong>有些情况是规避不了的，这个后面再说</strong>。</p>
<h3 id="FClassDesc生命周期"><a href="#FClassDesc生命周期" class="headerlink" title="FClassDesc生命周期"></a>FClassDesc生命周期</h3><p><strong>FClassDesc是UnLua中用于存储UClass、UStruct描述信息的类。里面主要是存储一些指针</strong>。</p>
<p>新版UnLua的FClassDesc结构：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    TMap&lt;FName, TSharedPtr&lt;FFieldDesc&gt;&gt; Fields;  </span><br><span class="line">    TArray&lt;TSharedPtr&lt;FPropertyDesc&gt;&gt; Properties;  </span><br><span class="line">    TArray&lt;TSharedPtr&lt;FFunctionDesc&gt;&gt; Functions;  </span><br><span class="line">    TArray&lt;FClassDesc*&gt; SuperClasses;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">FFunctionCollection</span> *FunctionCollection;</span><br></pre></td></tr></table></figure>

<h4 id="旧版-1"><a href="#旧版-1" class="headerlink" title="旧版"></a>旧版</h4><p>旧版本中，访问UObject时会去创建FClassDesc，然后通过引用计数去管理，当这个UClass的UObject数量为0或UClass被GC时或对应的metatable被GC时就析构FClassDesc，然后清理UnLuaManager中存储的各种UClass相关的指针，并且清理Lua侧全局的UE4.XXX，里面存的是FClassDesc指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Unregister a class </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FReflectionRegistry::UnRegisterClass</span><span class="params">(FClassDesc *ClassDesc)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">if</span> (GReflectionRegistry.<span class="built_in">IsDescValid</span>(ClassDesc, DESC_CLASS))  </span><br><span class="line">    &#123;</span><br><span class="line">	    <span class="function">FName <span class="title">Name</span><span class="params">(ClassDesc-&gt;GetName())</span></span>;  </span><br><span class="line">        UStruct* Struct = ClassDesc-&gt;<span class="built_in">AsStruct</span>();  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span> ClassDesc;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear classdesc registry</span></span><br><span class="line">        Name2Classes.<span class="built_in">Remove</span>(Name);  </span><br><span class="line">        Struct2Classes.<span class="built_in">Remove</span>(Struct);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看起来没啥问题，但是非常奇葩，FClassDesc的生命周期竟然被三种东西管理，这是导致老版本UnLua存在大量野指针崩溃的罪魁祸首。</p>
<p>实际上，引用计数、UClass、metatable的生命周期是非常不一样的，<strong>这可能导致正在使用的FClassDesc被析构</strong>，从而导致崩溃。</p>
<p>首先是引用计数的问题。因为UClass本身也是个UObject对象，如果在Lua中先获取一个UClass，那么这个UClass对应的FClassDesc引用计数就会+1。然后再创建一个UObject，这个FClassDesc引用计数就会变成2。然而如果没有从Lua获取UClass，而是通过C++接口在C++侧创建UObject传给Lua，那么FClassDesc引用计数就只有1，没有LoadClass的那个计数。两种情况下的UClass GC时机居然不一样！而LoaClass加引用计数就会导致如果这个UClass一直没GC，就不会清理FClassDesc了。</p>
<p>只要是Lua设置metatable，都会加引用计数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// other class,check classdesc  </span></span><br><span class="line">FClassDesc* ClassDesc = GReflectionRegistry.<span class="built_in">FindClass</span>(MetatableName);  </span><br><span class="line"><span class="keyword">if</span> (!ClassDesc)  </span><br><span class="line">&#123;  </span><br><span class="line">    UnLua::FAutoStack AutoStack;  </span><br><span class="line">    ClassDesc = <span class="built_in">RegisterClass</span>(L, MetatableName);  </span><br><span class="line">&#125;  </span><br><span class="line">Type = <span class="built_in">luaL_getmetatable</span>(L, MetatableName);  </span><br><span class="line"><span class="keyword">if</span> (Type != LUA_TTABLE)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">lua_pop</span>(L, <span class="number">1</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">lua_setmetatable</span>(L, <span class="number">-2</span>);<span class="comment">// set the metatable directly  </span></span><br><span class="line">    ClassDesc-&gt;<span class="built_in">AddRef</span>();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其次是metatable的GC问题。metatable是在Lua中管理，它的GC依赖Lua GC的条件。实际游戏中Lua内存的增长是比较缓慢的，不会频繁触发Lua GC，<strong>这就导致metatable的GC会很晚</strong>。在真机上使用BinnedMalloc进行内存分配时，很容易把相同类型的对象分配到相同的内存地址上。比如一个FClassDesc被释放之后，另一个新的FClassDesc有很大概率会分配到刚才的地址上。那么此时如果metatable被GC了，它里面存储的FClassDesc指针地址就和现在新的一样！<strong>这就会导致正在使用的FClassDesc被析构，然而他们并不是一个</strong>！析构之后再去访问就会导致崩溃或者找不到FProperty之类的情况。</p>
<p>即使UnLua通过一些tricky的方式想规避这种情况，比如判断FClassDesc里面的UClass类型是不是一样的，但是并没有根本解决问题。因为实际游戏中，<strong>相同类型UClass对应的FClassDesc也可能会被分配到相同地址</strong>。在反复创建删除UObject的情况下极易复现。</p>
<p>tricky且没起到根本作用的判断方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FReflectionRegistry::IsDescValid</span><span class="params">(<span class="type">void</span>* Desc, EDescType type)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	EDescType* TypePtr = DescSet.<span class="built_in">Find</span>(Desc);  </span><br><span class="line">    <span class="keyword">return</span> TypePtr &amp;&amp; (*TypePtr == type);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FReflectionRegistry::IsDescValidWithObjectCheck</span><span class="params">(<span class="type">void</span>* Desc, EDescType type)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> bValid = <span class="built_in">IsDescValid</span>(Desc, type);  </span><br><span class="line">    <span class="keyword">if</span> (bValid)  </span><br><span class="line">    &#123;        <span class="keyword">switch</span> (type)  </span><br><span class="line">        &#123;        <span class="keyword">case</span> DESC_CLASS:  </span><br><span class="line">            bValid = bValid &amp;&amp; ((FClassDesc*)Desc)-&gt;<span class="built_in">IsValid</span>();  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> DESC_FUNCTION:  </span><br><span class="line">            bValid = bValid &amp;&amp; ((FFunctionDesc*)Desc)-&gt;<span class="built_in">IsValid</span>();  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> DESC_PROPERTY:  </span><br><span class="line">            bValid = bValid &amp;&amp; ((FPropertyDesc*)Desc)-&gt;<span class="built_in">IsValid</span>();  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> DESC_ENUM:  </span><br><span class="line">            bValid = bValid &amp;&amp; ((FEnumDesc*)Desc)-&gt;<span class="built_in">IsValid</span>();  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">            bValid = <span class="literal">false</span>;  </span><br><span class="line">        &#125;    &#125;  </span><br><span class="line">    <span class="keyword">return</span> bValid;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终结果就是，要么有FClassDesc因为地址被其他类型对象复用一直没被清理，要么有正在使用的FClassDesc被误清理。</p>
<h4 id="新版-1"><a href="#新版-1" class="headerlink" title="新版"></a>新版</h4><p>通过上面的分析，我们可以思考一下，FClassDesc是否有必要被清理？一方面FClassDesc里面只是存了一些指针，且没有对UClass有引用，不占什么内存，反而是反复创建销毁会导致Lua侧产生FClassDesc的野指针。另一方面，大部分UClass都是C++ Native的，不会释放的，这种UClass对应的FClassDesc更没必要delete了。少部分也是我们常用来绑定Lua的蓝图类型BluprintGeneratedClass是会被GC的，我们应该将FClassDesc里面的数据和UClass生命周期绑定，而不是整体绑定。</p>
<p>根据这个思路，新版做出了这样的修改：<strong>FClassDesc一旦创建了就一直存在，然后UClass GC时清理里面的内容，并且把Lua侧的metatable清理掉</strong>（里面保存了旧的FPropertyDesc指针，所以有必要清理）。</p>
<p>这样可以保证Lua侧一定没有FClassDesc野指针，并且UClass被GC了说明UObject也被GC了，那么Lua侧对应的metatable自然也不会被使用到，清理也不会产生新的问题。</p>
<p>然后还有兜底的机制，即使Lua侧的metatable还有其他地方引用并访问，访问到的FClassDesc也是有效的，里面的指针被清理之后会重新Load新的UClass，以保证Lua侧访问正常。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FClassDesc::Load</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (Struct.<span class="built_in">IsValid</span>())  </span><br><span class="line">    &#123;        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (GIsGarbageCollecting)  </span><br><span class="line">    &#123;        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">UnLoad</span>();  </span><br><span class="line">  </span><br><span class="line">    FString Name = (ClassName[<span class="number">0</span>] == <span class="string">&#x27;U&#x27;</span> || ClassName[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> || ClassName[<span class="number">0</span>] == <span class="string">&#x27;F&#x27;</span>) ? ClassName.<span class="built_in">RightChop</span>(<span class="number">1</span>) : ClassName;  </span><br><span class="line">    UStruct* Found = <span class="built_in">FindObject</span>&lt;UStruct&gt;(ANY_PACKAGE, *Name);  </span><br><span class="line">    <span class="keyword">if</span> (!Found)  </span><br><span class="line">        Found = <span class="built_in">LoadObject</span>&lt;UStruct&gt;(<span class="literal">nullptr</span>, *Name);  </span><br><span class="line">  </span><br><span class="line">    Struct = Found;  </span><br><span class="line">    RawStructPtr = Found;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="FPropertyDesc-x2F-FFunctionDesc"><a href="#FPropertyDesc-x2F-FFunctionDesc" class="headerlink" title="FPropertyDesc&#x2F;FFunctionDesc"></a>FPropertyDesc&#x2F;FFunctionDesc</h3><p>上面提到的FClassDesc中会存储UClass中被Lua访问过的Property和Function的描述信息，也就是FPropertyDesc&#x2F;FFunctionDesc。</p>
<h4 id="旧版-2"><a href="#旧版-2" class="headerlink" title="旧版"></a>旧版</h4><p>旧版本FClassDesc中直接存储了裸指针，然后裸指针会被Push到Lua的UClass对应的metatable，这就存在了野指针的风险。当metatable没有随UClass GC释放时，或者被不知道哪里的Lua引用了然后访问了就会崩溃。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    TMap&lt;FName, FFieldDesc*&gt; Fields;  </span><br><span class="line">    TArray&lt;FPropertyDesc*&gt; Properties;  </span><br><span class="line">    TArray&lt;FFunctionDesc*&gt; Functions;  </span><br><span class="line"></span><br><span class="line">    TArray&lt;FString&gt; NameChain;  </span><br><span class="line">    TArray&lt;UStruct*&gt; StructChain;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">FFunctionCollection</span> *FunctionCollection;</span><br></pre></td></tr></table></figure>

<h4 id="新版-2"><a href="#新版-2" class="headerlink" title="新版"></a>新版</h4><p>一方面数据结构改成了存储智能指针，另一方面当访问时发现已经不是Valid状态时可以返回nil，然后报错，这样可以准确知道Lua中哪里访问了已经被释放的UObject的Property或Function。</p>
<p>FPropertyDesc的检查：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">FORCEINLINE <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">GetValue</span><span class="params">(lua_State *L, <span class="type">const</span> <span class="type">void</span> *ContainerPtr, <span class="type">bool</span> bCreateCopy)</span> <span class="type">const</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">UNLIKELY</span>(!<span class="built_in">IsValid</span>()))  </span><br><span class="line">    &#123;        <span class="built_in">UE_LOG</span>(LogUnLua, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;attempt to read invalid property %s&quot;</span>), *Name);  </span><br><span class="line">        <span class="built_in">lua_pushnil</span>(L);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;    <span class="built_in">GetValueInternal</span>(L, Property-&gt;<span class="built_in">ContainerPtrToValuePtr</span>&lt;<span class="type">void</span>&gt;(ContainerPtr), bCreateCopy);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UFunction覆写机制"><a href="#UFunction覆写机制" class="headerlink" title="UFunction覆写机制"></a>UFunction覆写机制</h3><p>其实各种脚本方案的覆写机制不会有太大区别，本质上都是模仿蓝图的实现方式，把已有的拿下来存在某个地方，然后创建一个新的UFunction加到UClass中。</p>
<h4 id="旧版-3"><a href="#旧版-3" class="headerlink" title="旧版"></a>旧版</h4><p>老版本的UnLua是通过创建新的UFunction，然后在蓝图函数字节码中插入函数地址实现的。并且把老的UClass、UFunction裸指针存到UnLuaManager里面。</p>
<p>之前提到FClassDesc的生命周期跟UClass没对齐，所以这导致UnLuaManager在清理那堆裸指针时容易清理到野指针或者有效的但是复用了相同内存地址的新指针。</p>
<h4 id="新版-3"><a href="#新版-3" class="headerlink" title="新版"></a>新版</h4><p>新版本使用了一种更好的方式，<strong>新建了一个UFunction子类ULuaFunction。然后将覆写数据存在ULuaFunction中</strong>，比如被覆写的UFunction的智能指针、FFunctionDesc的智能指针。优势是UClass或者UFunction被GC时这些数据自动移除，不会留下野指针。放在UnLuaManager里面无法清理干净。</p>
<p>此外增加了FunctionRegistry类，<strong>在UFunction被GC时移除相关结构体</strong>，不再依赖UnLuaManager在CleanUpByClass时统一清理了（standalone模式非常容易出现野指针）。</p>
<p>然后增加了转发给原函数的功能，避免Lua模块加载失败时调用不到。</p>
<p>最后是覆写的还原机制，<strong>能够支持PIE下和Game下退出游戏时正常还原覆写的函数，避免错误的数据被保存到蓝图中</strong>。</p>
<h3 id="多LuaState"><a href="#多LuaState" class="headerlink" title="多LuaState"></a>多LuaState</h3><p>终于支持了多Lua虚拟机共存，不过老版本的获取LuaState的接口还保留着，所以升级没什么问题。但是老项目如果想改造成多LuaState，改动起来成本还是很高的。</p>
<p>这个是比较大的改的，不过不用细说了。</p>
<h3 id="Lua模块"><a href="#Lua模块" class="headerlink" title="Lua模块"></a>Lua模块</h3><p>Lua模块除了升级到Lua5.4.3，还有改成了预编译的版本，为了支持C++模式编译。但如果需要修改源码，还要自己在各个平台编译一下，比较麻烦。所以Lua模块我们还是使用老版本的源码方式。</p>
<h2 id="再谈UObject的生命周期"><a href="#再谈UObject的生命周期" class="headerlink" title="再谈UObject的生命周期"></a>再谈UObject的生命周期</h2><p>上面分析了新版UnLua中UObject的生命周期的变化，一句话来说就是UnLua不再影响你使用的UObject的生命周期了，你需要使用UE的GC机制去管理。</p>
<h3 id="管理UObject生命周期"><a href="#管理UObject生命周期" class="headerlink" title="管理UObject生命周期"></a>管理UObject生命周期</h3><p>在UE中创建的UObject要在UE中加<code>UPROPERTY</code>标签来引用，在Lua中创建的UObject可以自己封装接口AddToRoot或者用UnLua的<code>FLuaEnv::AddManualObjectReference</code>。</p>
<p>不过还有个更优雅的方式：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> Class = UE.UClass.Load(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> Object = NewObject(Class)</span><br><span class="line"><span class="keyword">local</span> Handler = UnLua.Ref(Object)</span><br></pre></td></tr></table></figure>

<p>其中<code>UnLua.Ref</code>是把UObject加到ObjectReferencer中，并且返回于这个UObject对应的userdata，当这个userdata被Lua GC，就会把UObject的引用去掉。</p>
<p>这样就基本相当于遵循了旧版本UnLua的引用机制，<strong>但是可以比较容易地控制使用范围，避免大范围无感知的引用</strong>。</p>
<p>最终，这样的改动带来的结果是我们项目中再也没有那种不知道怎么引用到的对象泄露了，尤其是UI、图集。</p>
<h3 id="UObject的访问保护"><a href="#UObject的访问保护" class="headerlink" title="UObject的访问保护"></a>UObject的访问保护</h3><p>当然，前面还提到了<strong>UObject的访问需要保护，仅从GC流程的角度还是不能覆盖全的</strong>。</p>
<p>首先从GC流程上面只能覆盖到被Lua访问过的UObject，这些UObject会存到ObjectMap。这就有了隐患。如果是没有被Lua访问过的UObject呢，比如UE容器中的UObject指针。</p>
<p><strong>如果某个时刻Lua中先获取了一个<code>TArray&lt;UObject*&gt;</code> 然后存起来，之后再去访问TArray中的成员，这样就会出现野指针。因为里面的UObject没有出现在ObjectMap中，UnLua对它们的GC是无感知的！</strong></p>
<p>不仅是容器中的对象会失效，就连容器本身也会失效。比如某个结构体里面的TArray，你在Lua中直接缓存了TArray的引用，而结构体某个时刻被释放了，但之后你在Lua中仍会访问TArray的成员。</p>
<p><strong>老版本的UnLua也存在这个问题</strong>，但是因为没有及时释放容器而导致短时间内不会出错（负负得正了属于是），但长时间运行不知道什么时候就崩了。</p>
<p><img src="https://img.jozhn.com/blog/202211031629447.png"></p>
<p>还好，最新的UnLua在最新的develop分支增加了针对上面情况的保护，一个是访问TArray的成员时检查有效性，另一个是增加悬垂指针的标记，避免访问已经失效的UStruct&#x2F;UObject中的成员（尤其是容器）。</p>
<h2 id="UnLua的升级建议"><a href="#UnLua的升级建议" class="headerlink" title="UnLua的升级建议"></a>UnLua的升级建议</h2><p>一般可以用最新的release版本2.3.0。有条件的可以用develop分支最新的，因为总会有些小bug出现，需要修修补补。</p>
<p>如果项目本身没有对UnLua有什么改动的话，升级成本其实很小。如果改得很多但仍有一些崩溃问题，建议放弃之前的修改，因为老版本的那些bug在新版都已经解决了。一般自己的修改都是打补丁，很多地方修改并不彻底，反而会遗留难以注意到的bug。</p>
<p>然后影响最大的就是上面说的Lua模块，如果继续用老版本的Lua模块（建议用2.1.4的）会简单很多。</p>
<p>其他方面，为了兼容老版本的使用，UnLua保留了旧版本的主要接口，还提供了一些设置选项可以切换。具体到我们项目的话，从最开始1.0一路升级到现在最新版，中间有很多魔改，最终还是升级到了最新版。</p>
<p>从结果上来看，升级之后UnLua相关的崩溃率降低了很多，基本没有那种不知道为什么的野指针崩溃了，推荐还在用旧版本的朋友们一起使用。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新版的UnLua带来的改变是很大的，不仅修复了旧版设计问题导致的历史遗留bug，还通过重构梳理了代码结构，现在的代码比以前清晰很多，也没有了乱七八糟的补丁代码。这里必须感谢UnLua开发者xuyanghuang的努力。</p>
<p>也欢迎使用UnLua的朋友加入官方QQ群936285107交流。</p>
]]></content>
  </entry>
  <entry>
    <title>tolua编译集成lua-protobuf指南</title>
    <url>/2020/11/02/Old-ToLua-Compile-With-lua-protobuf/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p><a href="https://github.com/topameng/tolua_runtime">tolua_runtime</a> 是 <a href="https://github.com/topameng/tolua">tolua</a> 的C源码，编译之后会输出tolua.dll。这个可以自己修改编译，为了给tolua集成lua-protobuf，需要自己编译tolua在各个平台的库。</p>
<span id="more"></span>

<p>tolua 的C代码部分是C#和lua的中间层，提供函数给C# DllImport，C#通过Marshal等与C代码交互。在和lua交互方面，它符合lua扩展库标准，一方面通过lua的C API与lua虚拟机交互，另一方面会提供接口给lua脚本使用。</p>
<p>同时 tolua 的C代码引入了一些lua扩展库，比如cjson、LuaSocket、sqlite3、lpeg、bit、pbc等手机游戏常用库，这些库扩展了lua的能力。</p>
<p>本文要介绍的就是将 lua-protobuf 和lua源码一起编译成 tolua 的native库，Windows平台叫做<code>tolua.dll</code>，Android叫做<code>libtolua.so</code>，Mac平台叫<code>tolua.bundle</code>，而iOS平台由于不允许使用动态库，所以会编译成静态库<code>libtolua.a</code>。</p>
<p><strong>为什么换成 lua-protobuf ？</strong></p>
<p>一是 tolua 使用的<code>protoc-gen-lua</code> 很多年不更新了，存在bug且对 proto3 的支持堪忧；</p>
<p>二是protoc-gen-lua返回的不是lua table，看不到字段，<strong>不便于调试</strong>；</p>
<p>三是服务端希望更新到<strong>proto3</strong>以<strong>支持map</strong>特性；</p>
<p>四是C#的protobuf-net存在<strong>GC问题</strong>，升级proto3的同时更换为Google官方提供的版本；</p>
<p>五是使用<code>.pb</code>二进制文件代替lua协议定义文件，大小<strong>从2MB减小到180KB</strong>。</p>
<p>还有，网上的文章都是几年前或者一年前了，随着 lua-protobuf 的更新，失去了时效性并且不够详细，这里再重新梳理一遍流程。</p>
<h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="tolua-源码"><a href="#tolua-源码" class="headerlink" title="tolua 源码"></a>tolua 源码</h3><p>tolua 的源码 Github 地址： <a href="https://github.com/topameng/tolua_runtime">tolua_runtime</a> </p>
<p>到releases下载最新的包即可。本文下载的是1.0.8.584版本。</p>
<h3 id="lua-protobuf"><a href="#lua-protobuf" class="headerlink" title="lua-protobuf"></a>lua-protobuf</h3><p>lua-protobuf Github：<a href="https://github.com/starwing/lua-protobuf">lua-protobuf</a></p>
<p>主要是需要里面的<code>pb.c</code>和<code>pb.h</code>文件。版本0.3.2。</p>
<h3 id="protobuf-csharp"><a href="#protobuf-csharp" class="headerlink" title="protobuf-csharp"></a>protobuf-csharp</h3><p>protobuf-csharp Github: <a href="https://github.com/protocolbuffers/protobuf/releases">protobuf-csharp</a></p>
<p>版本3.13.0，解决了C# GC问题，刚刚发布了3.14.0，修复了一点小bug，准备再升级一下。</p>
<p>本文不讨论protobuf-csharp的接入。</p>
<h3 id="编译平台"><a href="#编译平台" class="headerlink" title="编译平台"></a>编译平台</h3><p>tolua 作者使用的是 mingw 编译的，需要准备的编译平台是<a href="https://www.msys2.org/">msys2</a></p>
<p>到官网下载之后安装即可。</p>
<p>有一说一，这个环境安装起来挺费劲的，很容易失败。</p>
<p>用 tolua 提供了配置好的 msys2 ：<a href="https://pan.baidu.com/s/1c2JzvDQ">https://pan.baidu.com/s/1c2JzvDQ</a> 但是百度网盘下载实在是太慢了。并且这个版本的msys2比较老，所以我还是选择自己配置编译环境。 </p>
<h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><p>有了编译平台，接着要在平台上安装 mingw 等环境。</p>
<p>打开 msys2 控制台输入运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman --needed -Sy bash pacman pacman-mirrors msys2-runtime</span><br></pre></td></tr></table></figure>

<p>按照提示安装好 msys2 的运行环境。</p>
<p>安装好运行环境之后要把 msys2 的控制台关掉，进到msys2的文件夹中运行autorebase.bat。</p>
<p>为什么要这样做？因为如果不rebase的话 msys2 就没法更新其他软件包，这是 msys2 的问题。</p>
<p>接下来先更新软件包数据库和系统包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure>

<p>如果报错重启msys2再执行下面命令继续更新（官网说的）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -Su</span><br></pre></td></tr></table></figure>



<p>更新好了数据库和本地系统包，下面才是真正安装环境。</p>
<p>依次输入回车安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S mingw-w64-i686-gcc</span><br><span class="line">pacman -S mingw-w64-x86_64-gcc</span><br><span class="line">pacman -S mingw-w64-i686-make</span><br><span class="line">pacman -S mingw-w64-x86_64-make</span><br><span class="line">pacman -S make</span><br></pre></td></tr></table></figure>

<p>如果提示什么PGP签名失效，那么需要更新已知密钥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman-key --refresh-keys</span><br></pre></td></tr></table></figure>

<p>如果不行，更改一下key服务器地址。</p>
<p>配置文件在<code>msys64\etc\pacman.d\gnupg\gpg.conf</code>，增加一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keyserver hkps://hkps.pool.sks-keyservers.net:443</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keyserver hkp://ipv4.pool.sks-keyservers.net:11371</span><br></pre></td></tr></table></figure>

<p>然后再refresh-keys。</p>
<p>上面弄好之后，再关掉 msysy2 然后rebase，然后再启动msys2。。。接着应该可以安装 mingw 和 make 了。</p>
<p>反正我这样之后成功了。</p>
<h2 id="三、编译"><a href="#三、编译" class="headerlink" title="三、编译"></a>三、编译</h2><p>下面就是正式的编译了，我们需要编译各个平台的 tolua 库，包括Windows、Android、Mac、iOS。</p>
<h3 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h3><p>在编译之前需要对 luasocket 代码做一点修改，因为最新的 luasocket 删除了 LUASOCKET_INET_PTON 的定义，如果用最新的 msys2 编译会报错。</p>
<p>打开tolua源码中的<code>luasocket/inet.h</code>，删除如下三行代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __MINGW32__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LUASOCKET_INET_PTON</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>修改的原因是新版的 msys2 中已经带有了inet_pton了，luasocket不再需要这个定义。</p>
<p>参考讨论：<a href="https://github.com/topameng/tolua_runtime/issues/29">https://github.com/topameng/tolua_runtime/issues/29</a></p>
<h3 id="集成lua-protobuf"><a href="#集成lua-protobuf" class="headerlink" title="集成lua-protobuf"></a>集成lua-protobuf</h3><p>网上有些文章说最新的lua-protobuf已经使用宏支持了lua5.1，不再需要修改代码，实际上还是需要的。</p>
<p>要先把 lua-protobuf 的 <code>pb.c</code> 和 <code>pb.h </code>文件复制到 <code>tolua_runtime</code> 文件夹中，然后进行下一步的修改。</p>
<h3 id="lua-protobuf代码修改"><a href="#lua-protobuf代码修改" class="headerlink" title="lua-protobuf代码修改"></a>lua-protobuf代码修改</h3><p>lua-protobuf 的作者认为 tolua 的 OpenLibs 函数的实现方式应该符合Lua5.2+的 require 语义，不过tolua的作者并没有修改。这导致编译后的 lua-protobuf 不能在Lua中 require： <code>local pb = require &quot;pb&quot;</code>，因此要对lua-protobuf 代码中的<code>pb.c</code>进行一点修改（lua-protobuf仓库放的第三方文章中说不需要了，但实际上还是需要的）。</p>
<p><code>pb.c</code>中<code>luaL_newlib</code>为lua5.2版本才支持的语法，而tolua是5.1，所以找到以下几个函数进行如下修改，判断Lua版本进行不同的调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LUALIB_API <span class="type">int</span> <span class="title function_">luaopen_pb_io</span><span class="params">(lua_State *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LUA_VERSION_NUM &lt; 502</span></span><br><span class="line">	luaL_register(L, <span class="string">&quot;pb.io&quot;</span>, libs);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	luaL_newlib(L, libs);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LUALIB_API <span class="type">int</span> <span class="title function_">luaopen_pb_conv</span><span class="params">(lua_State *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LUA_VERSION_NUM &lt; 502</span></span><br><span class="line">	luaL_register(L, <span class="string">&quot;pb.io&quot;</span>, libs);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	luaL_newlib(L, libs);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LUALIB_API <span class="type">int</span> <span class="title function_">luaopen_pb</span><span class="params">(lua_State *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LUA_VERSION_NUM &lt; 502</span></span><br><span class="line">	luaL_register(L, <span class="string">&quot;pb&quot;</span>, libs);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	luaL_newlib(L, libs);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不进行这样的修改，还有另外一种方法，在tolua的LuaClient.cs中添加以下内容：</p>
<p><img src="https://user-images.githubusercontent.com/17585924/64267930-d2671f00-cf69-11e9-8c94-adaef79318dc.png" alt="img"></p>
<p>不过我没有使用，不如直接支持在Lua中require方便。</p>
<p>Github讨论地址：<a href="https://github.com/topameng/tolua/issues/168">https://github.com/topameng/tolua/issues/168</a></p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul>
<li>32位编译</li>
</ul>
<p>进入 msys2文件夹，打开mingw32.exe。cd 进入到 tolua 代码所在的文件夹（我的在D盘）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd d:</span><br><span class="line">cd WorkSpace/tolua_runtime</span><br></pre></td></tr></table></figure>

<p>然后执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./build_win32.sh</span><br></pre></td></tr></table></figure>

<p>编译应该没有问题，有一个warning可以忽略。</p>
<p>然后在 <code>Plugins\x86</code> 目录下看见 <code>tolua.dll</code> 文件便编译成功</p>
<ul>
<li>64位编译</li>
</ul>
<p>跟上面一样，只不过是打开mingw64.exe执行相同操作，执行的脚本改成：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./build_win64.sh</span><br></pre></td></tr></table></figure>

<p>然后在 <code>Plugins\x86_64</code> 目录下看见 <code>tolua.dll</code> 文件便编译成功</p>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul>
<li>要先准备NDK10环境 <a href="https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip">https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip</a></li>
<li>下载完成后解压到不包含中文和空格的目录下</li>
<li>将 <code>build_arm.sh</code> , <code>build_x86.sh</code> , <code>build_arm64.sh</code> .文件中的 <code>NDK</code> 路径改为自己本地存储的路径<ul>
<li>我的是<code>D:/android-ndk-r10e</code></li>
</ul>
</li>
<li>将 <code>link_arm64.bat</code> 文件中的 <code>ndkPath</code> 修改为上面的NDK解压路径下。只需要修改上面文件中的根路径。不要修改 <code>NDK</code> 的版本</li>
</ul>
<blockquote>
<p>android平台用得最多的cpu架构体系是Acorn公司的arm和Intel公司x86，由于arm市场占有率最高，大多android的app也就只编译了arm版本，所以Intel也专门针对arm体系架构做了一个转换程序，也就是说，arm程序在x86机子上也可以跑起来。所以，一般来说，只要编译arm就可以了（最常用的CPU和ABI是ARMv7a），当然，将x86也编译起来是极好的，据以往分析闪退的经验，在x86机子上闪退的一大元凶就是那个转换程序出了问题，代价就是会增加包体的大小(每多支持一个CPU架构，就是多编译一个动态库so)。</p>
</blockquote>
<p><strong>注意</strong>：经过测试，NDK版本必须是 <code>android-ndk-r10e</code> 才可以编译，更新的版本生成文件的位置不一样，编译脚本会失效。</p>
<h4 id="1-armeabi-v7a"><a href="#1-armeabi-v7a" class="headerlink" title="1. armeabi-v7a"></a>1. armeabi-v7a</h4><ol>
<li>提前需要保证当前目录下存在 <code>Plugins\Android\libs\armeabi-v7a</code> 目录,不然没有文件输出</li>
<li>在 <code>msys2</code> 的<strong>32位</strong>编译环境中执行 <code>./build_arm.sh</code>.</li>
<li>然后在 <code>Plugins\Android\libs\armeabi-v7a</code> 目录下看见 <code>libtolua.so</code> 文件便编译成功</li>
</ol>
<h4 id="2-x86"><a href="#2-x86" class="headerlink" title="2.x86"></a>2.x86</h4><ol>
<li>提前需要保证当前目录下存在 <code>Plugins\Android\libs\x86</code> 目录,不然没有文件输出</li>
<li>在 <code>msys2</code> 的<strong>32位</strong>编译环境中执行 <code>./build_x86.sh</code>.</li>
<li>然后在 <code>Plugins\Android\libs\x86</code> 目录下看见 <code>libtolua.so</code> 文件便编译成功</li>
</ol>
<h4 id="3-arm64-v8a"><a href="#3-arm64-v8a" class="headerlink" title="3. arm64-v8a"></a>3. arm64-v8a</h4><ol>
<li>提前需要保证当前目录下存在 <code>Plugins\Android\libs\arm64-v8a</code> 目录,不然没有文件输出</li>
<li>在 <code>msys2</code> 的<strong>64位</strong>编译环境中执行 <code>./build_arm64.sh</code>.</li>
<li>然后在 <code>Plugins\Android\libs\arm64-v8a</code> 目录下看见 <code>libtolua.so</code> 文件便编译成功</li>
</ol>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>必须在Mac机器上编译</p>
<p>环境：macOS Mojav 10.14.5，Xcode 9.4.1</p>
<p>arm64 ： 必选项，支持iphone5s及以上；最低支持版本：iOS5.1.1<br>armv7s：支持iPhone5及以上<br>armv7：支持iPhone4及以上</p>
<p>我把 <code>build_ios.sh</code>中的armv7和armv7s那段指令删除了，没必要支持那么低的iPhone版本。</p>
<ol>
<li>打开终端.切换到 <code>tolua_runtime</code> 目录下</li>
<li>在终端中运行 <code>build_ios.sh</code> .如果遇见权限不足，用<code>chmod +x</code>命令提升权限</li>
<li>然后在 <code>Plugins\iOS</code> 目录下看见 <code>libtolua.a</code> 文件便编译成功</li>
</ol>
<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>必须在Mac机器上编译</p>
<ol>
<li>打开终端.切换到 <code>tolua_runtime</code> 目录下</li>
<li>在终端中运行 <code>build_osx.sh</code> .如果遇见权限不足，用<code>chmod +x</code>命令提升权限</li>
<li>然后在 <code>Plugins</code> 目录下看见 <code>tolua.bundle</code> 库文件便编译成功</li>
</ol>
<h2 id="四、集成到Unity"><a href="#四、集成到Unity" class="headerlink" title="四、集成到Unity"></a>四、集成到Unity</h2><h3 id="修改tolua"><a href="#修改tolua" class="headerlink" title="修改tolua"></a>修改tolua</h3><p>首先要在tolua C#部分 LuaDLL.cs中添加如下代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DllImport(LUADLL, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">luaopen_pb</span>(<span class="params">IntPtr L</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(LUADLL, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">luaopen_pb_io</span>(<span class="params">IntPtr L</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(LUADLL, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">luaopen_pb_conv</span>(<span class="params">IntPtr L</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(LUADLL, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">luaopen_pb_buffer</span>(<span class="params">IntPtr L</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(LUADLL, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">luaopen_pb_slice</span>(<span class="params">IntPtr L</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>并且在LuaClient.cs的OpenLibs函数中，将上述模块导入即可：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OpenLibs</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//lua-protobuf</span></span><br><span class="line">        luaState.OpenLibs(LuaDLL.luaopen_pb);</span><br><span class="line">        luaState.OpenLibs(LuaDLL.luaopen_pb_io);</span><br><span class="line">        luaState.OpenLibs(LuaDLL.luaopen_pb_conv);</span><br><span class="line">        luaState.OpenLibs(LuaDLL.luaopen_pb_buffer);</span><br><span class="line">        luaState.OpenLibs(LuaDLL.luaopen_pb_slice);</span><br><span class="line">        luaState.OpenLibs(LuaDLL.luaopen_struct);</span><br><span class="line">        luaState.OpenLibs(LuaDLL.luaopen_lpeg);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_STANDALONE_OSX || UNITY_EDITOR_OSX</span></span><br><span class="line">        luaState.OpenLibs(LuaDLL.luaopen_bit);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LuaConst.openLuaSocket)</span><br><span class="line">        &#123;</span><br><span class="line">            OpenLuaSocket();            </span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LuaConst.openLuaDebugger)</span><br><span class="line">        &#123;</span><br><span class="line">            OpenZbsDebugger();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="读取proto"><a href="#读取proto" class="headerlink" title="读取proto"></a>读取proto</h3><p>tolua 集成到 Unity 还需要额外做一些处理，除了替换Plugins目录下的所有内容外，其中主要是修改读取lua和proto的二进制<code>.pb</code>文件的逻辑。因为Unity的AB包是只支持txt和bytes的，lua的部分我们项目中已经做好了处理逻辑，要增加的就是<code>.pb</code>的读取。</p>
<p><code>.pb</code>是二进制文件，打AB包的时候加上<code>.bytes</code>后缀再打包，然后读取的时候从对应的AB包中加载<code>TextAsset</code>即可。</p>
<p>在tolua中，读取lua文件是在 <code>LuaResLoader.cs</code> 中，要注意lua层使用的protobuf的 <code>require &quot;pb&quot;</code> 中的 pb 不是一个lua文件，所以在移动平台走<code>LuaResLoader</code>的时候从AB包中读不到，要对<code>ReadDownLoadFile</code>函数做保护，AB包中没有直接返回<code>null</code>即可，最终lua层会在全局库中找到pb库。</p>
<h3 id="输出-pb文件"><a href="#输出-pb文件" class="headerlink" title="输出.pb文件"></a>输出.pb文件</h3><p>开发过程中编写的<code>.proto</code>文件是Protobuf的Scheme描述文件，经过protoc.exe编译可以输出各种语言的数据格式代码文件和编解码文件。前提当然是语言需要是官方支持的，但很可惜lua官方并不支持。这也是我们使用第三方protobuf库给lua用的原因。</p>
<p>之前<code>protoc-gen-lua</code>库使用的方式是模仿官方其他语言的形式——通过Scheme描述文件编译生成lua的数据结构，然后在运行时使用。</p>
<p>而<code>lua-protobuf</code>更换了一种方式，不再使用代码生成，而是通过Scheme描述文件编译生成二进制的<code>.pb</code>文件，这个文件相当于二进制的 Protobuf 数据结构，在lua层加载一下就拥有了所有的Protobuf消息数据结构，这个加载方式和云风的<code>pbc</code>是一致的。</p>
<p>另外，我们项目中使用的<code>ProtoGame_pb.lua</code>等定义文件大小<strong>超过2MB</strong>，换成二进制之后<strong>减小到180KB</strong>。</p>
<p>为了方便，我们可以把多个proto文件编译输出为一个.pb文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protoc -o ProtoAll.pb *.proto</span><br></pre></td></tr></table></figure>

<p>C#是这样输出的，会为每一个。proto文件生成一个cs文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protoc --csharp_out=. *.proto</span><br></pre></td></tr></table></figure>



<h3 id="读取-pb文件"><a href="#读取-pb文件" class="headerlink" title="读取.pb文件"></a>读取.pb文件</h3><p>这里需要知道的前提是，非AB模式直接从lua层用<code>io.read</code>读取二进制文件是不行的，lua读取二进制文件之后的格式会是<code>userdata</code>，这样是没法给 <code>lua-protobuf</code> 使用的。</p>
<p><code>lua-protobuf</code> 提供了pb.io.read 来代替非移动平台在非AB模式下的读取。下面是个例子：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> protoBytes</span><br><span class="line"><span class="keyword">if</span> LuaProtoLoader.IsEditor() == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    protoBytes = pb.<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;Assets/ToLua/Lua/protobuf/ProtoTest.pb&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    protoBytes = LuaProtoLoader.Load(<span class="string">&quot;ProtoTest.pb&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">load</span> = <span class="built_in">assert</span>(pb.<span class="built_in">load</span>(protoBytes))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">load</span>)</span><br></pre></td></tr></table></figure>

<p>Editor下从本地读取二进制文件，移动端从AB包读取，并且要用<code>LuaInterface.LuaByteBuffer</code>封装一下才是标准的二进制格式。</p>
<p><code>pb.load</code> 是加载proto数据的方法，成功了则返回true。</p>
<h3 id="序列化反序列化"><a href="#序列化反序列化" class="headerlink" title="序列化反序列化"></a>序列化反序列化</h3><p>之前用 <code>protoc-gen-lua</code> 有个很麻烦的地方，就是根据message id去初始化一个proto message数据结构：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> req = ProtoGame.Cmd_Team_FetchList_Req()</span><br><span class="line">req.modeid = modeid</span><br><span class="line">req.stageid = stageid</span><br></pre></td></tr></table></figure>

<p>更换 <code>lua-protobuf</code> 之后就不需要这样了，只要写一个table即可：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> req = &#123;&#125;</span><br><span class="line">req.modeid = modeid</span><br><span class="line">req.stageid = stageid</span><br></pre></td></tr></table></figure>

<p>然后传递给 <code>LuaNetwork</code> 时带上协议ID：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">LuaNetwork.SendMsg(ProtoGame.IDCmd_Team_FetchList_Req, req)</span><br></pre></td></tr></table></figure>

<p><code>LuaNetWork</code> 自己会根据消息ID去找该序列化成哪个消息，省去了一个初始化的步骤。</p>
<p>序列化方法如下，把table序列化为Person：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- lua 表数据</span></span><br><span class="line"><span class="keyword">local</span> data = &#123;</span><br><span class="line">    name = <span class="string">&quot;ilse&quot;</span>,</span><br><span class="line">    age  = <span class="number">18</span>,</span><br><span class="line">    contacts = &#123;</span><br><span class="line">        &#123; name = <span class="string">&quot;alice&quot;</span>, phonenumber = <span class="number">12312341234</span> &#125;,</span><br><span class="line">        &#123; name = <span class="string">&quot;bob&quot;</span>,   phonenumber = <span class="number">45645674567</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将Lua表编码为二进制数据</span></span><br><span class="line"><span class="keyword">local</span> bytes = <span class="built_in">assert</span>(pb.encode(<span class="string">&quot;Proto.Person&quot;</span>, data))</span><br></pre></td></tr></table></figure>



<p>反序列化：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 再解码回Lua表</span></span><br><span class="line"><span class="keyword">local</span> data2 = <span class="built_in">assert</span>(pb.decode(<span class="string">&quot;Proto.Person&quot;</span>, bytes))</span><br></pre></td></tr></table></figure>

<p>反序列化为table，可以看到每个字段和值，不再像 <code>protoc-gen-lua</code> 那样看不到字段、调试费劲、而且遍历容易出问题。</p>
<h3 id="网络层修改"><a href="#网络层修改" class="headerlink" title="网络层修改"></a>网络层修改</h3><p>到这里还没结束，由于没有了协议定义文件，之前我们使用的ProtoGame.IDXXX的方式都不能再使用了，为了兼容之前的逻辑，我们需要自己生成两个协议映射文件。</p>
<p>一个是消息到id的映射ProtoId.lua，如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ProtoGame.IDCmd_Team_FetchList_Req = <span class="number">1001</span></span><br></pre></td></tr></table></figure>

<p>一个是消息id到消息名称的映射ProtoName.lua，如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ProtoName[<span class="number">1001</span>] = <span class="string">&quot;Cmd_Team_FetchList_Req&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样Lua层的protobuf接入就基本上完成了。不过C#更换为官方的 Protobuf 也是一个漫长的过程。</p>
<h2 id="编译结果"><a href="#编译结果" class="headerlink" title="编译结果"></a>编译结果</h2><p>如果是不希望这么麻烦，可以直接用我编译好的tolua with protobuf <a href="https://github.com/jozhn/tolua_pb">https://github.com/jozhn/tolua_pb</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/5a35602adef8">https://www.jianshu.com/p/5a35602adef8</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/82093496">https://zhuanlan.zhihu.com/p/82093496</a></p>
<p><a href="http://changxianjie.gitee.io/unitypartner/2019/10/01/tolua%E4%B8%AD%E4%BD%BF%E7%94%A8protobuf3%E2%80%94%E9%9B%86%E6%88%90lua-protobuf/">http://changxianjie.gitee.io/unitypartner/2019/10/01/tolua%E4%B8%AD%E4%BD%BF%E7%94%A8protobuf3%E2%80%94%E9%9B%86%E6%88%90lua-protobuf/</a></p>
]]></content>
  </entry>
  <entry>
    <title>软件测试整理</title>
    <url>/2018/05/26/Old-software-testing-lesson/</url>
    <content><![CDATA[<p><strong>软件测试考点整理</strong></p>
<h2 id="一、软件测试介绍"><a href="#一、软件测试介绍" class="headerlink" title="一、软件测试介绍"></a><strong>一、软件测试介绍</strong></h2><p><strong>软件缺陷的概念</strong></p>
<p>从产品内部看，软件缺陷是产品开发或维护过程中所存在的错误、毛病等各种问题。</p>
<p>从产品外部看，软件缺陷是系统所需要实现的某种功能的失效或者违背。</p>
<span id="more"></span>

<p><strong>软件测试的一个重要功能</strong></p>
<p>verification(验证）and validation(确认)</p>
<ul>
<li>verification：验证我们是不是正确的做了这个产品，也就是产品要符合他的目标</li>
<li>validation：确认我们是不是做了正确的产品，也就是产品是用户真正想要的</li>
</ul>
<p><strong>软件测试的目的</strong></p>
<ul>
<li><p>软件测试是为了发现错误而执行程序的过程。</p>
</li>
<li><p>一个好的测试能过在第一时间发现程序中存在的错误。</p>
</li>
<li><p>一个好的测试是发现了至今尚未发现的错误。</p>
</li>
<li><p>减小软件不能正常工作的风险</p>
</li>
</ul>
<p><strong>软件测试的分类</strong></p>
<ul>
<li><p>C1：按照测试生成的来源</p>
</li>
<li><p>C2：按照生命周期的阶段</p>
</li>
<li><p>C3：按照测试活动的目的</p>
</li>
<li><p>C4：按被测对象的特征</p>
</li>
<li><p>C5：按测试过程的模型</p>
</li>
</ul>
<p><strong>软件测试V模型</strong></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/3403753-78e8f6ae632311b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/459" alt="img"> </p>
<p><strong>软件测试用例</strong></p>
<p>输入以测试系统和预测这些系统的输出，如果系统根据其规范运作。</p>
<h2 id="二、黑盒测试"><a href="#二、黑盒测试" class="headerlink" title="二、黑盒测试"></a><strong>二、黑盒测试</strong></h2><h3 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a><strong>等价类</strong></h3><p>（Equivalence Partitioning）</p>
<p>分为有效类和无效类，两者不能有重叠的部分</p>
<p><strong>例子</strong>：写出 NextDate Function（ 1812≤year≤2015 ）的等价类</p>
<p><strong>有效等价类</strong></p>
<p>M1 &#x3D; {month：1≤month≤12}</p>
<p>D1 &#x3D; {date：1≤date≤31}</p>
<p>Y1 &#x3D; {year：1812≤year≤2015}</p>
<p><strong>无效等价类</strong></p>
<p>M2 &#x3D; {month：month&lt;1}</p>
<p>M3 &#x3D; {month：month&gt;12}</p>
<p>D2 &#x3D; {date：date&lt;1}</p>
<p>D3 &#x3D; {date：date&gt;31}</p>
<p>Y2 &#x3D; {year：year&lt;1812}</p>
<p>Y3 &#x3D; {year：year&gt;2015}</p>
<p><strong>再例如</strong>：有一个报表处理系统，要求用户输入处理报表的日期。假如日期限制在2000年1月至2020年12月，即系统只能对该段时期内的报表进行处理。如果用户输入的日期不在这个范围内，则显示“错误信息”。并且此系统规定日期由年月的6位数字组成，前四位代表年，后两位代表月。要求划分日期的等价类。</p>
<p> 等价类：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/3403753-b55f16c32b08d5f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="img"> </p>
<p>测试用例：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-ad9bf9ffce77dfe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/465" alt="img"> </p>
<h3 id="边界值分析法"><a href="#边界值分析法" class="headerlink" title="边界值分析法"></a><strong>边界值分析法</strong></h3><p>（Boundary Value Analysis）</p>
<p>基本原理</p>
<p>边界值分析法是单一错误原则（Single fault），每个测试用例只有一个变量取边界值！</p>
<p>举例：</p>
<p>三角形问题，输入a、b、c</p>
<p>1 ≤ a ≤ 200</p>
<p>1 ≤ b ≤ 200</p>
<p>1 ≤ c ≤ 200</p>
<p>所以a,b,c的取值是</p>
<p>a &#x3D; {1，2，100，199，200}</p>
<p>b &#x3D; {1，2，100，199，200}</p>
<p>c &#x3D; {1，2，100，199，200}</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-65d425801fdf9bde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/444" alt="3403753-65d425801fdf9bde"> </p>
<p>测试用例如下</p>
<p><strong>小结总结</strong></p>
<ul>
<li><p>等价类测试的弱形式不如强形式测试全面</p>
</li>
<li><p>无效值会引起运行错误的时候（实现语言是强类型），则没有必要做健壮形式的测试。</p>
</li>
<li><p>错误条件很重要的时候，健壮测试很重要。</p>
</li>
<li><p>边界值测试是等价类测试的一种补充，两者结合可以加强测试效果。</p>
</li>
<li><p>决策表技术可以解决变量之间的依赖问题。</p>
</li>
<li><p>要进行多次尝试，确认最合适的等价类划分</p>
</li>
</ul>
<h3 id="正交测试"><a href="#正交测试" class="headerlink" title="正交测试"></a><strong>正交测试</strong></h3><p> （Orthogonal Array Testing）</p>
<p>使用正交试验法，为下面的基本信息查询选取测试用例。</p>
<p>姓  名： 1-不填  0-填写</p>
<p>身份证： 1-不填  0-填写</p>
<p>手机号： 1-不填  0-填写</p>
<p><strong>正交表</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/6436460-24307991b7afebe0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>第一步：</p>
<p>计算出需要的测试用例个数</p>
<p>n＝ ∑（每列的水平数-1）+1  </p>
<p>＝（2－1）＋（2－1）＋（2－1）＋1  </p>
<p>＝3×（2－1）＋1  </p>
<p>＝4</p>
<p>需要4次实验即可</p>
<p>第二步：</p>
<p>根据实验的水平数，和因子个数选择合适的正交表，我们选择第一个</p>
<p>第三步：</p>
<p>根据正交表写出测试用例。正交表的每一列对应一个因子（变量），每个取值对应的水平值，即变量的取值。</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/6436460-632354c75889d556.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="决策表"><a href="#决策表" class="headerlink" title="决策表"></a><strong>决策表</strong></h3><p>（Decision Table）</p>
<p>决策表有四个部分</p>
<p>Stub portion、Entry portion、Condition portion、Action portion<br><img src="http://upload-images.jianshu.io/upload_images/6436460-4474fe1d51afbfaa?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>从问题决策到结果，Y代表条件满足，N代表条件不满足，–代表忽略这个条件</p>
<p>练习：</p>
<p>某货运站收费标准如下：如果收件地点在本省，则快件每公斤5元，慢件每公斤3元；如果收件地点在省外，则在20公斤以内（含20公斤）快件每公斤7元，慢件每公斤5元，而超过20公斤时，快件每公斤9元，慢件每公斤7元。请用决策表方法解决此问题。</p>
<p>第一步：确定规则的数目。</p>
<p>条件：</p>
<p>（1）收件地在本省？</p>
<p>（2）是快件？</p>
<p>（3）重量不超过20公斤？</p>
<p>根据公式计算2的3次方＝8</p>
<p>所以应有8条规则。</p>
<p>第二步：列出所有的条件桩和行动桩。</p>
<p>第三步：填入条件条目</p>
<p>第四步：填入行动条目</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/3403753-4b742f77aabc9c6b.png?imageMogr2/auto-orient/" alt="img"> </p>
<p>第五步：化简决策表（一定要合并简化）</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-fe6299cda90575e1.png" alt="img"> </p>
<h3 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a><strong>因果图</strong></h3><p>（Cause-Effect Graphing）</p>
<p><strong>因果图法产生的背景</strong></p>
<p>等价类划分法和边界值分析方法都是着重考虑输入条件，但没有考虑输入条件的各种组合、输入条件之间的相互制约关系。这样虽然各种输入条件可能出错的情况已经测试到了，但多个输入条件组合起来可能出错的情况却被忽视了。</p>
<p>如果在测试时必须考虑输入条件的各种组合，则可能的组合数目将是天文数字，因此必须考虑采用一种适合于描述多种条件的组合、相应产生多个动作的形式来进行测试用例的设计，这就需要利用因果图（逻辑模型）。</p>
<p><strong>因果图概念介绍</strong></p>
<p>因果图（Cause-EffectGraphing）提供了一个把规格转化为判定表的系统化方法，从该图中可以产生测试数据。其中原因是表示输入条件，结果是对输入执行的一系列计算后得到的输出。因果图方法最终生成的就是判定表，它适合于检查程序输入条件的各种组合情况。</p>
<p><strong>因果图中基本符号介绍（这里可以看PPT，不全部列出）</strong> </p>
<ol>
<li><p>等价 implication<br>  if C1 is 1，then E1 is 1 also，else E1 is 0.<br>  <img src="https://upload-images.jianshu.io/upload_images/6436460-df1631c54e33e741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>非 not<br>  if C1 is 1，then E1is 0，else E1 is 1.<br>  <img src="https://upload-images.jianshu.io/upload_images/6436460-8a945ec7f5bc3c3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>或 or<br>  if C1or C2 or C3 is 1，then E1 is 1，else E1is 0；“Or” may have arbitrary number of inputs.<br>  <img src="https://upload-images.jianshu.io/upload_images/6436460-6ed75d202ccb403b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>与 and<br>  if both C1 and C2 are 1，then E1is1，else E1is 0；“And” may have arbitrary number of input.<br>  <img src="https://upload-images.jianshu.io/upload_images/6436460-d5e0697ec4c3ab3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>异 exclusive<br>  either C1 or C2<br>  <img src="https://upload-images.jianshu.io/upload_images/6436460-445ccb3c63bcc930.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>唯一 one and only one<br>  one, and only one, of C1 and C2<br>  <img src="https://upload-images.jianshu.io/upload_images/6436460-dca3582a9e0486b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>要求 require<br>  C1 requires C2<br>  <img src="https://upload-images.jianshu.io/upload_images/6436460-2e82f88c04302bff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>强制 masking<br>  E1 masks E2<br>  <img src="https://upload-images.jianshu.io/upload_images/6436460-452fd59c365bbd0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<p><strong>因果图分析步骤</strong><br>第一步，找出Cause（原因）</p>
<p>Cause（原因）</p>
<p>c1— the first character is #</p>
<p>c2 —the first character is *</p>
<p>c3 —the second character is number</p>
<p>第二步，找出Effect（结果）</p>
<p>e1— give the information N</p>
<p>e2— modify the document</p>
<p>e3— give the information M</p>
<p>第三步，分析出中间节点</p>
<p>然后画出因果图，如图</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-956564543e8b2946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p>
<p><strong>再举个例子</strong></p>
<p>某公司对客户有一定的折扣政策，公司软件的一个模块的需求说明书中描述“……当交易额小于等于5万元时折扣为0，当交易额大于5万元时才有折扣，如果交易的客户在三个月内无欠款，则折扣为15%；如果交易用户在三个月内有欠款，若该用户是三年以上的老客户，则折扣为10%；若该客户不是三年以上的老客户，则折扣为5%。”</p>
<p><strong>原因</strong>（对立的就不要再写了，比如写了是小于五万就不用写大于等于五万了）：</p>
<p>C1：交易额大于5万元</p>
<p>C2：三个月无欠款</p>
<p>C3：三年以上老客户</p>
<p><strong>结果</strong>（注意对立的就不要再写了）：</p>
<p>E1：无折扣</p>
<p>E2：折扣&#x3D;5%</p>
<p>E3：折扣&#x3D;10%</p>
<p>E4：折扣&#x3D;15%</p>
<p><strong>因果图</strong>**</p>
<p>从这个图中你就能找出导出上边说的四种结果的逻辑</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-f783504f8108d10a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/557" alt="img"> </p>
<h2 id="三、白盒测试"><a href="#三、白盒测试" class="headerlink" title="三、白盒测试"></a>三、白盒测试</h2><p>白盒测试（white-box testing）也叫structural testing, clear box testing, and glass box testing. </p>
<p>白盒测试分为<strong>静态测试</strong>和<strong>动态测试</strong></p>
<p>白盒静态测试：Code inspection, Static structure analysis, Static quality metric method</p>
<p>白盒动态测试：主要基于覆盖，包括logic coverage, loop coverage, basis path coverage, etc.</p>
<p>白盒测试主要应用于单元测试</p>
<p>we can’t use exhaustive（详尽的） testing</p>
<p><strong>动态测试之逻辑覆盖</strong></p>
<p>白盒测试用例设计的一个很重要的评估标准就是对代码的覆盖度。一说到覆盖，大家都感觉非常熟悉，但是常见的覆盖都有哪些？各自有什么优缺点？在白盒测试的用例设计中我们应该如何自如地运用呢？为大家总结了一下几种常见的覆盖以及各自的优缺点。</p>
<p>白盒测试中常见的覆盖有六种：语句覆盖、判定覆盖、条件覆盖、判定&#x2F;条件覆盖、组合覆盖和路径覆盖。下面我们就分别看看这几种不同的覆盖究竟是什么鬼。</p>
<h3 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h3><p>（Statement Coverage）</p>
<p>语句覆盖，顾名思义就是针对代码语句的嘛。它的含义是我们设计出来的测试用例要保证程序中的每一个语句至少被执行一次。通常语句覆盖被认为是“最弱的覆盖”，原因是它仅仅考虑对代码中的执行语句进行覆盖而没有考虑各种条件和分支，因此在实际运用中语句覆盖很难发现代码中的问题。举个非常简单的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">public <span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> a/b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个求两数之商的函数。如果我们设计如下的测试用例：</p>
<p>TestCase: a &#x3D; 2, b &#x3D; 1</p>
<p>这时候我们会发现，该函数的代码覆盖率达到了100%，并且设计的case可以顺利通过测试。</p>
<p>但是显然该函数有一个很明显的bug：当 b&#x3D;0 时，会抛出异常。</p>
<p><strong>再来看这个例子：</strong> </p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-2924aef22f6da42b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/482" alt="img"> </p>
<p><strong>主要特点</strong>：语句覆盖是最起码的结构覆盖要求，语句覆盖要求设计足够多的测试用例，使得程序中每条语句至少被执行一次。</p>
<p><strong>用例设计</strong>：（<strong>如果此时将A路径上的语句1-&gt;T去掉，那么用例如下</strong>）</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-f282b42f9c02c946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/648" alt="img"> </p>
<p><strong>优点</strong>：可以很直观地从源代码得到测试用例，无须细分每条判定表达式。</p>
<p><strong>缺点</strong>：由于这种测试方法仅仅针对程序逻辑中显式存在的语句，但对于隐藏的条件和可能到达的隐式逻辑分支，是无法测试的。在本例中去掉了语句1—〉T去掉，那么就少了一条测试路径。在if结构中若源代码没有给出else后面的执行分支，那么语句覆盖测试就不会考虑这种情况。但是我们不能排除这种以外的分支不会被执行，而往往这种错误会经常出现。再如，在Do-While结构中，语句覆盖执行其中某一个条件分支。那么显然，语句覆盖对于多分支的逻辑运算是无法全面反映的，它只在乎运行一次，而不考虑其他情况。</p>
<h3 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a>判定覆盖</h3><p>（Decision Coverage）</p>
<p>判定覆盖也被成为分支覆盖(Branch Coverage)，也就是说设计的测试用例要保证让被测试程序中的<strong>每一个分支都至少执行一次</strong>。举个例子,有如下流程图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-f341f35792bf0be8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/563" alt="img"> </p>
<p>针对该图我们想要做到判定覆盖，可以设计如下case：</p>
<p>TestCase1: a&#x3D;1, b&#x3D;1  (路径：ab)</p>
<p>TestCase2: a&#x3D;-1, b&#x3D;-1  (路径：acd)</p>
<p>TestCase3: a&#x3D;2, b&#x3D;-1  (路径：ace)</p>
<p>判定覆盖比语句覆盖强一些，能发现一些语句覆盖无法发现的问题。但是往往一些判定条件都是由多个逻辑条件组合而成的，进行分支判断时相当于对整个组合的最终结果进行判断，这样就会忽略每个条件的取值情况，导致遗漏部分测试路径。</p>
<p><strong>用例设计</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-7a815fde0eb93910.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/678" alt="img"> </p>
<p><strong>优点</strong>：判定覆盖比语句覆盖要多几乎一倍的测试路径，当然也就具有比语句覆盖更强的测试能力。同样判定覆盖也具有和语句覆盖一样的简单性，无须细分每个判定就可以得到测试用例。</p>
<p><strong>缺点</strong>：往往大部分的判定语句是由<strong>多个逻辑条件组合</strong>（也就是可能if(a&#x3D;&#x3D;b&amp;&amp;c&#x3D;&#x3D;d)这种的逻辑组合）而成（如，判定语句中包含AND、OR、CASE），若仅仅判断其整个最终结果，而忽略每个条件的取值情况，必然会遗漏部分测试路径。</p>
<h3 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h3><p>（Condition Coverage）</p>
<p>条件覆盖于分支覆盖不同，条件覆盖要求所设计的测试用例能使每个判定中的每一个条件都获得可能的取值，即<strong>每个条件至少有一次真值、有一次假值</strong>。</p>
<p>仍然以上面<strong>流程图2</strong>作为例子来说明。上图中涉及到的条件一共有4个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;0, a&lt;0, b&gt;0, b&lt;0</span><br></pre></td></tr></table></figure>
<p>为了达到条件覆盖的目的，我们设计的用例需要在 a 点有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;0, a&lt;=0, b&gt;0, b&gt;=0，</span><br></pre></td></tr></table></figure>
<p>这些情况出现，并且在 c 点有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&lt;0, a&gt;=0, b&lt;0, b&gt;=0</span><br></pre></td></tr></table></figure>
<p>这些情况出现。现在可以设计如下用例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TestCase1: a=1, b=1  (路径：ab)</span><br><span class="line"></span><br><span class="line">TestCase1: a=-1, b=-1  (路径：acd)</span><br><span class="line"></span><br><span class="line">TestCase1: a=-1, b=0  (路径：ace)</span><br><span class="line"></span><br><span class="line">TestCase1: a=1, b=-1  (路径：ace)</span><br></pre></td></tr></table></figure>
<p>通常而言条件覆盖比判定覆盖强，因为条件覆盖使得判定中的每一个条件都取到了不同的结果，这一点判定覆盖则无法保证。但条件覆盖也有缺陷，因为它只能保证每个条件都取到了不同结果，但没有考虑到判定结果，因此有时候条件覆盖并不能保证判定覆盖。</p>
<p><strong>优点</strong>：显然条件覆盖比判定覆盖，增加了对符合判定情况的测试，增加了测试路径。</p>
<p><strong>缺点</strong>：要达到条件覆盖，需要足够多的测试用例，但条件覆盖并不能保证判定覆盖。条件覆盖只能保证每个条件至少有一次为真，而不考虑所有的判定结果。</p>
<h3 id="判定条件覆盖"><a href="#判定条件覆盖" class="headerlink" title="判定条件覆盖"></a>判定条件覆盖</h3><p>（Decision&#x2F;Condition Coverage）</p>
<p><strong>针对流程图1的测试用例</strong></p>
<p>主要特点：设计足够多的测试用例，使得判定中每个条件的所有可能结果至少出现一次，每个判定本身所有可能结果也至少出现一次。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-3af3f96dc838f2d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/692" alt="img"> </p>
<p><strong>优点</strong>：判定&#x2F;条件覆盖满足判定覆盖准则和条件覆盖准则，弥补了二者的不足。</p>
<p><strong>缺点</strong>：判定&#x2F;条件覆盖准则的缺点是未考虑条件的组合情况。</p>
<h3 id="组合覆盖"><a href="#组合覆盖" class="headerlink" title="组合覆盖"></a>组合覆盖</h3><p>（Branch Condition Combination Coverage）</p>
<p>组合覆盖也叫做条件组合覆盖。意思是说我们设计的测试用例应该使得每个判定中的各个条件的各种可能组合都至少出现一次。显然，满足条件组合覆盖的测试用例一定是满足判定覆盖、条件覆盖和判定条件覆盖的。</p>
<p>主要特点：要求设计足够多的测试用例，使得每个判定中条件结果的所有可能组合至少出现一次。</p>
<p>针对前文提到的<strong>流程图2</strong>，做条件组合覆盖时我们可以设计如下用例：</p>
<p>TestCase1: a&#x3D;1, b&#x3D;1  (路径：ab)</p>
<p>TestCase1: a&#x3D;-1, b&#x3D;-1  (路径：acd)</p>
<p>TestCase1: a&#x3D;-1, b&#x3D;0  (路径：ace)</p>
<p>TestCase1: a&#x3D;1, b&#x3D;-1  (路径：ace)</p>
<p><strong>针对流程图1的测试用例</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-7e79cc90a955c2fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/661" alt="img"> </p>
<p><strong>优点</strong>：多重条件覆盖准则满足判定覆盖、条件覆盖和判定&#x2F;条件覆盖准则。更改的判定&#x2F;条件覆盖要求设计足够多的测试用例，使得判定中每个条件的所有可能结果至少出现一次，每个判定本身的所有可能结果也至少出现一次。并且每个条件都显示能单独影响判定结果。</p>
<p><strong>缺点</strong>：线性地增加了测试用例的数量。</p>
<h3 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h3><p>路径覆盖，意思是说我们设计的测试用例可以覆盖程序中所有可能的执行路径。这种覆盖方法可以对程序进行彻底的测试用例覆盖，比前面讲的五种方法覆盖度都要高。那么这种方法是不是就一定最好呢？当然不能讲得这么绝对，它的缺点也是显而易见的：由于需要对所有可能的路径全部进行覆盖，那么我们需要设计数量非常巨大的而且较为复杂的测试用例，用例数量将呈现指数级的增长。所以理论上来讲路径覆盖是最彻底的测试用例覆盖，但实际上很多时候路径覆盖的可操作性不强。</p>
<p> <strong>针对流程图1</strong> </p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-ce7fbe6e599df3d3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/649" alt="img"> </p>
<p><strong>优点</strong>：这种测试方法可以对程序进行彻底的测试，比前面五种的覆盖面都广。</p>
<p><strong>缺点</strong>：由于路径覆盖需要对所有可能的路径进行测试（包括循环、条件组合、分支选择等），那么需要设计大量、复杂的测试用例，使得工作量呈指数级增长。而在有些情况下，一些执行路径是不可能被执行的</p>
<p><strong>总结</strong></p>
<p>以上简单描述了几种不用的逻辑覆盖方法的原则和优劣。在实际的操作中，要正确使用白盒测试的代码覆盖方法，就要从代码分析和代码调研入手，根据调研的结果，可以选择上述方法中的某一种，或者好几种方法的结合，设计出高效的测试用例，尽可能全面地覆盖到代码中的每一个逻辑路径。 </p>
<p><strong>控制流程图和圈复杂度</strong> </p>
<p>常见控制流图  </p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-34c53a3be76dc056.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/695" alt="img"> </p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-d304fb2d7159f5e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/359" alt="img"> </p>
<p>将上述程序转为控制流图</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-5df3401dc1fa1826.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/269" alt="img"> </p>
<p><strong>公式</strong>：圈复杂度（独立路径数）&#x3D; 闭合区域数目&#x3D; 二值判定节点数+1 &#x3D; 边数-节点数+2</p>
<p>注：闭合区域指将平面分成的区域，即包括外面无限大的部分</p>
<p><strong>例子</strong>：</p>
<p>计算下图的圈复杂度</p>
<p>标识它的独立路径</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-9956b51233f34570.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/309" alt="img"> </p>
<p><strong>独立路径是指程序中至少引进一个新的处理语句集合，采用流图的术语，即独立路径必须至少包含一条在定义路径之前不曾用到的边。</strong> </p>
<p>圈复杂度（独立路径数）&#x3D;判定节点数（5）+1&#x3D; 6</p>
<p>独立路径数&#x3D; 闭合区域个数&#x3D; 6</p>
<p>独立路径数&#x3D; e – n + 2 &#x3D; 13 – 9 + 2 &#x3D; 6 （e为边数，n为结点数 ）</p>
<p><strong>独立路径</strong>：</p>
<p>ABCFG</p>
<p>ABCDFG</p>
<p>ABDFG</p>
<p>ABEFG</p>
<p>ABEDFG</p>
<p>ABEFGABEFG</p>
<p><strong>再比如</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-90131cbc7c78141b.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/510" alt="img"> </p>
<p><strong>复杂度</strong>&#x3D;闭合区域数&#x3D;4</p>
<p>&#x3D;二值判定节点数+1&#x3D;3+1&#x3D;4</p>
<p>&#x3D;e-n+2&#x3D;11-9+2&#x3D;4</p>
<p><strong>独立路径</strong></p>
<p>1-11</p>
<p>1-2-3-4-5-10-1-11</p>
<p>1-2-3-6-8-9-10-11</p>
<p>1-2-3-6-7-9-10-1-11</p>
<p>为了覆盖所有程序语句，必须设计至少4个测试用例使程序运行于这4条路径</p>
<h3 id="循环测试"><a href="#循环测试" class="headerlink" title="循环测试"></a>循环测试</h3><p>路径覆盖法是一种将程序中循环结构简化成选择结构的测试方法。</p>
<p>循环简化的目的是限制循环次数，无论循环的形式和循环体实际执行的次数，简化后的循环测试只考虑循环一次或者零次两种情况。</p>
<p>在这种情况下，循环与判定分支的效果是一样的，即循环要么执行，要么跳过。</p>
<p><strong>采用较复杂的循环测试策略测试循环，可采用下面测试集：</strong></p>
<p>跳过整个循环；</p>
<p>只循环一次；</p>
<p>只循环两次；</p>
<p>循环m次，m</p>
<h3 id="数据流测试"><a href="#数据流测试" class="headerlink" title="数据流测试"></a>数据流测试</h3><h3 id="突变测试"><a href="#突变测试" class="headerlink" title="突变测试"></a>突变测试</h3><p>（Mutation Testing）</p>
<p>突变测试(mutation testing) , 或称作突变分析、程序突变，它是用于衡量软件测试的质量。突变测试通常对程序的源代码或者目标代码做小的改动，并把截然不同的错误行为（或者怪异行为）作为预期。如果测试代码没有觉察到这种小改动带来的错误，就说明这个测试是有问题的。</p>
<p>突变测试<strong>目的</strong></p>
<ul>
<li>Help testers design high quality tests 设计高质量测试</li>
<li>Evaluate the quality of existing tests 评估现有测试质量</li>
</ul>
<p>突变测试<strong>范围</strong></p>
<p>unit level、integration level、specification level </p>
<p>单元级、集成级、规范级 </p>
<p><strong>下面用一个例子来解释什么是变异测试，考虑以下代码片段：</strong> </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a &amp;&amp; b)  c = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> c = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>条件运算符如果用||来替换&amp;&amp;，就会产生以下变异： </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a || b) c = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> c = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>为了防止这种突变，测试需要满足以下条件：</p>
<ol>
<li>测试数据必须对突变和原始程序引起的不同状态覆盖。如：a&#x3D;1,b&#x3D;0可以达到目的。</li>
<li>c的值应该传播到程序输出，并被测试检查。</li>
</ol>
<p>弱突变覆盖需满足1，强突变覆盖需满足1、2。</p>
<h2 id="四、单元测试"><a href="#四、单元测试" class="headerlink" title="四、单元测试"></a>四、单元测试</h2><p>（Unit Testing）</p>
<p>单元测试是最小的测试部分<strong>，</strong>测试模块是独立于其他模块的<strong>，</strong>一般情况下，被测单元能够实现一个特定的功能，并与其他单元有明确的接口定义，这样才可以与其他单元隔离开来。</p>
<p><strong>In Java, a unit is a class or a class method.</strong></p>
<p><strong>In C, a unit is a function or sub processes.</strong></p>
<p>目标：确保模块被正确的编码</p>
<p>依据：系统详细的规格说明</p>
<p>过程：经过设计、脚本开发、执行、调试和分析结果一个过程</p>
<p>执行者：由程序开发人员和测试人员共同完成</p>
<p>方法：以白盒测试方法为主，辅以黑盒测试方法</p>
<p>如何进行评估：通过所有单元测试用例，代码没有严重缺陷</p>
<p><strong>单元测试过程</strong></p>
<ol>
<li>在详细设计阶段完成单元测试计划</li>
<li>建立单元测试环境，完成测试设计和开发</li>
<li>执行单元测试用例，并且详细记录测试结果</li>
<li>判定单元测试是否通过</li>
<li>提交单元测试报告</li>
</ol>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-ea75f95ca29ea390.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/231" alt="img"> </p>
<p><strong>单元测试优点</strong></p>
<ol>
<li>单独进行，一起进行，降低软件质量成本，缩短开发周期；</li>
<li>便于跟踪错误；</li>
<li>集成后错误会放大，集成后复杂性高，很难发现问题；</li>
<li>无需而外的设备和人员。</li>
</ol>
<p><strong>单元测试分为静态测试和动态测试</strong></p>
<p><strong>静态测试</strong></p>
<p>代码评审：代码走查和正式会议审查。</p>
<p>代码走查：代码互查应用最多，代码走查是相对比较正式的评审过程，项目组部分成员通过阅读代码，向其他成员提出问题并对有关技术、风格、可能错误是否违背开发标准和规范等进行评论。</p>
<p>正式会议审查：是一种正式的检查和评估方法，最早由IBM提出，经实践证明，有一种有效的检查办法，从而得到软件工程界的普遍认同。它使用逐步检查源代码中有无逻辑或语法错误的办法来检验故障。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-6345a84c7099802f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/524" alt="img"> </p>
<h2 id="五、集成测试"><a href="#五、集成测试" class="headerlink" title="五、集成测试"></a>五、集成测试</h2><p>（Integration Testing）</p>
<p><strong>（集成测试、组装测试、联合测试、子系统测试、部件测试）</strong> </p>
<p>优点：早点发现错误，早点修正错误，早点获得测试反馈，调度修正错误灵活</p>
<p>分为<u>增量式测试</u>和<u>非增量式测试</u></p>
<p><strong>测试模式</strong></p>
<h3 id="大爆炸集成"><a href="#大爆炸集成" class="headerlink" title="**大爆炸集成 **"></a>**大爆炸集成 **</h3><p>（Big bang integration）</p>
<p><strong>优点</strong>：完成速度快、能够并行</p>
<p><strong>缺点</strong>：错误发生时很难找出他的位置和改变以及很多问题得在系统测试才能发现</p>
<p>适用范围：</p>
<p>Existing system with only minor modifications</p>
<p>Small systems with adequate unit testing</p>
<p>System made from certified high quality reusable components</p>
<h3 id="自顶向下集成"><a href="#自顶向下集成" class="headerlink" title="自顶向下集成"></a><strong>自顶向下集成</strong></h3><p>（Top-down integration）</p>
<p>分为广度和深度集成测试</p>
<p><strong>优点</strong></p>
<ul>
<li>早期显示控制和判断要点。 </li>
<li>采用深度优先装配，可以首先实现和验证完整的软件功能。</li>
<li>最多只需要一个驱动程序模块。 支持故障隔离。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>开发和维护存根的成本都较高。</li>
<li>底层组件需求无法预测可能导致对顶层组件的许多修改。</li>
</ul>
<h3 id="自顶向上集成"><a href="#自顶向上集成" class="headerlink" title="自顶向上集成"></a><strong>自顶向上集成</strong></h3><p>（Bottom-up integration）</p>
<p><strong>优点</strong></p>
<ul>
<li>允许对底层模块进行早期认证，任何叶子节点都可以进行集成测试。</li>
<li>减少剩余部分开发的工作量</li>
<li>支持故障隔离</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>驱动模块开发工作量比较大。 </li>
<li>高级验证被推迟到结束，无法及时发现设计错误。 </li>
<li>底盖异常坚硬。</li>
</ul>
<h3 id="三明治集成"><a href="#三明治集成" class="headerlink" title="三明治集成"></a><strong>三明治集成</strong></h3><p>Sandwich integration</p>
<p><strong>优点</strong></p>
<p>结合自上而下策略和自下而上策略的优势。 </p>
<p><strong>缺点</strong></p>
<p>在集成测试之前，中间层测试是不够的。 </p>
<p><strong>范围</strong></p>
<p>它被大多数软件开发项目使用。</p>
<h3 id="分层集成"><a href="#分层集成" class="headerlink" title="分层集成"></a>分层集成</h3><p>Layers integration</p>
<h3 id="高频集成"><a href="#高频集成" class="headerlink" title="高频集成"></a><strong>高频集成</strong></h3><p>（High-frequency integration）</p>
<h3 id="基于事件集成"><a href="#基于事件集成" class="headerlink" title="基于事件集成"></a><strong>基于事件集成</strong></h3><p>（Event-based integration）</p>
<h2 id="六、系统测试"><a href="#六、系统测试" class="headerlink" title="六、系统测试"></a>六、系统测试</h2><p><strong>目的：</strong>测试可安装性、可用性、兼容性、可维护性等等 </p>
<h2 id="七、性能测试"><a href="#七、性能测试" class="headerlink" title="七、性能测试"></a>七、性能测试</h2><p>性能是量度系统或组件在一定约束条件下，是否达到功能设计的指标：如响应速度，计算的精度，内存利用率。</p>
<p>性能是系统外部的质量属性基于用户的需求和用户的系统操作性的看法。</p>
<p>同时性能特别应用于对实时系统的评价当中,就是它的行为在指定的期限内完成正确的操作。</p>
<p><strong>评估指标为时间效率，空间效率，I∕O性能，数据库性能，内存性能，初始化∕退出时间和资源利用率****延时，事务处理时间，最大事务处理时间，事务操作时间，数据库性能，最大消耗的内存量，高峰内存时间，资源消耗。</strong></p>
<p><strong>下图描述了web应用的页面响应时间的分解。</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-82175e213519f1c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/518" alt="img"> </p>
<p>页面响应时间分解为网络传输时间（N1+N2+N3+N4）和应用延迟时间（A1+A2+A3），</p>
<p>而应用延迟时间又可分为数据库延迟时间（A2）和应用服务器延迟时间（A1+A3）。</p>
<p><strong>延迟</strong>：一个指令控制器发出数据请求的一瞬间和数据传送的一瞬间之间的时间间隔;是请求和完成操作之间拖延的时间差。</p>
<p><strong>事务处理时间：</strong>是指完成一项事务所需要的运行时间，用于评价事务处理效率。通常，事务处理的时间越短，则效率越高。</p>
<p><strong>并发用户数，一般分两种情况：</strong></p>
<p>严格意义的并发，即所有用户在同一时间做同一件事情或者操作。</p>
<p>广义范围的并发，多个用户对系统发出了请求或进行了操作，但这些操作可以是相同的，也可以是不同的。</p>
<p><strong>吞吐量：</strong>是指在一次性能测试过程中网络上传输数据量的总和。</p>
<p>一般来说，吞吐量用请求数&#x2F;秒或页面数&#x2F;秒来衡量。</p>
<p><strong>吞吐量指标有如下两个作用：</strong></p>
<p>1、协助设计性能测试场景，衡量性能测试场景是否达到了预期的设计目标。</p>
<p>在设计性能测试场景时，根据估算吞吐量数据测试场景事物发生频率。</p>
<p>2、协助分析性能测试瓶颈。</p>
<p><strong>性能测试比较关注业务并发用户数，从业务的角度设置多少并发数合理。</strong></p>
<p>下面给出估算<strong>并发用户数</strong>的公式：C&#x3D;nL／T</p>
<p>C —平均的并发用户数</p>
<p>n —登录会话的数量</p>
<p>L —登录会话的平均长度</p>
<p>T —考察的时间段长度</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-519297a823a3b4ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/502" alt="img"> </p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-7c460efd22f11f17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/556" alt="img"> </p>
<p><strong>例题</strong>：</p>
<p>一个软件系统每天约有400个用户访问。用户在一天之内有8小时内使用该系统，从登录到退出的平均时间为4小时，请计算该系统的并发用户数和并发用户的峰值各是多少？</p>
<p>分析：根据公式C&#x3D;400×4／8&#x3D;200</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3403753-ac03996d0f381bfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/236" alt="img"></p>
<p><strong>负载测试</strong>是模拟实际软件系统所承受的负载条件的系统负荷，通过不断加载（不断增加模拟用户数量）或其他加载方式来观察不同负载下系统响应时间和数据吞吐量，系统资源占有率（cpu和内存）等性能指标，以检验系统的行为和特性，发现系统可能存在的性能瓶颈、内存泄露和不能实现同步等问题。</p>
<p><strong>高低突变加载</strong>：某个时间用户数量很大，突然降到很低，过一段时间，又突然加到很高，反复几次。借助这种负载方式的测试，容易发现资源的释放和内存泄漏的问题。</p>
<p><strong>随机加载方式</strong>：由随机算法自动生成某个数量范围内变化的、动态的负载，这种方式可能是和实际情况最为接近的一种负载方式。虽然不容易模拟系统运行出现的瞬间高峰期，但可以模拟系统长时间的运行过程的状态。</p>
<p>压力测试用于判定应用处理大量数据的能力。</p>
<p>压力测试可以成功的测试服务器满负载的情况。</p>
<p>除了在服务器上增加运行的应用结合客户端测试是一种额外的形式的压力测试。</p>
<p><strong>性能测试过程：计划，记录，修改，执行，分析</strong></p>
]]></content>
  </entry>
</search>
